<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>truckli的博客</title>
  <link href="http://example.com/atom.xml" rel="self"/>
  <link href="http://example.com/"/>
  <updated>2015-04-15T10:15:08+08:00</updated>
  <id>http://example.com/</id>
  <author>
    <name>truckli</name>
    <email>1@gmail.com</email>
  </author>
  
    <entry>
      <title>Start Blog</title>
      <link href="http://example.com/start-blog/"/>
      <updated>2015-04-14T00:00:00+08:00</updated>
      <id>http://example.com/start-blog</id>
      <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;我决定养成写博客的习惯&lt;/title&gt;
  &lt;style type=&quot;text/css&quot;&gt;code{white-space: pre;}&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div id=&quot;header&quot;&gt;
&lt;h1 class=&quot;title&quot;&gt;我决定养成写博客的习惯&lt;/h1&gt;
&lt;/div&gt;
&lt;p&gt;我会坚持写的。现在这个网站还很烂，我会努力让它变好的！&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</content>
    </entry>
  
    <entry>
      <title>Haha</title>
      <link href="http://example.com/haha/"/>
      <updated>2015-04-14T00:00:00+08:00</updated>
      <id>http://example.com/haha</id>
      <content type="html">&lt;h1&gt;haha&lt;/h1&gt;
</content>
    </entry>
  
    <entry>
      <title>LibAhead for iOS - 在未越狱设备上修改三方APP的功能</title>
      <link href="http://example.com/libahead/"/>
      <updated>2015-01-31T11:46:31+08:00</updated>
      <id>http://example.com/libahead</id>
      <content type="html">&lt;p&gt;折腾了两个晚上，已搞定在未越狱 iOS 上向第三方 APP 注入 dylib 模块的方案！&lt;/p&gt;

&lt;p&gt;通过这个方案，使“微信去广告显IP删弧宠 for iOS ”成为可能（戏谑，但实现起来确实将比 Win32 下简单容易很多）。目前已实测在微信 iPhone 版中添加代码，强制开启“羊年春晚摇一摇”功能，不仅可以抢先体验提前穿越，还能随意控制原本随机摇出的各种功能（剧透：过年的时候微信摇一摇会有：新春红包、上传全家福到春晚、明信片、明星拜年、播放音乐、“甜蜜时光”、啥也没摇到、春晚节目单等功能：）。&lt;/p&gt;

&lt;p&gt;思路和十多年前的 AheadLib for Win32 创意方案一样。决定和 AheadLib 一样，做个自动化生成代码的工具，名字都想好了，LibAhead for iOS。宇宙依然，但青年不再，所以拖拖拉拉是难免的，哈&lt;/p&gt;

&lt;p&gt;针对特定 APP 写的 CydiaSubstrate dylib 模块，稍加处理即可集成到第三方 APP 里，并运行于未越狱的设备中。各种系统权限突破之类的还是老实点——干不了的；因为涉及修改 IPA 包，重新签名也是必须的。&lt;/p&gt;

&lt;p&gt;后续再把细节和工具慢慢补上……&lt;/p&gt;

&lt;p&gt;AppStore 之外（如蒲公英、同步推、快用、PP助手等）下载的 APP 都可能不是安全的——即使是未越狱的手机，基于以上功能完全可以在官方 APP 基础上做各种拦截和功能扩展。&lt;/p&gt;

&lt;p&gt;2015.02.06 更新：扯淡了，根本不需要转发，直接修改 Mach-O Load Command 表，插入 dylib 然后重新签名即可搞定一切，自动化工具已完成，未广泛测试：https://github.com/Yonsm/iPAFine&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>分析 Substrate 的 THUMB 函数 Hook 实现细节</title>
      <link href="http://example.com/armhook/"/>
      <updated>2014-07-12T08:14:31+08:00</updated>
      <id>http://example.com/armhook</id>
      <content type="html">&lt;p&gt;ARM 架构的 CPU 有 ARM 和 THUMB 执行态。&lt;/p&gt;

&lt;h4&gt;1. 先说 ARM 态（被Hook的函数）到 ARM 态（自己的替换函数）的 HOOK&lt;/h4&gt;

&lt;p&gt;  非常简单，没有看过 Substrate 的时候我就想到并验证过了（8 个字节）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  LDR PC, [PC， #-4]
  replacedFunctionAddress  ; 目标绝对地址（ARM 态的，偶数）
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;2. ARM 态到 THUMB 态的 HOOK&lt;/h4&gt;

&lt;p&gt;  和上面应该应该类似，只是   变成 replacedFunctionAddress + 1，转跳后自动切换到 THUMB 态。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  未验证（X！）
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;3. THUMB 到 THUMB 态的 HOOK&lt;/h4&gt;

&lt;p&gt;  难理解的来了，经过实际测试发现&lt;strong&gt;下面的代码可以 HOOK 任意的函数（包括未导出的私有函数）&lt;/strong&gt;（注意，hookedFunctionAddress 如果是 THUMB 的，则需要 + 1——MD，在这栽了好长一段时间，感谢曾半仙）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  _MSHookFunction(hookedFunctionAddress + 1, (void *)replacedFunctionAddress, (void **)&amp;amp;pOriginalFunction); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  用以上 Substrate 的方法实现 THUMB 到 THUMB 的 HOOK 之后，我用 GDB 查看了一下内存，总共修改了12个字节，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  (gdb) x/3xw _mh_execute_header+0x1073E0
  0x15e3e0 &amp;lt;_mh_execute_header+1078240&amp;gt;:    0x46c04778  0xe51ff004  0x0029b6b9  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  反汇编代码（注意 THUMB 模式的 disas 地址要 +1 变成奇数）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  (gdb) disas _mh_execute_header+0x1073E1 _mh_execute_header+0x1073EC
  Dump of assembler code from 0x15e3e1 to 0x15e3ec:
  0x0015e3e1 &amp;lt;_mh_execute_header+1078241&amp;gt;:  bx  pc
  0x0015e3e3 &amp;lt;_mh_execute_header+1078243&amp;gt;:  nop         (mov r8, r8) 
  0x0015e3e5 &amp;lt;_mh_execute_header+1078245&amp;gt;:  blx 0x562e24 ; 请忽略
  0x0015e3e9 &amp;lt;_mh_execute_header+1078249&amp;gt;:  undefined ; 请忽略
  0x0015e3eb &amp;lt;_mh_execute_header+1078251&amp;gt;:  lsls    r1, r5, #0 ; 请忽略
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  第一条指令（C0 46）就是 THUMB 的 BX PC，第二条指令是 78 47 是 THUMB 的 NOP。后面的指令因为实际上是 BX 成 ARM 态了，所以请忽略。&lt;/p&gt;

&lt;p&gt;  BX PC 后实际上是转跳到了 ARM 态的 0x0015e3e4 地址，继续反汇编如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  (gdb) disas _mh_execute_header+0x1073E4 _mh_execute_header+0x1073EC
  Dump of assembler code from 0x15e3e4 to 0x15e3ec:
  0x0015e3e4 &amp;lt;_mh_execute_header+1078244&amp;gt;:  ldr pc, [pc, #-4]   ; 0x15e3e8 &amp;lt;_mh_execute_header+1078248&amp;gt;
  0x0015e3e8 &amp;lt;_mh_execute_header+1078248&amp;gt;:  strheq  r11, [r9], -r9 ; 这个就是和 replacedFunctionAddress + 1 了
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  可以看到从 0x0015e3e4 这里开始和上面提到的第一种情况（从ARM到THUMB）一样了。&lt;/p&gt;

&lt;p&gt;  补充：感谢 riusksk 做了一个直观图解，非常容易看明白：&lt;/p&gt;

&lt;p&gt;  &lt;img src=&quot;/assets/ThumbHook.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4&gt;4. 从 THUMB 到 ARM&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;  你猜~~
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;关于转跳&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;  * 如果操作数类型是imm, 那就是互换状态. ARM下到thumb, thumb下调用就到ARM；
  * 如果操作数是寄存器 根据低位地址，奇数为 THUMB，偶数为 ARM。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;知道了上述 HOOK 方法，再构造一个 pOriginalFunction，结合 Inject Dylib 的方法，就可以自己实现 Substrate 的完整功能了。&lt;/p&gt;

&lt;p&gt;（上面仅 3 是对 Substate 的 Hook 分析，其它是我 YY 的，不确定 Substrate 也是这样的实现，有兴趣的话可以自己反汇编/反编译 Substrate 去看实现细节）&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Re-Symbolicate iOS Crash Report</title>
      <link href="http://example.com/resymbolicate/"/>
      <updated>2014-06-25T01:31:42+08:00</updated>
      <id>http://example.com/resymbolicate</id>
      <content type="html">&lt;p&gt;Xcode Organizer 连接手机看 Device Logs 的时候，有个 Re-Symbolicate 功能可以根据地址反查 Call Stack 中系统模块（如UIKit、CoreFoundation等）的符号信息。&lt;/p&gt;

&lt;p&gt;如果收到的是第三者设备提供过来的Crash Log，则无法使用该功能。使用以下命令可以实现同样的目的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  export DEVELOPER_DIR=/Applications/Xcode.app/Contents/Developer
  /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/PrivateFrameworks/DTDeviceKitBase.framework/Versions/A/Resources/symbolicatecrash -v ~/CrashLog.crash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面提到的是反查系统模块的符号，下面这个则是根据崩溃地址和dSYM来反查自己程序模块中的符号：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dwarfdump --lookup 0x00002712 -arch armv7 CrashTesting.app.dSYM/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一旦从地址中反查到了符号，将非常有助于分析Crash的原因。&lt;/p&gt;

&lt;p&gt;(2014.11.22 验证)&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>GitHub 页面</title>
      <link href="http://example.com/github/"/>
      <updated>2014-05-19T07:08:31+08:00</updated>
      <id>http://example.com/github</id>
      <content type="html">&lt;p&gt;稍微整理了一下&lt;a href=&quot;https://github.com/Yonsm?tab=repositories&quot;&gt;我的 GitHub 页面&lt;/a&gt;，部分代码会持续维护。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Camo - Xcode 反逆向工程分析的混淆方案</title>
      <link href="http://example.com/camo/"/>
      <updated>2014-02-28T06:08:31+08:00</updated>
      <id>http://example.com/camo</id>
      <content type="html">&lt;p&gt;逆向工程分析的三大线索是：字符串、导入表、函数名。我捣鼓了一个自己的方案，以加大 iOS/OSX 程序的逆向分析难度：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Camo 程序中搜索源代码目录，找出所有 Object 类名、方法名、属性名的符号，排除掉xcode iPhone SDK 中的符号（也是自动搜索获取），再排除掉导出的和第三方依赖的符号（都是根据参数自动获取）。然后把这些名称全部#define 一下成为随机的名称，写到一个.h中；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 Prefix.pch 的最前面#import这个自动生成的.h。去掉这个.h一样可以编译，加上.h就是混淆名称，没有任何副作用。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;PS：Generate Debug Symbol一定要去掉（Xcode默认创建的project，即使是Release[Archive/Profile]编译也启用了Generate Debug Symbol的），去掉之后“等同于源代码”的问题可以有很大的改观。&lt;/p&gt;

&lt;p&gt;期望以后Camo还支持一个另外的两个特性：加密所有的字符串，所有的函数调用（全部使用dlsym来动态获取）。这样编译出来的二进制文件几乎自己都认不出来了。&lt;/p&gt;

&lt;p&gt;完整的混淆方案，后面再整理 Check List。&lt;/p&gt;

&lt;p&gt;2014.07.30 补充：&lt;/p&gt;

&lt;p&gt;终于出成品了，参看：&lt;a href=&quot;https://github.com/Yonsm/Camo&quot;&gt;https://github.com/Yonsm/Camo&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>另类思维实现 Mac OS X 下的 mount bind</title>
      <link href="http://example.com/mountbind/"/>
      <updated>2014-02-27T03:50:17+08:00</updated>
      <id>http://example.com/mountbind</id>
      <content type="html">&lt;p&gt;*nix 下的 mount 基本上都支持 -o bind 来绑定另外一个目录到特定目录中。但 Mac OS X 的 mount 确不支持此功能，有时候这个“特性”非常让人郁闷——比如，百度网盘的脑残设计，强制设定只能同步到一个叫“百度云同步盘”的目录中，ln -s 创建的外部链接目录都不支持（需求场景，SSD小硬盘，某个存放大姐姐们的目录在NAS或移动硬盘上，但是想跟百通网盘同步）。&lt;/p&gt;

&lt;p&gt;几经尝试，终于找到一个曲线实现的方法：用 mount_afp 来模拟 mount -o 的功能：&lt;/p&gt;

&lt;p&gt;如果是本地移动硬盘，先确保该目录已共享，然后执行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mount_afp afp://user:pass@localhost/Movies ~/百度云同步盘/Movies
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;搞定了。&lt;/p&gt;

&lt;p&gt;后话：我扯淡了，半夜才想起来，以前创建 RAMDISK 的时候用的 mount -t hfs -o union &lt;strong&gt;&lt;em&gt; &lt;/em&gt;&lt;/strong&gt; 就可以实现这种功能……&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>在iOS上深度追踪HTTP/UIWebView/openURL/SSL的方法和插件</title>
      <link href="http://example.com/httpeek/"/>
      <updated>2014-02-22T06:50:17+08:00</updated>
      <id>http://example.com/httpeek</id>
      <content type="html">&lt;p&gt;HTTP 请求 Sniffer 很多工具可以做，至于 HTTPS 则使用 Charles 做中间人攻击也可以拿到全部 HTTPS 请求的细节，并且不限定于 iOS（具体方法这里就不说了，不是本文重点）。&lt;/p&gt;

&lt;p&gt;但是，这些协议层的分析往往只能分析协议细节，想要深度追踪 HTTP/HTTPS/UIWebView 数据的生成细节的话，很多时候还是无能为力的。此时我们需要定位到数据生成的进程、模块、调用堆栈，进而找到相关代码继续做逆向工程分析——HttPeek 插件就是这样用途的插件，用法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在已越狱的系统中安装 Cydia Substrate；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把 HttPeek.dylib &lt;a href=&quot;https://github.com/Yonsm/HttPeek/raw/master/Release/HttPeek.dylib&quot;&gt;点此下载&lt;/a&gt; 放到 Cydia Substrate 的插件目录中（/Library/MobileSubstrate/DynamicLibraries），并重启设备或相关进程；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;操作重现，确保你期望监听的 HTTP/HTTPS/UIWebView/SSL 请求已发生；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 /tmp/%进程名称%.req 目录中获取改进程所有的 HTTP/HTTP/UIWebView/SSL 请求细节的日志，比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; FROM /System/Library/PrivateFrameworks/iTunesStore.framework/iTunesStore(0x3990e000)-&amp;lt;redacted&amp;gt;(0x399183e1=&amp;gt;0x0093e1)
 &amp;lt;(
     0   HttPeek.dylib                       0x0199fcb1 _Z10LogRequestP12NSURLRequestPv + 496
     1   HttPeek.dylib                       0x019a03cb _Z22$NSURLConnection_startP11objc_objectP13objc_selector + 50
     2   iTunesStore                         0x3991880b &amp;lt;redacted&amp;gt; + 1066
     3   iTunesStore                         0x399183a5 &amp;lt;redacted&amp;gt; + 360
     4   iTunesStore                         0x399148df &amp;lt;redacted&amp;gt; + 386
     5   iTunesStore                         0x3991f78b &amp;lt;redacted&amp;gt; + 598
     6   iTunesStore                         0x3991e421 &amp;lt;redacted&amp;gt; + 544
     7   iTunesStore                         0x399137cd &amp;lt;redacted&amp;gt; + 288
     8   iTunesStore                         0x39912c69 &amp;lt;redacted&amp;gt; + 620
     9   iTunesStore                         0x3991230d &amp;lt;redacted&amp;gt; + 276
     10  iTunesStoreUI                       0x39a636bb &amp;lt;redacted&amp;gt; + 354
     11  iTunesStoreUI                       0x39a63011 &amp;lt;redacted&amp;gt; + 164
     12  iTunesStore                         0x399137cd &amp;lt;redacted&amp;gt; + 288
     13  iTunesStore                         0x39912c69 &amp;lt;redacted&amp;gt; + 620
     14  Foundation                          0x315c07db &amp;lt;redacted&amp;gt; + 770
     15  Foundation                          0x31664995 &amp;lt;redacted&amp;gt; + 60
     16  libdispatch.dylib                   0x3b5bb68f &amp;lt;redacted&amp;gt; + 110
     17  libdispatch.dylib                   0x3b5bcd71 &amp;lt;redacted&amp;gt; + 220
     18  libdispatch.dylib                   0x3b5bcf59 &amp;lt;redacted&amp;gt; + 56
     19  libsystem_pthread.dylib             0x3b6f7dbf _pthread_wqthread + 298
     20  libsystem_pthread.dylib             0x3b6f7c84 start_wqthread + 8
 )&amp;gt;
 POST: https://play.itunes.apple.com/WebObjects/MZPlay.woa/wa/signSapSetup
 {
     &quot;Accept-Language&quot; = &quot;zh-Hans&quot;;
     Cookie = &quot;mzf_odc=ST1; xp_ci=3z22aB6Jz841z576zB2szwxWTgkNv; mzf_in=112351; s_vi=[CS]v1|2983AD4B05010B41-600001338012E27D[CE]; Pod=11; itspod=11; ns-mzf-inst=36-85-80-109-88-8294-112351-11-st11; session-store-id=d79638dc54b6dec6c1116ba8fe8e4d84&quot;;
     &quot;User-Agent&quot; = &quot;AppStore/2.0 iOS/7.0.4 model/iPhone4,1 (6; dt:73)&quot;;
     &quot;X-Apple-Client-Versions&quot; = &quot;GameCenter/2.0&quot;;
     &quot;X-Apple-Connection-Type&quot; = WiFi;
     &quot;X-Apple-Partner&quot; = &quot;origin.0&quot;;
     &quot;X-Apple-Store-Front&quot; = &quot;143465-19,21 t:native&quot;;
 }

 &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
 &amp;lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&amp;gt;
 &amp;lt;plist version=&quot;1.0&quot;&amp;gt;
 &amp;lt;dict&amp;gt;
     &amp;lt;key&amp;gt;sign-sap-setup-buffer&amp;lt;/key&amp;gt;
     &amp;lt;data&amp;gt;
     AgAAANIISnQ/0ZM7Y5AO05eY5ugZbrkHNJoRsyFGn+P03FNKZTQmjN/Ha0pbt9Xkfgjz
     rrdfL3kxiThvq7duDjJp3GO7OatGg7Iyr7x/RJtClXmAoK2uL0rjxqyN36cgIbmYrP2I
     ZidsvuCHDj13S77kleOuKkuGFZN3JxIMm0OfJG7sqL/GO+2Upo8k0adRhiMj9asFhCxI
     LdxM2hcZ30cXKhV+fCRYybJm4UHX33lHAWed+6rty6gMzK+m/QbUWhTR2XCWOrEFs+qM
     Xq1QULQ3kJGPlVYFHaFoVDXRzfsNLTCsql353InFNdTxMdNTxqt9YqmmT+apJTHUq8xA
     +C9FOQ6G/u35sTGOZUUPxtjTiauYdfYgBs5ULIjwCQAAADCsp7cq8VDLhfHkRGX0idYF
     kNxP/T1GaG1V0U9kWE0gT5cFAPe464nMsRgxouM2wwEf4hsJkobd98rw1a4xrOAEtFn1
     iw==
     &amp;lt;/data&amp;gt;
 &amp;lt;/dict&amp;gt;
 &amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;  可以看到，Charles 等常规 Sniffer 软件中能看到的发送和接收细节都有，此外还有完整的 CallStack 记录，上例中一看就知道数据是 /System/Library/PrivateFrameworks/iTunesStore.framework/iTunesStore 这个模块发送的的请求，在 Xcode 的 iOS SDK 中可以找到这个模块，进而继续逆向分析它。&lt;/p&gt;

&lt;p&gt;  PS1：HttPeek 还支持 UIWebView Request、UIAplicaiton openURL、SSLRead/SSLWrite、CFReadStreamCreateForHTTPRequest 的监听，同时还支持SSL 认证禁用（以便使用中间人代理来分析 SSL 网络交互）。&lt;/p&gt;

&lt;p&gt;  PS2：源代码可获取：&lt;a href=&quot;https://github.com/Yonsm/HttPeek&quot;&gt;https://github.com/Yonsm/HttPeek&lt;/a&gt;。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>[转载]用C++进行设计模式的解析和实现</title>
      <link href="http://example.com/designpattern/"/>
      <updated>2014-02-13T04:30:17+08:00</updated>
      <id>http://example.com/designpattern</id>
      <content type="html">&lt;p&gt;&lt;a href=&quot;http://c.chinaitlab.com/special/sjms/Index.html&quot;&gt;用C++设计模式的解析和实现&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>使用 WPAD 配合 GAE 实现客户端准零配置科学上网</title>
      <link href="http://example.com/wpad/"/>
      <updated>2014-01-29T04:30:17+08:00</updated>
      <id>http://example.com/wpad</id>
      <content type="html">&lt;p&gt;WPAD 是 Web Proxy Auto Discovery 的缩写，可以看做是是 PAC 的扩展应用。&lt;/p&gt;

&lt;p&gt;简单说来，以前在浏览器中指定 PAC 文件或者地址，WPAD 就是在 DHCP 的时候自动发现 PAC（实际上也可以在 DNS 中发现 PAC，不过推荐 DHCP 中发现）。&lt;/p&gt;

&lt;p&gt;直接说步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先假定您已经在局域网内配置好 GAE Proxy，且启用了 PAC 文件，这里假设 PAC 是 http://192.168.1.1:8086/proxy.pac&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 DNSMasQ 中配置 WPAD，加入一行：dhcp-option=252,http://192.168.1.1:8086/proxy.pac&lt;/p&gt;

&lt;p&gt; 服务端 WPAD 配置完毕，简单吧。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;客户端，请确保客户端是 DHCP 获取 IP 地址的。&lt;/p&gt;

&lt;p&gt; Mac OS X：设置 -&gt; 网络 -&gt; 选定网络（比如以太网或者 Wi-Fi）-&gt; 高级 -&gt; 代理 -&gt; 自动发现代理 -&gt; 勾上&lt;/p&gt;

&lt;p&gt; Windows：Internet Explorer 属性 -&gt; 连接 -&gt; 自动检测设置（此设置可能已经默认开启，也就是说 Windows 系统零配置）&lt;/p&gt;

&lt;p&gt; 万事搞定，之后畅享零配置科学上网吧。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;这样好的好处是不言而喻的，服务端配置好后，客户端（Windows、Mac OS X 均可，其它客户端应该也行）只要勾选一个选项，无需做其它额外配置，DHCP 的时候将自动发现，可以实现科学上网。且切换
到别的网络后，自动就使用别的网络的代理设置了（或者该网络没有配置代理，则自动直连了）。&lt;/p&gt;

&lt;p&gt;这是我现在为止尝试到的最简单（准零配置）、最方便（支持HTTPS）、最廉价（GAE 免费使用）的方案，什么 VPN、S**Sock、套神马的，不是要钱就是不稳定，也不能长期使用。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>运行期修改 iOS 进程中的指令或数据</title>
      <link href="http://example.com/fakecode/"/>
      <updated>2014-01-21T05:33:17+08:00</updated>
      <id>http://example.com/fakecode</id>
      <content type="html">&lt;p&gt;做个 mobile substrate 插件，然后用下面的方法在运行时修改指令或者数据，需要做 memory patch 外挂内挂倒挂什么的，直接看代码了：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C&amp;quot;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;kern_return_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mach_vm_region&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;vm_map_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;vm_address_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;vm_size_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;vm_region_flavor_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flavor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;vm_region_info_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;mach_msg_type_number_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;infoCnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object_name&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NS_INLINE&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FakeCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TYPE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TYPE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;mach_port_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;vm_size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;vm_address_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;vm_address_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* Get region boundaries */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#if defined(_MAC64) || defined(__LP64__)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;vm_region_basic_info_data_64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;mach_msg_type_number_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VM_REGION_BASIC_INFO_COUNT_64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;vm_region_flavor_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flavor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VM_REGION_BASIC_INFO_64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_vm_region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_task_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;region_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flavor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;vm_region_info_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;mach_msg_type_number_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;mach_port_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;26&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;27&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;28&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;29&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#else&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;30&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;vm_region_basic_info_data_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;31&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;mach_msg_type_number_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VM_REGION_BASIC_INFO_COUNT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;32&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;vm_region_flavor_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flavor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VM_REGION_BASIC_INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;33&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm_region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_task_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;region_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flavor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;vm_region_info_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;mach_msg_type_number_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;mach_port_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;34&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;35&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;36&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;37&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;38&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;39&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* Change memory protections to rw- */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;40&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm_protect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_task_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VM_PROT_READ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VM_PROT_WRITE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VM_PROT_COPY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KERN_SUCCESS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;41&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;42&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;_LineLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;43&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;44&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;45&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;46&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* Actually perform the write */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;47&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;48&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;49&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* Flush CPU data cache to save write to RAM */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;50&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;sys_dcache_flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;51&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;52&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* Invalidate instruction cache to make the CPU read patched instructions from RAM */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;53&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;sys_icache_invalidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;54&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;55&lt;/span&gt;  &lt;span class=&quot;cm&quot;&gt;/* Change memory protections back to r-x */&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;56&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;vm_protect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mach_task_self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VM_PROT_EXECUTE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VM_PROT_READ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;57&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;58&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;好了，修改方法有了，ARM64也支持了。但 Module Base 是变化的，对一个模块逆向工程后，如何确定运行时模块的基址呢？&lt;/p&gt;

&lt;p&gt;——我也想知道……，不过我想了一个山寨的方法，先看到一个导出符号，作为参照基准，运行期获取这个导出符号，然后做一个差值计算，搞定：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NS_INLINE&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ModuleBase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;refFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refAddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dlsym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UTF8String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RTLD_LAZY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UTF8String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;_Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;HOOK Base symbol not found&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0FF0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;refAddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0FF0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;_Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;HOOK Base symbol miss match: %p !=! %08X&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;refAddr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;_Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;HOOK Base: %@ at %p&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



</content>
    </entry>
  
    <entry>
      <title>完美控专用：CeleDial 联系人整理功能介绍</title>
      <link href="http://example.com/contactfusion/"/>
      <updated>2014-01-18T06:33:17+08:00</updated>
      <id>http://example.com/contactfusion</id>
      <content type="html">&lt;p&gt;在 &lt;a href=&quot;http://www.celedial.com/appstore&quot;&gt;CeleDail for iPhone&lt;/a&gt; 的设置界面中，提供了一系列非常有用的整理联系人数据的小功能：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ContactFusion.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1). 在多个Google、iCloud、Hotmail账户之间同步联系人：使用之前在系统设置中添加多个联系人账户即可，然后在CeleDial设置中，点击所有联系人群组，在下面展开的单个联系人账号的右侧点击有命令可以操作。目前仅支持单向同步。&lt;/p&gt;

&lt;p&gt;2). 电话号码批量添加国家区号（如+86）：8个数字以上的才会添加，区号是根据区域设置来的，中国+86，已经有+或00开头的，不会添加。会自动删除“-”和“ ”（空格）。&lt;/p&gt;

&lt;p&gt;3). 批量删除国家区号(如+86)。&lt;/p&gt;

&lt;p&gt;4). 批量合并姓氏和名字。&lt;/p&gt;

&lt;p&gt;5). 批量拆分姓氏和名字：仅拆分2、3、4个非英文字母的姓名，或者带空格的英文姓名，拆分和合并可以轮着用，整理得更透彻。&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;6). 把未分组的联系人添加到“未分组”中（以便整理）：仅支持 CardDAV/Local/iCloud 账户，推荐iCloud分组，可以同步到 iCloud上来管理分组。Exchange不支持分组，iOS的设计如此。Google 已经支持 CardDAV，但Google 竟然不支持同步分组（不过跟 CeleDial 没关系）。&lt;/p&gt;

&lt;p&gt;iOS SDK 不支持读取联系人账户的名称，只能读取类型，更悲催的是iCloud类型的联系人，实际上也是CardDAV，所以没法很好地来标识联系人来源，再次提请注意：请确认操作不会造成联系人数据丢失！！&lt;/p&gt;

&lt;p&gt;最好是在iPhone中，关闭掉网络，然后使用后，检查一下联系人没问题，再打开网络同步到网上。&lt;/p&gt;

&lt;p&gt;注意：风险自负，仅供完美主义者或强迫症专用！！！：）&lt;/p&gt;

&lt;p&gt;这些功能在一年前的 CeleDial 2.4 开始已提供了，如果需要可在 AppStore 中 &lt;a href=&quot;http://www.celedial.com/appstore&quot;&gt;下载 CeleDial&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;想在各大在线联系人账户之前迁移的用户，终于有解决方案了，操起手中的肾机开干吧！&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Hex Fiend - Mac 下好用的十六进制编辑器</title>
      <link href="http://example.com/hexfield/"/>
      <updated>2014-01-16T05:33:17+08:00</updated>
      <id>http://example.com/hexfield</id>
      <content type="html">&lt;p&gt;Hex Fiend 是 Mac 下最好用的十六进制编辑器，Xcode 内嵌的十六进制编辑功能就是 Hex Fiend 提供的（苹果一向实用拿来注意）。闲来无事，我 &lt;a href=&quot;https://github.com/Yonsm/HexFiend&quot;&gt;fork 了 Hex Fiend&lt;/a&gt; 的代码，。并做了以下修改：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;默认打开文件启用覆盖模式&lt;/li&gt;
&lt;li&gt;代码中嵌入多语言支持，使用 GenString 自动生成简体中文语言文件。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;以后可能会按需要更新。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/Yonsm/HexFiend/raw/master/HexFiend_CN.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;下载：&lt;a href=&quot;https://github.com/Yonsm/HexFiend/raw/master/HexFiend_CN.zip&quot;&gt;Hex Fiend 2.2.300 中英双语版&lt;/a&gt;&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;下面是原版介绍：&lt;/p&gt;

&lt;h1&gt;Hex Fiend&lt;/h1&gt;

&lt;p&gt;Hex Fiend is a fast and clever hex editor for Mac OS X, written using the Cocoa frameworks. Hex Fiend also provides a framework, allowing &quot;hex views&quot; to be embedded in other applications.&lt;/p&gt;

&lt;h2&gt;License&lt;/h2&gt;

&lt;p&gt;Hex Fiend is released under a liberal BSD-style &lt;a href=&quot;./License.txt&quot;&gt;license&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;More Information:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;API documentation, see &lt;a href=&quot;http://ridiculousfish.com/hexfiend/docs/&quot;&gt;ridiculousfish.com/hexfiend/docs/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Information about Hex Fiend, see &lt;a href=&quot;http://ridiculousfish.com/hexfiend/&quot;&gt;ridiculousfish.com/hexfiend/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
    </entry>
  
    <entry>
      <title>在 Mac OS X 下“绿色”安装 Photoshop</title>
      <link href="http://example.com/photoshop/"/>
      <updated>2013-11-01T00:00:00+08:00</updated>
      <id>http://example.com/photoshop</id>
      <content type="html">&lt;p&gt;在 Mac OS X 中基本上绝大部分都是“绿色”安装的（包括 iWork、Xcode 这种大型的软件），重装系统或者其它情形下（你懂的）如果需要迁移程序，那是相当地简单方便。基本上是一次性搞定所有的软件。&lt;/p&gt;

&lt;p&gt;但东西总有例外，有几个顽固不化的东西，比如 Photoshop、Office（M$的东西安装体验一贯很尿性）、Parallels Desktop 都没法“绿色安装”。趁着 10.9 重装了一次系统，决心重新理一下软件。对于 Parallels Desktop，实在扛不住一年一升级就要重新购买序列号（去年买了8.0，今年升级到9.0还要重花钱买），决定换 VMWare Fusion；对于 Office，决定不再创建 Office 文档，反正 iWork 也能阅读 Office 文档；但对于 Photoshop，暂时实在无可替代，只好深入研究一番……，终于找到了方案，简述如下：&lt;/p&gt;

&lt;p&gt;一、首次安装&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;试用方式安装；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;升级到最新；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;***；&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;二、“绿色”迁移&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;拷贝 /Applications/Adobe Photoshop CC；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拷贝 /Library/Application Support/Adobe 以及 ~/Library/Application Support/Adobe;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运行 PS，提示“Adobe Application Support 文件夹中缺少运行 Photoshop 所需的一个或多个文件。请运行 Photoshop 安装程序，并重新安装 Photoshop。”，网上非常多人反映此问题，但没有解决方案。突然转念一想，换成英文关键字搜索，发现 &lt;a href=&quot;http://helpx.adobe.com/photoshop/kb/error-one-or-files-application.html&quot;&gt;Adobe 官网有篇文章&lt;/a&gt;，内容比较长，说白了就是还要拷贝 /Library/ScriptingAdditions/Adobe Unit Types.osax&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;再次运行，一切搞定收工。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;终于全部软件都是“绿色”啦……&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>[转载]用 FFMPEG 合并 MP4 视频</title>
      <link href="http://example.com/mp4merge/"/>
      <updated>2013-10-15T00:00:00+08:00</updated>
      <id>http://example.com/mp4merge</id>
      <content type="html">&lt;p&gt;因为 ffmpeg 是支持切分 mp4 视频的，所以我就理所当然的以为 ffmpeg 是支持视频合并。直到今天同事找我问方法，才发现一直以为的方法是错误的， mp4 不支持直接 concate（丢人了。。。），赶紧补了一下能量，从网上抓来了多种实现。&lt;/p&gt;

&lt;p&gt;注： 这里的 mp4 指的是网上最多见的 h264+aac mpeg4 容器的方式&lt;/p&gt;

&lt;p&gt;1). ffmpeg + mpeg&lt;/p&gt;

&lt;p&gt;这种是网上最常见的，基本思路是将 mp4 先转码为 mpeg 文件，mpeg是支持简单拼接的，然后再转回 mp4。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ffmpeg -i 1.mp4 -sameq 1.mpg
  ffmpeg -i 2.mp4 -sameq 2.mpg
  cat 1.mpg 2.mpg | ffmpeg -f mpeg -i - -sameq -vcodec mpeg4 output.mp4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种方式弊端很明显，需要转码。而抛开转码本身会造成的质量损失，这个效率真心无法忍受。&lt;/p&gt;

&lt;p&gt;2). MP4Box&lt;/p&gt;

&lt;p&gt;这个是 gpac 搞的专门处理 mp4 的工具，由于它会自己内部处理连接部分的数据，所以可以简单的使用类似 concate 的语法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  MP4Box -cat 1.mp4 -cat 2.mp4 output.mp4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;问题是，还要引入一个新的工具，而不能统一用 ffmpeg。这个也不爽。更不用说在 centos 下，你需要装一堆库，然后源码编译。有兴趣的朋友可以参考：&lt;/p&gt;

&lt;p&gt;http://howto-heaven.blogspot.jp/2011/01/how-to-install-mp4box-on-centos.html&lt;/p&gt;

&lt;p&gt;3). ffmpeg + ts
蹦蹦蹦蹦~~，重磅推出终极解决方案。这个的思路是先将 mp4 转化为同样编码形式的 ts 流，因为 ts流是可以 concate 的，先把 mp4 封装成 ts ，然后 concate ts 流， 最后再把 ts 流转化为 mp4。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ffmpeg -i 1.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 1.ts
  ffmpeg -i 2.mp4 -vcodec copy -acodec copy -vbsf h264_mp4toannexb 2.ts
  ffmpeg -i &quot;concat:1.ts|2.ts&quot; -acodec copy -vcodec copy -absf aac_adtstoasc output.mp4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;转自：http://blog.eryue.me/?p=135&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>MEDia EXplorer for Apache/Lighttpd dir listing</title>
      <link href="http://example.com/medex/"/>
      <updated>2013-08-30T00:00:00+08:00</updated>
      <id>http://example.com/medex</id>
      <content type="html">&lt;p&gt;开启 Apache/Lighttpd 的目录浏览功能后，使用客户端脚本技术，生成高端大气上档次的媒体浏览网页。与 &lt;a href=&quot;https://github.com/Yonsm/ATVME&quot;&gt;Apple TV Media Explorer&lt;/a&gt; 结合使用，全方位访问 NAS 中的媒体文件。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;生成漂亮易用 Metro 风格媒体浏览器界面；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自动使用特定规则的缩略图功能；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;图片文件支持图片浏览器；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;图片浏览支持图片上一张、下一张、缩放、自动播放功能；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自适应浏览器窗口宽度，支持持 iOS/Android 移动端浏览器完美使用。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配合服务端 ffmpeg 脚本，自动生成缩略图（依赖文件：&lt;a href=&quot;https://github.com/Yonsm/ATVME/blob/master/appletv/thumb.cgi&quot;&gt;https://github.com/Yonsm/ATVME/blob/master/appletv/thumb.cgi&lt;/a&gt;）。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;em&gt;需包含的网页代码&lt;/em&gt;：&lt;a href=&quot;https://github.com/Yonsm/ATVME/blob/master/media/.medex.htm&quot;&gt;https://github.com/Yonsm/ATVME/blob/master/media/.medex.htm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;相关图片文件&lt;/em&gt;：&lt;a href=&quot;https://github.com/Yonsm/ATVME/tree/master/appletv/image&quot;&gt;https://github.com/Yonsm/ATVME/tree/master/appletv/image&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Apache Rewrite配置&lt;/em&gt;：&lt;a href=&quot;https://github.com/Yonsm/ATVME/blob/master/media/.htaccess&quot;&gt;https://github.com/Yonsm/ATVME/blob/master/media/.htaccess&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/medex1.jpg&quot; alt=&quot;屏幕截图1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/medex2.jpg&quot; alt=&quot;屏幕截图2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/medex3.jpg&quot; alt=&quot;屏幕截图3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/medex4.jpg&quot; alt=&quot;屏幕截图4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/medex5.jpg&quot; alt=&quot;屏幕截图5&quot; /&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>那些年，曾经做过的汉化</title>
      <link href="http://example.com/hanzify/"/>
      <updated>2013-07-14T03:43:57+08:00</updated>
      <id>http://example.com/hanzify</id>
      <content type="html">&lt;p&gt;现在已经没有汉化习惯了，整个分类删除掉了，记录一下历史，部分软件可以从&lt;a href=&quot;http://teach.hanzify.org/author/2520.html&quot;&gt;汉化新世纪&lt;/a&gt;下载：&lt;/p&gt;

&lt;p&gt;xScope 2.5 汉化版 – 设计、测量、校准和检查屏幕图形和布局的辅助工具
2011-08-12&lt;/p&gt;

&lt;p&gt;Araxis Merge 2011.4040 汉化版 – Mac 下好用的文件和文件夹比较工具
2011-08-09&lt;/p&gt;

&lt;p&gt;Changes 1.5.6 汉化版 – Mac 下的比较工具
2011-08-09&lt;/p&gt;

&lt;p&gt;MacDrive 8.0.5 简体中文汉化版
2010-05-07&lt;/p&gt;

&lt;p&gt;Palringo 简体中文绿色版 – 多功能的 IM 软件
2009-05-20&lt;/p&gt;

&lt;p&gt;IMPlus 5.67.1 汉化版
2009-04-26&lt;/p&gt;

&lt;p&gt;SKTracker，分析比对PPC注册表和文件系统变化的好工具
2008-11-19&lt;/p&gt;

&lt;p&gt;NewsBreak 2.1 汉化
2008-08-31&lt;/p&gt;

&lt;p&gt;TaskMgr 3.1 汉化 – PPC 中强大的窗口进程等系统剖析工具
2008-08-31&lt;/p&gt;

&lt;p&gt;PocketCalc 2.2.1 汉化版
2008-08-30&lt;/p&gt;

&lt;p&gt;HiCalc 2.5.1- 功能最强大、界面最漂亮的计算器
2008-08-29&lt;/p&gt;

&lt;p&gt;Resco Explorer 2008 7.0.5 完美汉化
2008-08-28&lt;/p&gt;

&lt;p&gt;Virtual Drive Manager 1.3.1 汉化修正
2008-08-26&lt;/p&gt;

&lt;p&gt;GPS Pack
2008-08-26&lt;/p&gt;

&lt;p&gt;RESCO Explorer 2007 6.16 简体中文化版本
2007-10-13&lt;/p&gt;

&lt;p&gt;Kevtris 2.0 – 最漂亮、最好玩的而罗斯方块
2007-04-12&lt;/p&gt;

&lt;p&gt;PIEPlus 2.1 RC2 最完美汉化版 – PocketIE 增强工具
2006-08-17&lt;/p&gt;

&lt;p&gt;WM5torage 1.7 汉化版 – 把 Windows Mobile 5.0 当优盘用
2006-08-17&lt;/p&gt;

&lt;p&gt;Kevtris 1.1 汉化版- Windows Mobile 最好玩的俄罗斯方块
2006-04-04&lt;/p&gt;

&lt;p&gt;GraphEdit – DirectShow Graph 图表工具
2005-09-03&lt;/p&gt;

&lt;p&gt;Kevtris 1.0 汉化版- Smartphone上非常好玩的俄罗斯方块
2005-06-20&lt;/p&gt;

&lt;p&gt;BetaPlayer 0.096/0.5 完整汉化版
2005-06-10&lt;/p&gt;

&lt;p&gt;Resco System Toys 1.20 汉化补丁
2005-05-22&lt;/p&gt;

&lt;p&gt;Resco Photo Viewer 5.20 汉化补丁
2005-05-22&lt;/p&gt;

&lt;p&gt;Resco Explorer 2003 5.00 汉化补丁
2005-05-22&lt;/p&gt;

&lt;p&gt;Dependency Walker 2.1.3790 汉化版
2005-03-13&lt;/p&gt;

&lt;p&gt;ExamDiff Pro 3.3 汉化版
2005-02-22&lt;/p&gt;

&lt;p&gt;SourceStyler C++ 汉化版&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>博客迁移到 Jekyll @ GitHub - 你也可以fork在GitHub建站哦</title>
      <link href="http://example.com/hello-jekyll/"/>
      <updated>2013-07-14T00:00:00+08:00</updated>
      <id>http://example.com/hello-jekyll</id>
      <content type="html">&lt;p&gt;在 Wopus 上的博客空间快到期了，我终于下决心迁移到 GitHub 上。好处就不多说了，看看&lt;a href=&quot;http://www.besteric.com/2013/05/08/migrate-wordpress-to-jekyll/&quot;&gt;别人怎么说 Jekyll @ GitHub&lt;/a&gt;吧。&lt;/p&gt;

&lt;p&gt;GitHub上找了个&lt;a href=&quot;http://webfrogs.me/2012/12/20/use-jekyll/&quot;&gt;模板&lt;/a&gt;，花了一整天折腾修改，分类、链接、评论、附件等终于都完美了，搜索引擎优化、站内搜索等还没完成。如果需要可以在 &lt;a href=&quot;http://www.github.com/Yonsm&quot;&gt;GitHub&lt;/a&gt; 上参考我的这个 &lt;a href=&quot;http://www.github.com/Yonsm/NET&quot;&gt;博客的完整代码&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;回看一下博客建立到现在快 9 年了，从刚开始的把博客当微博用，到中期的勤奋“耕耘”，再对比一下今年的7个月快过去了才 3 篇不像样的文章，今昔非比。这次迁移重新整理了博客，文章数目从 530 篇缩减到 250 篇。希望这次变换博客空间和引擎是个契机（好吧，是借口），接下来的时间里能多产出点东西。Idea 有很多，能不能出来就不知道了。&lt;/p&gt;

&lt;p&gt;刚开始使用 Markdown 写东西，很不错。语法高亮可以使用 &lt;a href=&quot;http://pygments.org/&quot;&gt;Pygments&lt;/a&gt; ，&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/Liquid-Extensions&quot;&gt;使用介绍在此&lt;/a&gt;。例子效果如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FixWordPressExportedXML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;     &lt;span class=&quot;bp&quot;&gt;NSMutableString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSMutableString&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;stringWithContentsOfFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSUTF8StringEncoding&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;          &lt;span class=&quot;kt&quot;&gt;unichar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;characterAtIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x20&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;\r&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;              &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;replaceCharactersInRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSMakeRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;withString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;replaceOccurrencesOfString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;&amp;amp;nbsp;&amp;quot;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;withString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSMakeRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;writeToFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;atomically&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NO&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSUTF8StringEncoding&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



</content>
    </entry>
  
    <entry>
      <title>[转载]如何制作自己的 Fusion Drive 硬盘</title>
      <link href="http://example.com/how-to-make-fusion-drive/"/>
      <updated>2013-01-14T21:19:01+08:00</updated>
      <id>http://example.com/how-to-make-fusion-drive</id>
      <content type="html">&lt;p&gt;Fusion Drive的性能号称能直追纯SSD，如果有2010年的27&#39; iMac，或者2011 2012的iMac 21&#39;/27&#39;或者MacBook Pro替换光驱上128G SSD，弄成Fusion Drive 应该是一个非常不错的方案。直接上原文吧：&lt;a href=&quot;http://appleuser.com/2012/11/30/fusiondrive/&quot;&gt;http://appleuser.com/2012/11/30/fusiondrive/&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>劫持MLB.TV和WSJ Live和预告片，打造自己的Apple TV本地媒体浏览器</title>
      <link href="http://example.com/atvme/"/>
      <updated>2012-11-15T08:28:19+08:00</updated>
      <id>http://example.com/atvme</id>
      <content type="html">&lt;h1&gt;Apple TV Media Explorer&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;升级您的 AppleTV 到最新版本固件。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在设置中把区域改成香港（或美国），这样主页上你可以看到好些图标。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;劫持DNS，有两种方法，请任选其一：
1).如果您的路由器支持DNSMasQ，可以在路由器上配置DNS劫持（192.168.1.9 换成你的 HTTP 服务器的 IP 地址，IP 地址仅举例，自行替换）：&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;address=/www.marketwatch.com/192.168.1.9&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;address=/trailers.apple.com/180.153.225.136&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;第二行为劫持预告片到 TT 的服务器（大量在线视频内容），非必须，但强烈推荐。&lt;/p&gt;

&lt;p&gt;2).如果你不会弄DNS服务器，可以用我提供的，在AppleTV上设置DNS为117.41.182.103，这样的话http服务器地址必须是 192.168.1.9。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;搭建HTTP服务，确保 http://192.168.1.9 能访问；HTTP 弄好后，需要开启文件列表功能（dir listing），这样我们才能以让ATV把上面的媒体文件列出来播放。
1). Tomato 能用的lighttpd精简版可以从我这里自行提取：http://hdweb.googlecode.com/svn/ROUTER，已开启dir listing）
2). My Book Live 开启dir listing，参考TT的帖子：http://bbs.weiphone.com/read-htm-tid-5484774.html，其实可以改进一下，编辑 wdnas文件，里面var/www的-Indexes前面的减号去掉，全局都支持dir listing了，不用创建.htaccess文件了。
3). 其他NAS请自行想办法搭建http服务器。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把附件下载下来，解压放到http服务器根目录下（注意是http://192.168.1.9/api-video，目录不要多了，也不要少了）。源代码在 https://github.com/Yonsm/ATVME 上，需要尝鲜的可以去哪里随时看看有什么更新。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改里面的index.xml文件，指向把url指向你的媒体文件的http url（能列出你的媒体文件的），目前index.xml是TAB页面，有5个版面：照片、视频、音乐、下载、设置。如果你也正好用我的文件路径（比如/media/Pictures）那就不用改了。注意每个URL最后的“/”是必须的，不要省略。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;打开ATV，看看 WSJ Live，把你的文件都列出来了。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;0). 常规使用：视频、音乐直接点击播放，照片文件夹则以平铺方式呈现，支持幻灯片显示，非常完美。
1). 支持缩略图：如果有“文件或文件夹名称.thumb.jpg”（或“.thumb.文件或文件夹名称.jpg”）存在，则会自动用作缩略图。
2). 外挂SRT字幕：如果有“文件名.srt”存在（注意扩展名也需要，如“A.mp4.srt”），则会显示外挂字幕。
3). 支持连续播放：播放视频和音乐时如果按播放键（Play），完成后会自动播放下一个；如果按选择键（Select/Enter），则播放完成后不会自动播放下一个。
4). 显示简要信息：播放过程中按向上方向键两次，则会显示URL信息和播放列表剩余的项目数。（BTW：播放过程中按向下一次可以分段Seek，ATV内置的功能）。&lt;/p&gt;

&lt;p&gt;更新历史：
  1.0  第一个实现版本。
  1.2  支持SRT外挂字幕和连续播放。
  1.3  支持文件夹优先显示；缩略图url不再要求前置。
  2.0 支持TT的MKV播放方案，支持自动生成缩略图（需要ffmpeg最新版，需要开启任意目录cgi支持，步骤稍复杂，教程后面再整理），代码在SVN上。&lt;/p&gt;

&lt;p&gt;持续更新中，详细步骤和说明请移步看2楼的详细帖子。：http://bbs.weiphone.com/read-htm-tid-5460032.html&lt;/p&gt;

&lt;p&gt;MKV方案请看TT的论坛：http://www.ottnt.com/forum.php&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>[转载]Xcode 4.x + iOS 5.1.1免证书(iDP)开发+真机调试+生成IPA全攻略</title>
      <link href="http://example.com/xcode-4-free-certificate-development/"/>
      <updated>2012-10-25T13:44:36+08:00</updated>
      <id>http://example.com/xcode-4-free-certificate-development</id>
      <content type="html">&lt;p&gt;直接去看：&lt;a href=&quot;http://kqwd.blog.163.com/blog/static/4122344820117191351263/&quot;&gt;http://kqwd.blog.163.com/blog/static/4122344820117191351263/&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>支持 iOS 6 的通讯录访问功能</title>
      <link href="http://example.com/support-ios6-address-book-access/"/>
      <updated>2012-09-28T19:47:20+08:00</updated>
      <id>http://example.com/support-ios6-address-book-access</id>
      <content type="html">&lt;p&gt;老的 iOS 的程序在 iOS 6 正式版之前能正常访问通讯录功能的，包括在 iOS 6 Beta 4 中，不用做任何改变，只是多了一个UI确认框而已。但在正式版的 iOS 6 中，是无法读取读取到的，需要程序主动（Beta 4 是系统自动发起）申请用户确认后才能读取。这次被苹果摆了一刀……&lt;/p&gt;

&lt;p&gt;不过，稍微改进一下代码，可以在不改变原有代码结构的基础上，尽快实现这个功能，下面是代码，直接替换 ABAddressBookCreate 就行了：&lt;/p&gt;

&lt;!-- more --&gt;


&lt;pre&gt;&lt;code&gt;        //
        ABAddressBookRef ContactCenter::MyAddressBookCreate()
        {
            if (UIUtil::SystemVersion() &amp;lt; 6)
            {
                return ABAddressBookCreate();
            }

            ABAddressBookRef book = ABAddressBookCreateWithOptions(NULL, NULL);
            if (ABAddressBookGetAuthorizationStatus() != kABAuthorizationStatusAuthorized)
            {
                static NSCondition *_waiting;
                _waiting = [[NSCondition alloc] init];

                ABAddressBookRequestAccessWithCompletion(book, ^(bool granted, CFErrorRef error) {
                    //[_waiting lock];
                    [_waiting signal];
                    //[_waiting unlock];
                });

                //[_waiting lock];
                [_waiting wait];
                //[_waiting unlock];
                [_waiting release];
                _waiting = nil;
            }
            return book;
        }
&lt;/code&gt;&lt;/pre&gt;
</content>
    </entry>
  
    <entry>
      <title>让iOS程序支持iPhone 5</title>
      <link href="http://example.com/support-iphone5/"/>
      <updated>2012-09-28T19:40:25+08:00</updated>
      <id>http://example.com/support-iphone5</id>
      <content type="html">&lt;p&gt;觉得苹果真的很聪明，也很实际，实用主义，比如用开源这点就可以看出。最近iPhone5的支持又实用了一次（如果是微软，肯定不会这么实用主义，肯定是在某个注册表，或者哪里，弄一个重量级的声明，或者什么架构，什么的……）：&lt;/p&gt;

&lt;p&gt;不用写任何代码，直接添加一张 640x1136 尺寸的 Default-568h@2x.png 图片到 IPA 中，就能支持 iPhone 5，而不再是两边黑框——前提是以前的代码写的好，高度方向没写死的话——大部分的程序都应该要能支持，除非那种游戏和高度方向无法灵活调整的程序，和蹩脚程序员写的程序。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;CeleDial我没写死，所以除了添加了一张图片之外，没有做任何改动就支持iPhone 5了，瞬间重新提交就行了。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>[转载]iPhone模拟触屏实现事件教程</title>
      <link href="http://example.com/iphone-touch-realization-event/"/>
      <updated>2012-09-27T20:11:00+08:00</updated>
      <id>http://example.com/iphone-touch-realization-event</id>
      <content type="html">&lt;p&gt;iPhone模拟触屏实现事件教程是本文呀介绍的内容，不多说，我们先来看内容。目前又有了一个想在iPhone上做协助调试的设想，当然控制权什么的是别说了，就是做一些协助方在自己屏幕上点点划划，被协助方也要有同样的操作，因为被调试程序的不确定性，那只能做成发送各种针对屏幕的模拟事件了。&lt;/p&gt;

&lt;p&gt;因为apple没有放出直接发送触屏事件等的API，所以用的都是越狱的iPhone加上PrivateFramework，根本没指望上市，反正就是为了内部调试。&lt;/p&gt;

&lt;p&gt;首先在kennytm的网站拔下私有framework的头文件，就本应用而言，只需要GrapicsServices文件夹以及Availability2.h即可。然后导入Xcode目录下Platforms下对应的GraphicsService.framework，准备工作就OK了。&lt;/p&gt;

&lt;p&gt;发送事件消息，主要是构造GSEventRecord，简单的事件可能只需要填充GSEventRecord里面的type类型参数，再复杂一些的就需要在结构的后面继续填充，填充大小必须在infoSize参数里指定&lt;/p&gt;

&lt;p&gt;C代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        typedef struct GSEventRecord {     
            GSEventType type; // 0x8     
            GSEventSubType subtype; // 0xC     
            CGPoint location;   // 0x10     
            CGPoint windowLocation; // 0x18     
            int windowContextId;    // 0x20     
            uint64_t timestamp; // 0x24, from mach_absolute_time     
            GSWindowRef window; // 0x2C     
            GSEventFlags flags; // 0x30     
            unsigned senderPID; // 0x34     
            CFIndex infoSize; // 0x38     
        } GSEventRecord;    

        typedef struct GSEventRecord {  
         GSEventType type; // 0x8  
         GSEventSubType subtype; // 0xC  
         CGPoint location;  // 0x10  
         CGPoint windowLocation; // 0x18  
         int windowContextId; // 0x20  
         uint64_t timestamp; // 0x24, from mach_absolute_time  
         GSWindowRef window; // 0x2C  
         GSEventFlags flags; // 0x30  
         unsigned senderPID; // 0x34  
         CFIndex infoSize; // 0x38  
        } GSEventRecord;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;头文件里没有提供一些便捷方法构造复杂的信息结构，这和public API真是云泥之别。不过一些非常简单的消息还是可以直接调用的，如void GSEventLockDevice();就相当与构造了一个type为kGSEventLockDevice的GSEventRecord结构再将其发送出去。&lt;/p&gt;

&lt;p&gt;用一个稍微复杂的例子，我们向屏幕的{50，50}坐标处发送一个“按下”的指令&lt;/p&gt;

&lt;p&gt;C代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        #import &quot;GSEvent.h&quot;     
        #include &amp;lt;mach/mach_time.h&amp;gt;     
        void sendclickevent(){     
            mach_port_t thePortOfApp = GSCopyPurpleNamedPort(&quot;com.fuckyou.fuck&quot;);     

            GSEventRecord header;     
            GSHandInfo click;     
            GSPathInfo pathInfo = {2,2,2,1,1,{50,50}, NULL};     

            bzero(&amp;amp;header, sizeof(header));     
            bzero(&amp;amp;click, sizeof(click));     

            header.type = kGSEventHand;     
            header.subtype = kGSEventSubTypeUnknown;     
            header.location.x = 50;     
            header.location.y = 50;     
            header.windowLocation.x = 50;     
            header.windowLocation.y = 50;     
            header.infoSize = sizeof(GSHandInfo)+sizeof(GSPathInfo);     
            header.timestamp = mach_absolute_time();     

            click.type = kGSHandInfoTypeTouchDown;     
            click.deltaX = 1;     
            click.deltaY = 1;     
            click.pathInfosCount = 1;     

            struct    
            {     
                GSEventRecord record;     
                GSHandInfo hand;     
                GSPathInfo path;     
            } record = {header, click, pathInfo};     

            GSSendEvent(&amp;amp;record, thePortOfApp);     
        }    

        #import &quot;GSEvent.h&quot;  
        #include &amp;lt;mach/mach_time.h&amp;gt; 
        void sendclickevent(){  
            mach_port_t thePortOfApp = GSCopyPurpleNamedPort(&quot;com.fuckyou.fuck&quot;);  

            GSEventRecord header;  
            GSHandInfo click;  
            GSPathInfo pathInfo = {2,2,2,1,1,{50,50}, NULL};  

            bzero(&amp;amp;header, sizeof(header));  
            bzero(&amp;amp;click, sizeof(click));  

            header.type = kGSEventHand;  
            header.subtype = kGSEventSubTypeUnknown;  
            header.location.x = 50;  
            header.location.y = 50;  
            header.windowLocation.x = 50;  
            header.windowLocation.y = 50;  
            header.infoSize = sizeof(GSHandInfo)+sizeof(GSPathInfo);  
            header.timestamp = mach_absolute_time();  

            click.type = kGSHandInfoTypeTouchDown;  
            click.deltaX = 1;  
            click.deltaY = 1;  
            click.pathInfosCount = 1;  

            struct  
            {  
                GSEventRecord record;  
                GSHandInfo hand;  
                GSPathInfo path;  
            } record = {header, click, pathInfo};  

            GSSendEvent(&amp;amp;record, thePortOfApp);  
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;里面需要注意的是向某应用发送事件，必须获得该应用的端口，也就是第一行代码。而发送复杂的信息必须要将若干信息体拼接到一起，自己定义一写需要的结构体比较合适，并正确填写信息体的大小，这些技巧仿佛回到了蛮荒时代。我本身看到0长数组，顺手就在堆上构造结构了，但这些消息的处理是异步的，我也不清楚何时可以安全地回收内存，所以建议还是使用结构体拼凑的方法。&lt;/p&gt;

&lt;p&gt;除了触屏之外，另一个非常重要的就是键盘输入了，但是iPhone的输入的特殊性，不太好说是键盘输入，反正就是那个意思。&lt;/p&gt;

&lt;p&gt;具体编码过程其实和触屏事件没什么两样，不过如果把GSHardwareKeyInfo或者GSKeyInfo这种似乎是键盘事件的结构名放google上搜索，一个结果都没有，一开始我还想凑，花了两三天实在凑不出来了发现其实可以逆向来嘛，用GSEventCreateKeyEvent创造一个键盘事件，然后解析它就是，于是这样才搞定，而且可悲的发现其实我想得太多了，里面绝大多数成员填0就行了，没必要为编码区这些东西烦恼。&lt;/p&gt;

&lt;p&gt;Objective-c代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        GSEventRecord header;     
        GSHardwareKeyInfo key = {0,0,0,0,1,{&#39;a&#39;},1,{&#39;a&#39;},0,0,0,0};     
        memset(&amp;amp;header, 0, sizeof(header));     

        header.type = kGSEventKeyDown;     
        header.infoSize = sizeof(GSHardwareKeyInfo);     
        header.timestamp = mach_absolute_time();     

        struct     
        {     
            GSEventRecord header1;     
            GSHardwareKeyInfo key1;     
        }fuck = {header, key};     
        GSSendEvent(&amp;amp;fuck, GSGetPurpleApplicationPort());    

            GSEventRecord header;  
            GSHardwareKeyInfo key = {0,0,0,0,1,{&#39;a&#39;},1,{&#39;a&#39;},0,0,0,0};  
            memset(&amp;amp;header, 0, sizeof(header));  

            header.type = kGSEventKeyDown;  
            header.infoSize = sizeof(GSHardwareKeyInfo);  
            header.timestamp = mach_absolute_time();  

            struct  
            {  
                GSEventRecord header1;  
                GSHardwareKeyInfo key1;  
            }fuck = {header, key};  
            GSSendEvent(&amp;amp;fuck, GSGetPurpleApplicationPort());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样就可以输入一个a了，前提是光标必须在输入框内。&lt;/p&gt;

&lt;p&gt;当然后续问题还有很多，这实际上不过是自己的程序向自己的发送事件而已，后面需要做的是程序运行到后台时向前台程序甚至是主界面发事件，能否做到，我也不敢肯定。&lt;/p&gt;

&lt;p&gt;小结：iPhone模拟触屏实现事件教程的内容介绍完了，希望本文对你有所帮助！更多相关内容请参考编辑推荐。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>[转载]Developing without Provisioning Profile</title>
      <link href="http://example.com/developing-without-provisioning-profile/"/>
      <updated>2012-09-01T07:18:54+08:00</updated>
      <id>http://example.com/developing-without-provisioning-profile</id>
      <content type="html">&lt;p&gt;To develop for the devices one should first obtain a provisioning profile by joining the iPhone Developer Program (which costs $99). However, some simple tricks can be used to make Xcode compile and debug on jailbroken devices without provisioning profiles.&lt;/p&gt;

&lt;p&gt;These steps are only tested for Xcode 3.2.x/iPhone SDK 3.x and Xcode 4.3.x/iPhone SDK 5.x. If for some reason you are stuck with Xcode 3.1.x, try &lt;a href=&quot;http://iphonesdkdev.blogspot.com/2009/06/use-xcode-312-to-build-sdk-30-app-to-30.html&quot;&gt;[1]&lt;/a&gt;.&lt;!-- more --&gt;&lt;/p&gt;

&lt;h3&gt;Compiling&lt;/h3&gt;

&lt;p&gt;Performing these steps allows you to use Xcode to compile any applications and deploy it yourself.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Create a self-signed code-signing certificate with the name “iPhone Developer” on the “login” (default) keychain using Keychain Access&lt;a href=&quot;http://www.iphonedevwiki.net/index.php/Xcode#cite_note-0&quot;&gt;[1]&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Open /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Info.plist (4.2 or below: /Developer/Platforms/iPhoneOS.platform/Info.plist)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Replace all occurrences of XCiPhoneOSCodeSignContext by XCCodeSignContext. There are three of them (XCode Version 3.2.4+).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; Save the file and restart Xcode.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you upgrade the iPhone SDK, you need to perform steps 2 – 4 again.&lt;/p&gt;

&lt;h3&gt;Replacing codesign with ldid&lt;/h3&gt;

&lt;p&gt;These steps are necessary for debugging, since the entitlement can no longer be inserted by performing steps 1 – 4. To actually debug your app, make sure you have add -gta to &lt;strong&gt;Other Code Signing Flags&lt;/strong&gt; of your target.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; Make sure you have ldid on your Mac&lt;a href=&quot;http://www.iphonedevwiki.net/index.php/Xcode#cite_note-1&quot;&gt;[2]&lt;/a&gt;. Place a copy in /usr/local/bin.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt; Create the Python script /usr/local/bin/ldid3.py. Make it executable. Fill it with:&lt;/p&gt;

&lt;h1&gt;!/usr/bin/env python&lt;/h1&gt;

&lt;p&gt;from sys import argv
from subprocess import check_call
from os.path import basename, splitext, join
from tempfile import NamedTemporaryFile&lt;/p&gt;

&lt;p&gt;app = argv[-1]
obj_path = join(app, splitext(basename(app))[0])&lt;/p&gt;

&lt;p&gt;if &#39;-gta&#39; not in argv:
    check_call([&#39;/usr/local/bin/ldid&#39;, &#39;-S&#39;, obj_path])
else:
    with NamedTemporaryFile() as f:
        f.write(&quot;&quot;&quot;
&amp;lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
  &lt;dict&gt;
    &lt;key&gt;get-task-allow&lt;/key&gt;
    &lt;true/&gt;
  &lt;/dict&gt;
&lt;/plist&gt;
        &quot;&quot;&quot;)
        check_call([&#39;/usr/local/bin/ldid&#39;, &#39;-S&#39; + f.name, obj_path])&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;7.&lt;/strong&gt; Open iPhoneCodeSign.xcspec.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For Xcode 4.3 the file is at: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/PrivatePlugIns/iPhoneOS Build System Support.xcplugin/Contents/Resources/iPhoneCodeSign.xcspec&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For Xcode 4.2 the file is at: /Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/PrivatePlugIns/iPhoneOS Build System Support.xcplugin/Contents/Resources/iPhoneCodeSign.xcspec&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For older versions the file is at: /Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Plug-ins/iPhoneOS Build System Support.xcplugin/Contents/Resources/iPhoneCodeSign.xcspec&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;8.&lt;/strong&gt; Replace the line saying CommandLine = &quot;/usr/bin/codesign&quot; with CommandLine = &quot;/usr/local/bin/ldid3.py&quot;. It should be around line 12.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;9.&lt;/strong&gt; Save the file and restart Xcode.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you upgrade the iPhone SDK, you need to perform steps 8 – 9 again.&lt;/p&gt;

&lt;h3&gt;Allowing apps with invalid signatures to be installed&lt;/h3&gt;

&lt;p&gt;These steps allow you to install an unsigned app to the device. This method only works for iOS 4.0 or above.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;10.&lt;/strong&gt; Create a file /var/mobile/tdmtanf on the device, to enable Apple&#39;s &quot;TDMTANF bypass&quot; in installd (warning: doing so will also put you in a sandboxed GameCenter&lt;a href=&quot;http://www.iphonedevwiki.net/index.php/Xcode#cite_note-2&quot;&gt;[3]&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you upgrade the firmware, you need to do step 10 again.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.iphonedevwiki.net/index.php/Xcode#cite_ref-0&quot;&gt;↑&lt;/a&gt; Procedures can be found in &lt;a href=&quot;http://developer.apple.com/mac/library/documentation/Security/Conceptual/CodeSigningGuide/Procedures/Procedures.html&quot;&gt;http://developer.apple.com/mac/library/documentation/Security/Conceptual/CodeSigningGuide/Procedures/Procedures.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.iphonedevwiki.net/index.php/Xcode#cite_ref-1&quot;&gt;↑&lt;/a&gt; If not, you can install from Fink unstable, compile it from git://git.saurik.com/ldid.git, or just download &lt;a href=&quot;https://github.com/downloads/rpetrich/ldid/ldid.zip&quot;&gt;https://github.com/downloads/rpetrich/ldid/ldid.zip&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.iphonedevwiki.net/index.php/Xcode#cite_ref-2&quot;&gt;↑&lt;/a&gt;&lt;a href=&quot;https://discussions.apple.com/thread/2745420?start=0&amp;amp;tstart=0&quot;&gt;https://discussions.apple.com/thread/2745420?start=0&amp;amp;tstart=0&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;转自：&lt;a href=&quot;http://www.iphonedevwiki.net/index.php/Xcode#Developing_without_Provisioning_Profile&quot;&gt;iPhoneDev Wiki&lt;/a&gt;，大宝库&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>TransText 2.2 - 字符串提取、回写以及搜索替换工具</title>
      <link href="http://example.com/transtext/"/>
      <updated>2012-08-27T19:13:17+08:00</updated>
      <id>http://example.com/transtext</id>
      <content type="html">&lt;p&gt;更新了TransText，加入了最新  Android 4.0 风格的 UTF-8 前导个数的字符串格式支持，修改了程序UI，更直观的地设置字符串格式。&lt;/p&gt;

&lt;p&gt;功能：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;提取英文字符串，保存为 PASSOLO 支持的 INI 格式，以便工程化翻译（供汉化工作者使用）。&lt;/li&gt;
&lt;li&gt;回写英文字符串。&lt;/li&gt;
&lt;li&gt;查找和替换字符串。&lt;/li&gt;
&lt;li&gt;所有操作均支持文件或文件夹批量处理，支持通配符搜索文件。&lt;/li&gt;
&lt;li&gt;全面支持 BSTR (带长度的字符串模式)提取、回写和搜索。2.0 新增&lt;/li&gt;
&lt;/ol&gt;


&lt;!-- more --&gt;


&lt;ol&gt;
&lt;li&gt;支持 Visual Studio 2005/2008 项目文件转换（小功能）：拖动.sln文件到“搜索”页面时，自动检测 Visual Studio 2005/2008 方案文件，并询问是否转换方案和工程文件的格式（2005/2008互转）。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;最新版本，2.2.264：&lt;a href=&quot;https://raw.githubusercontent.com/Yonsm/TransText/master/Release/TransText.exe&quot;&gt;TransText.2.2.264&lt;/a&gt;（&lt;a href=&quot;http://github.com/yonsm/TransText&quot;&gt;源代码&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/Yonsm/TransText/master/Release/TransText.gif&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Yonsm/TransText/master/Release/TransText.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;终于可以大规模工业化汉化 Android 程序了TransText 提取，配合 Passolo，完美实现……
从此可以不用小打小闹了。汉化最怕的就是不能重用资源，利用Passolo的强大功能可以解决这个问题。但Passolo并不支持 Android 的资源文件，配合TransText就行了，步骤大概是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;用 TransText 提取 .arsrc的字符串（勾选UNICODE字符串模式，勾选带长度的字符串模式，只提取英文字符串也可以勾选，避免其他字符串）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用 Passolo 添加 .ttt 文件看工程中（建议创建 .ttt 文件的规则，复制INI规则既可，或者不会的话，直接把 .ttt改名为.ini），汉化ttt文件并输出汉化后的文件。（同时把汉化后的字典导出保存一下，下次升级后再用）&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;3.用 TransText 回写Passolo的输出ini（ttt）到.arsrc中，重新打包apk即可。&lt;/p&gt;

&lt;p&gt;感谢 汉化新世纪 乾（qian.hanzify.org）在此工具制作过程中的意见和建议。&lt;/p&gt;

&lt;p&gt;汉化新世纪讨论帖：&lt;a href=&quot;http://bbs.hanzify.org/read-htm-tid-52828.html&quot;&gt;http://bbs.hanzify.org/read-htm-tid-52828.html&lt;/a&gt; （含 VS2012 编译的支持 XP 的版本）&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>ARIA2 + GoAgent +Lighttpd for Tomato</title>
      <link href="http://example.com/aria-goagt-for-tomato/"/>
      <updated>2012-08-27T12:19:05+08:00</updated>
      <id>http://example.com/aria-goagt-for-tomato</id>
      <content type="html">&lt;p&gt;说是“For Tomato”只是因为autorun的支持，只要是 MIPSR2/MIPSEL架构的Linux应该都能跑，包括OpenWRT和1185系列的高清播放机都行。仅供知道是什么东西的用户使用。&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;strong&gt;Aria2+GoAgent+Lighttpd&lt;/strong&gt; for Tomato：&lt;a href=&quot;https://hdweb.googlecode.com/svn/ROUTER&quot;&gt;https://hdweb.googlecode.com/svn/ROUTER&lt;/a&gt;（E4200 16M Flash，用&lt;a href=&quot;http://code.google.com/p/tomato-shibby-arctic-chs/downloads/list&quot;&gt;Arctic的Tomato&lt;/a&gt; BT版，JFFS空间7.4M，正好能装下这两个东西，路由器终于完美了、无敌了……）&lt;/p&gt;

&lt;p&gt;其他还有纯Go4gent版本，但Go4gent比较旧了，请自行替换升级。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;尝试使用后请立即替换proxy.ini中的AppID。&lt;/strong&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>用 EFI 模式跳过Bootcamp安 装Windows 8 到 Mac</title>
      <link href="http://example.com/use-windows8-efi-mode-on-mac/"/>
      <updated>2012-08-23T07:53:11+08:00</updated>
      <id>http://example.com/use-windows8-efi-mode-on-mac</id>
      <content type="html">&lt;p&gt;——附上安装Windows 8的步骤（2012.08.23更新）—— &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mac系列用EFI模式（非BootCamp）安装Win8，就3、4句话：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.在OS X下用磁盘工具调整好Mac使用的空间，预留空闲空间（但不要创建分区，此时只有一个Mac分区(和一个隐藏的EFI分区)，为纯GPT磁盘）；&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 弄个U盘（或者移动硬盘的一个分区）格式化为FAT32，把Win8安装盘释放上去；&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.按Option选U盘启动，安装时选择预留的空闲空间，直接下一步安装（不用创建分区） ；&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（4. 如果遇到重启后黑屏，那么时驱动的问题，此时用Win8启动盘启动，用修复-&gt;命令行模式-&gt;删掉显卡驱动程序，如Intel的是 ig*.sys）。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;目前遇到的问题是显卡不支持，但可以用Microsoft Basic Video Driver，Windows 评分为悲催的3分——但刚刚发现2011 的MacBook Pro竟然能驱动起来，是Intel HD3000。&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;通过几天的折腾，得出这个结论，终于不用再隔靴抓痒的感觉了。&lt;/p&gt;

&lt;p&gt;但Windows 7竟然不行。包括使用 Windows 7 的 boot.wim/install.wim 替换 Windows 8 的相应文件，均不可以。&lt;/p&gt;

&lt;p&gt;Windows 7 的boomgr.efi无法被Mac识别，Windows 8的却可以。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;参考了各种文章，做了各种尝试，证实确实Windows7不行，原因是 Mac系列的EFI版本为1.1，Windows7却需要2.0。万恶的是Mac系列的EFI固件更新的版本好现在都是2.x，实际上这个2.x只是苹果自己的版本号，不是EFI规范的版本号（依然是使用EFI规范1.1）。&lt;/p&gt;

&lt;p&gt;http://webcache.googleusercontent.com/search?q=cache:qSac_SCBRWgJ:darobins.wordpress.com/2009/10/04/native-uefi-windows-7-boot-on-mac-mini/+EFI+Shell+1.1+Mac&amp;amp;cd=10&amp;amp;hl=zh-CN&amp;amp;ct=clnk&lt;/p&gt;

&lt;p&gt;要么苹果升级支持EFI 2.0，要么装Windows 8，看来，苹果还是不如微软更靠得住⋯⋯
&lt;del&gt;1. 准备好 Windows 8 安装盘：&lt;/del&gt;
&lt;del&gt;   1）强烈不建议刻盘，直接用U盘或者移动硬盘即可（但移动硬盘要装换成GPT格式会丢失数据哦）;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;   2）用工具（如DiskGen或者Paragon之类的）把U盘重新初始化为GPT分区（Hyrid GPT也可以好像，这样通用性更广泛了，但在Mac下格式化成 Hyrid GPT，我尝试了，但似乎不行，具体我忘了）;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;   3）重建一个FAT32分区;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;   4）直接把 Windows 8 的ISO的内容，复制到U盘上。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;   5）没有了，看到了么，不需要 bootsect 之类的了，因为 EFI （至少Mac系类的EFI）是直接引导GPT分区中 /efi/boot/bootx64.efi 文件的。引导分区只能是 FAT/FAT32（这似乎是EFI的规范，但苹果的EFI同时支持HPFS）。 &lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;2. 在 Mac 下准备好磁盘空间：在 磁盘工具 中，调整小Mac的分区，或者删除掉之前你正在使用的 BootCamp 分区，总之，留下一片可用空间来装 Windows 8——但是记住，不要分区，留空（让Windows 8来分区）。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;3. 把U盘插入，按Option 启动，选择U盘的黄色图标 EFI Boot，可以用纯 EFI 方式启动安装盘。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;4. 安装选择分区的时候，在刚才的空闲磁盘空间中创建分区（这里有一点，似乎原来苹果的第一个EFI分区要删除掉才能安装，我是在安装过程分区的时候删除了，如果不删除，似乎会提示说不能安装，因为要创建MSR分区）。最后创建分区后会有至少4个Windows分区：MSR（保留，没用的）、ESP（Windows启动文件所在，前面提到过EFI无法放在NTFS分区上）、Recovery（Windows恢复环境）、NTFS主分区。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;5. 剩下的，正常安装下去，安装好后启动速度大大快过BootCamp（跳过了Mac第一个EFI分区的EFI to BIOS 模拟层），运行速度似乎也更快了。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;6. MacBook上部分驱动目前工作不正常（无论是否Bootcamp），比如光线感应（亮度自动很暗，悲催）。&lt;/del&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>真正能还原/修复 iPhone PNG 的有效方法</title>
      <link href="http://example.com/restore-iphone-png/"/>
      <updated>2012-08-21T15:31:23+08:00</updated>
      <id>http://example.com/restore-iphone-png</id>
      <content type="html">&lt;p&gt;iPhone/iPad 的 IPA 包中的  PNG 文件在编译时默认会做特殊处理（应该是以便硬件加速解码？），有时候需要“参考”下第三方的 PNG 图片的时候带来了巨大的麻烦：一直流传着各种方法和工具，分别是 Windows 下的 FixPng、Mac下的iPhone PNG Fix、Python脚本修复、PNG Nomalizer（&lt;a href=&quot;http://www.beyondcow.com/pngnormalizer/&quot;&gt;http://www.beyondcow.com/pngnormalizer/&lt;/a&gt;），在线修复（&lt;a href=&quot;http://www.raisedtech.com/iphone-ipa-png/&quot;&gt;http://www.raisedtech.com/iphone-ipa-png/&lt;/a&gt;）等等这种各样。实际用下来基本上对于现在的 IPA 文件中的 PNG 多半有很多图片无法还原。&lt;/p&gt;

&lt;p&gt;解铃还须系铃人，为了真正解决这个问题，我们还是从 iOS 设备上入手吧：&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;1.先拿到 IPA 解出所有的 PNG；&lt;/p&gt;

&lt;p&gt;2.编译到我们的程序 iOS App 中；&lt;/p&gt;

&lt;p&gt;3.在程序中枚举所有的 PNG，装载，重新保存为 PNG——此时生成的 PNG 就是通用格式的 PNG 啦，真正解决了问题：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NormalizePngFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;     &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stringByDeletingLastPathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSFileManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;fileExistsAtPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSFileManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;createDirectoryAtPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;withIntermediateDirectories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;     
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;     &lt;span class=&quot;bp&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;imageWithContentsOfFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;     
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;     &lt;span class=&quot;bp&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIImagePNGRepresentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;     
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;writeToFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;atomically&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NormalizePngFolder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt;     &lt;span class=&quot;bp&quot;&gt;NSArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSFileManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;subpathsAtPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lowercaseString&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;hasSuffix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;.png&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;26&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;27&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;NormalizePngFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;stringByAppendingPathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;stringByAppendingPathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;28&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;29&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;30&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4.拷贝出这些 PNG 来即可。&lt;/p&gt;

&lt;p&gt;上面仅仅时代码片段，可以完善一下，可以写个小程序，输入 IPA 的地址直接把图片还原出来。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>海美迪 HD600 系列高清播放机固件定制版</title>
      <link href="http://example.com/hd600-rom/"/>
      <updated>2012-07-24T17:00:41+08:00</updated>
      <id>http://example.com/hd600-rom</id>
      <content type="html">&lt;p&gt;如果你不喜欢固件中的 BT 程序，如果你想获得一个 /opt 目录的可写权限，如果你想使用 ipkg 安装额外的软件包，如果你喜欢最大化地控制启动或停止外部服务（HTTP、FTP、Transmission等），请往下看。&lt;/p&gt;

&lt;p&gt;海美迪 HD600A 固件 Yonsm 2012.07.24 版，本固件基于官方 1.0.7.28 固件（http://bbs.himedia-tech.cn/forum.php?mod=viewthread&amp;amp;tid=54275）。&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;一、修改&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;IMS 修改，支持更多的在线视频，精简部分国内不常用的组件（如  GTalk，谁有兴致在这种破硬件上跑 Google Talk？）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;替换 geigi 提供的精美图标主题（http://www.hdpfans.com/thread-43379-1-1.html）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;完全删除内置的 BT 和原有的 WEB 服务。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;主机名从 Venus 修改为 Media（个人喜好，勿喷：）。如果需要修改，请修改 /usr/local/etc/hostname 文件。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安全关机脚本支持自动停止 Samba、Transmission（如果安装了且启动了的话），以便关机前停止这些服务保护硬盘。（和官方一样，默认并没有开启安全关机。需要在设置中开启）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;WEB 控制台&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内置简单的 WEB 控制台，支持各种扩展功能管理和执行自定义命令（文件在 /usr/local/etc/www/index.html 和 /usr/local/etc/www/cgi-bin/cele.cgi）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;本功能&lt;strong&gt;仅增加了一个网页和一个 CELE.CGI 脚本程序&lt;/strong&gt;，直接利用的是官方原有的 HTTP 服务，并没有增加 lighthttpd 等额外的需求。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;请用浏览器访问 &lt;strong&gt;http://media&lt;/strong&gt; 查看各种功能：&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;包括磁盘、内存、文件、CPU 信息；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;支持一次性修改 FTP、TELNET 和 SAMBA 密码；&lt;/li&gt;
&lt;li&gt;安装、启用、禁用和卸载 IPKG（默认已安装）、FTP（默认已启动）、TRANSMISSION（默认已安装）、BUSYBOX（默认未安装，修改密码和查看资源占用时会自动下载安装，请确保互联网连接畅通；请勿安装 ipkg 中的 BusyBox）、ARIA（HTTP 和 BT 下载程序，我汉化了一个 YAAW 控制台，默认未安装） 等软件；&lt;/li&gt;
&lt;li&gt;点击“控制台”几个字可以转到&lt;strong&gt;网页遥控器&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;控制台具有升级功能。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;img src=&quot;http://www.hdpfans.com/data/attachment/album/201205/14/1857500z6dzpdmy2df2d2s.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;默认 OptWare 支持&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每次启动后自动查找硬盘上的 Downloads 目录并创建链接到&lt;strong&gt; /tmp/Downloads&lt;/strong&gt;，然后自动加载 /opt/etc/inet.d/S*** 文件。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;/opt 中预装了 ipkg，如果需要安装 ipkg 程序包，可以直接安装，如：/opt/bin/ipkg install atop&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;/opt 中预装了 ipkg 程序包 vsftpd。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;/opt 中预装了 ipkg 程序包 transmission 2.51。WEB 控制端为汉化版本。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;默认没开启 Transmission 服务，刷机后用遥控器控制 主界面-&gt;设置-&gt;网络-&gt;BT 程序 的开关，改为控制 Transmission 开关（实际执行为 /opt/etc/bt.script -&gt; /usr/local/bin/cele -&gt; /usr/local/etc/www/cgi-bin/cele.cgi BT_START）。&lt;/li&gt;
&lt;li&gt;Transmission下载目录为 /tmp/Downloads（即指向硬盘中的下载目录，就是说你想下载到某个分区上，则在根目录创建 Downloads 目录即可，建议用 EXT3 分区下载）：
/tmp/hdd/volumes/HDD&lt;em&gt;/Downloads
/mnt/usbmounts/sd&lt;/em&gt;/Downloads
/tmp/hdd/volumes/HDD&lt;em&gt;/（自动创建Downloads）
/mnt/usbmounts/sd&lt;/em&gt;/（自动创建Downloads）
/opt/tmp/Downloads/（自动创建Downloads）（即刷机后启动时神马都没有接，好吧，大佬，U盘你都拔掉啦？）&lt;/li&gt;
&lt;li&gt;请用浏览器访问 http://media:9091 访问 WEB 控制台。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同时进行的下载任务初始化时已经改为 2，建议手动设置下载速度限制在 1500 KB/s 以下，否则 CPU 可能吃不消。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;/opt 指向 /usr/local/etc/opt，以便可以读写此目录。此目录可写空间达到令人发指 102M！（这是我多次反复测试后得到的比较理想的数值，再调大了就可能无法刷入了），官方版只有 40M。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;/opt 中的所有东西均可编辑或删除（请在 WEB 控制台中点击删除所有软件）。如果你想获得更大的 /opt 空间，请把 /usr/local/etc/opt 删除，然后创建链接符号到外部磁盘上（当然删除之前你可以拷贝里面的所有内容到外部磁盘上）。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;三、刷机&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;下载、解压，得到 install.img 拷贝到 U 盘；&lt;/li&gt;
&lt;li&gt;顶住后面电源和 HDMI 中间的小孔内的按键，再上电开机；&lt;/li&gt;
&lt;li&gt;上电 5 秒后松开（按更长时间没有关系），会看到带升级提示的开机画面 （仅在 HDMI 接口和分量即可可以显示， AV没有）&lt;/li&gt;
&lt;li&gt;等待升级完成（如果重启之后中途一段时间无显示，是正常现象，请耐心等待，但整个过程不会超过 10 分钟）。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;四、使用&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Telnet/FTP，用户名：root，密码：无 （请使用 WEB 控制台修改密码）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Samba（与 Windows 共享文件），用户名：无，密码：无 （可以在遥控器的设置上开启密码功能，用户名为 root，密码为 toor；请使用 WEB 控制台修改密码）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Transmission、ARIA、WEB 控制台，均无密码，如果有安全性考虑，建议不用时在 WEB 控制台中禁用相关服务。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;五、定制&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果你想重新定制此固件，请在 Mac OS X 下操作（可以从 http://www.hdpfans.com/forum.php?mod=viewthread&amp;amp;tid=43707 下载我编译的工具和脚本文件）：&lt;/li&gt;
&lt;li&gt;解开，执行 open_rom.sh 即可。&lt;/li&gt;
&lt;li&gt;打包，执行 make_rom.sh 即可，会提示输入 root 密码。&lt;/li&gt;
&lt;li&gt;Linux 下的定制工具可以从 http://www.hdpfans.com/forum.php?mod=viewthread&amp;amp;tid=18314 中下载；如果是 Windows 则似乎会有问题。&lt;/li&gt;
&lt;li&gt;有用的发现：/etc 下只保留部分必须的文件即可，opt 文件实际上不会占用 squashfs1.img 的空间，所以打包 squashfs1.img 的时候 /opt 只是一个链接而不是真实目录，真正的 /opt 打包到了 usr.local.etc.tar.bz2 中。&lt;/li&gt;
&lt;li&gt;修改，请随意……&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;六、历史&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2012.07.24&lt;/strong&gt;
&lt;strong&gt; 1. 跟进官方 1.0.7.28 升级（未如约升级 TR 到 2.6，因为 IPKG 未更新，还是继续用 2.52 吧，非常稳定）。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2012.05.14
1. 修改几个收藏相关的图片；
2. 加入 WEB 控制台，方便安装和管理扩展软件；
3. 加入 ARIA 安装功能，可以支持 HTTP 下载。&lt;/p&gt;

&lt;p&gt;2012.05.10
1. 升级为官方最新 1.0.7.11 固件；
2. 替换 geigi 提供的精美图标主题；
3. 去除在线平台中的 PPS 模块（据说国外 IP 可以访问，多一个不多少一个也不少，不能用的东西不保留；但 YouTube 无可替代，通过路由器指定 VPN 出口访问可以访问），加入了 RealPilot 凑数（可以看新浪的天气、新闻和股票）。
4. 去掉了很多无用的残余文件（如 GTalk 等模块，以及无用的图片文件），/usr/local/etc 的可写空间达到令人发指的 102M；
5. 加入官方原版的 WEB 遥控器（用手机访问高清播放器的地址 http://media，默认端口号 80 HTTP 服务就是网页遥控器）；
6. 其它小改进。&lt;/p&gt;

&lt;p&gt;2012.03.14
1. 遥控器上可以控制 Transmission 开启或关闭。
2. 优化 Transmission 脚本。
3. 优化安全关机脚本（如果启用，则每次启动都要手动开启 Transmission）。
4. IMS 同步更新为 zhw 的最新版本风格（除了图片，无实际修改）。
5. 编译了 Mac OS X 下的解包和封包工具，提供了相关工具和脚本文件（如果你要做Linux解包封包，请下载旧版本替换 install.img即可）。
6. 修正了 install_busybox.sh 的潜在问题。
7. 其它没想到的小修改。&lt;/p&gt;

&lt;p&gt;2012.03.06
1. 修改了transmission 的启动脚本，更智能了。
2. 允许修改 hostname 了。
3. 修改了在线网络视频，整理成了3×4=12个，完美显示无需翻页滚屏。YouTube需要路由器开VPN才可以，其它没有死链接了。&lt;/p&gt;

&lt;p&gt;2012.03.05
1. 第一个版本。
2. 124M，内部install.dmg为142M
未仔细测试，请酌情使用。&lt;/p&gt;

&lt;p&gt;版权所无 Yonsm
WWW.Yonsm.NET
2012.05.14
FOR MY JEANZ，FOR MY DREAM&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.hdpfans.com/data/attachment/album/201203/29/12591406g1aegg6ad905c6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.hdpfans.com/data/attachment/album/201203/29/125911cdhdd9dhadd88ahc.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（以上图片为原作者设计并非本固件截图）&lt;/p&gt;

&lt;p&gt;下载（07.24版本）：&lt;a href=&quot;http://115.com/file/c2cw4vxp&quot;&gt;&lt;strong&gt;http://115.com/file/c2cw4vxp&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载（05.14版本）：&lt;strong&gt;&lt;a href=&quot;http://115.com/file/dpww794v&quot;&gt;http://115.com/file/dpww794v&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;论坛讨论：&lt;a href=&quot;http://www.hdpfans.com/forum.php?mod=viewthread&amp;amp;tid=42801&quot;&gt;http://www.hdpfans.com/forum.php?mod=viewthread&amp;amp;tid=42801&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>自动转发特定网站到路由器GoAgent，实现客户端零配置</title>
      <link href="http://example.com/zero-client-config-with-goagent-router/"/>
      <updated>2012-05-09T02:29:17+08:00</updated>
      <id>http://example.com/zero-client-config-with-goagent-router</id>
      <content type="html">&lt;p&gt;关于自动指定出口有完美方案了！在路由器上跑GoAgent，路由器的防火墙规则能自动把U2B的HTTP请求往Go~Agent上劫持转发，这样相当于是和“指定出口”功能差不多功能的智能路由了（不过不是VPN路由，是HTTP代理而已）&lt;/p&gt;

&lt;p&gt;以 YouTube 为例：&lt;!-- more --&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;先DNSMasQ防止域名解析的IP变换或被污染：&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;address=/c.youtube.com/&lt;strong&gt;173.194.5.118&lt;/strong&gt; 》》这个IP随便写一个永远不会访问的IP（可以用justping来解析正确的IP）
address=/youtube.com/ytimg.com/203.208.46.178 》》这个用Host访问￥ouTube，不需要代理就能访问（这个不属于本文的内容，不明白请忽略）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;然后添加防火墙脚本：
iptables -t nat -I PREROUTING  -i br0 -p tcp -d &lt;strong&gt;173.194.5.118&lt;/strong&gt; --dport 80 -j REDIRECT --to-ports 8087&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这样配置后，客户端不用做任何配置，访问YouTube的时候，网页内容自动用过host就能直接访问，视频内容被解析到&lt;strong&gt;173.194.5.118&lt;/strong&gt;这个IP地址，然后这个地址的指定端口80被iptables自动劫持到路由器的8087端口，即Go4gent代理。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;已测试PC上浏览器和Android上浏览器均可不用做任何设置即可访问并播放￥ouTube。哈哈
Androide上￥ouTube客户端似乎不行，可能走的不是80端口HTTP方式。想来iphone客户端和网页版都不行，可能都是没走HTTP方式而是使用专用控件的方式走其他渠道，有待继续分析（只要是HTTP方式，就可以搞定，有可能是其它服务器）。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;类似的方法可以用来自动转发其它的网站，只要在Dnsmasq上增加域名即可，太完美了,如：
address=/c.youtube.com/bbc.co.uk/&lt;strong&gt;111.111.111.111&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;（如果还要访问改域名的其它网站，请不要添加DNSMasq的偷懒的方法，而是增加一个防火墙脚本：ptables -t nat -I PREROUTING  -i br0 -p tcp -d &lt;strong&gt;111.111.111.111&lt;/strong&gt; --dport 80 -j REDIRECT --to-ports 8087，IP地址换成正确的IP地址，如果IP被污染，则自己用DNSMasq或者8.8.8.8解析一下）&lt;/p&gt;

&lt;p&gt;我这个“指定出口”做的精妙吧，真正实现了客户端零配置，哈哈……&lt;/p&gt;

&lt;p&gt;在路由器上安装GoAgent的方法请看：&lt;a href=&quot;/2012/04/09/3-5mb-router-deployed-on-ultra-small-free-space-pythongoagent-the-case-of-tomato-dualwan-wr500v/&quot;&gt;在 3.5MB 空闲空间的路由器上部署 Python + GoAgent）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;论坛帖子请看：&lt;a href=&quot;http://bbs.dualwan.cn/viewthread.php?tid=278761&quot;&gt;http://bbs.dualwan.cn/viewthread.php?tid=278761&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上文中所称路由器为 Tomato DualWAN，但对于有iptables命令的 Linux类路由器包括DDWRT/OpenWRT等均有参考意义。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总结一下，终于找到一个比较好的方案了&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;按优先级如下：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 能直接访问的网站——如国内网站；&lt;/strong&gt;
&lt;strong&gt; 2. 能通过修改host直接访问的，如youtube、facebook、google（twitter之前行，现在似乎不行了，转到下面这种方法）；&lt;/strong&gt;
&lt;strong&gt; 3. 不能直接访问的HTTP网站，如bbc中文网，通过DNSMasQ批量劫持转到GoAgent。&lt;/strong&gt;
&lt;strong&gt; 4. 最难的是HTTPS网站，这个不能劫持，只能手动设置代理来访问，如访问很慢的amazon.com登录（这里我们假设根本不能访问吧），这种网站HTTPS较少，所需证书不多，自己整理一下这些证书放到路由器的/opt/etc/goagent/certs下，HTTPS的问题也解决了。&lt;/strong&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>HTC ONE X 简体中文 ROM OS 完美定制</title>
      <link href="http://example.com/onex-rom/"/>
      <updated>2012-04-23T22:57:04+08:00</updated>
      <id>http://example.com/onex-rom</id>
      <content type="html">&lt;p&gt;欢迎使用 Yonsm.NET 定制的 HTC ONE X 简体中文 ROM OS！希望它能带给您一个全新的完美体验。&lt;!-- more --&gt;
一、特性&lt;/p&gt;

&lt;p&gt;◎ 基于官方 欧版 1.29.401.11 内核，稳定省电，完美定制。&lt;/p&gt;

&lt;p&gt;◎ 大规模精简不常用的程序，仅保留必要的程序（请看截图）。&lt;/p&gt;

&lt;p&gt;◎ 去除菜单条，程序切换键改为菜单键。&lt;/p&gt;

&lt;p&gt;◎ 添加 超级授权 和 程序安装。&lt;/p&gt;

&lt;p&gt;◎ 添加 BusyBox 1.19。&lt;/p&gt;

&lt;p&gt;◎ 系统内置程序均已在桌面上显示，自己安装的在所有程序的“下载”标签下显示，不会和系统程序混在一起很难找。&lt;/p&gt;

&lt;p&gt;◎ 浏览器收藏夹添加常用网站（如可以看 10 天的天气预报，淘宝网、网页 QQ等，无人个商业目的，仅为方便）。&lt;/p&gt;

&lt;p&gt;◎ 除上面列出的程序之外，未添加其它任何东西（更无任何商业和程序），也没有在任何不知晓后果的情况下胡乱修改（所有修改都是官方 ROM 的基础上做的保守修改）。
二、准备&lt;/p&gt;

&lt;p&gt;以下步骤假设你有一个全新的 HTC One X 设备，如果某些步骤已经做过，可以跳过：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;建议使用欧版 1.29.401.11 RUU 刷机包，升级到最新的官方 ROM（以便更新除了 system 之外的其它部分，如 radio 模块）。下载地址参考：http://bbs.xda.cn/forum.php?mod=viewthread&amp;amp;tid=11044292&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;官方解锁（或者 SPL S-OFF 也行，但目前似乎没有公开方法），请参考：http://bbs.hiapk.com/thread-3554021-1-1.html，或者更简单的方法：http://bbs.shuame.com/forum.php?mod=viewthread&amp;amp;tid=20195（未验证）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;刷 Recovery，请参考：http://bbs.xda.cn/forum.php?mod=viewthread&amp;amp;tid=11068451&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类似刷 Recovery 的方法，刷 boot.img（解开 update.zip 里面的 boot.img，手机进入 HBOOT 状态，然后 adb flash boot boot.img）。
三、刷机&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;进入 Recovery&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;1). 关机，按音量减小键 + 电源键开机，如果 HBOOT 界面。&lt;/p&gt;

&lt;p&gt;2). 用音量键上下选择 RECOVERY，电源键确认，进入 Recovery 模式。&lt;/p&gt;

&lt;p&gt;如果是重刷 ROM，似乎经常遇到进入 Recovery 后一闪就重新启动的情况，此时请正常进入系统一次，长按完全关机，然后再次尝试进入（或者重新刷 Recovery 一次）。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在 Recovery 中选择正确的 ROM 文件（update.zip）刷入（无需WIPE，刷入ROM过程中会自动WIPE数据）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重新启动即可。
四、问答&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;■ 如何扩展定制此 ROM？
答：直接修改 update.zip 文件即可。&lt;/p&gt;

&lt;p&gt;■ 这个 ROM 没有启动声音？
答：是的，如果需要启动声音，把解开 ROM 并加入 system\customize\resource\htc_boot.mp3 到 system\customize\resource 中然后重新打包 ROM。&lt;/p&gt;

&lt;p&gt;五、致谢&lt;/p&gt;

&lt;p&gt;◎ 感谢 Kavana 提供的全程技术支持：）
◎ 感谢各位作者提供的 ROM 定制工具和相关资源。
◎ 感谢您的测试结果和建议报告（如果有的话）。
◎ 感谢您使用本 ROM（如果您使用的话）。
六、许可&lt;/p&gt;

&lt;p&gt;◎ 本人未持有 ROM 及其中的软件的版权，请以研究和学习为目的，合法使用。
◎ 如果您根据我提供的方法以及工具修改了 ROM，建议继续公开和分享您的工作成果。
◎ 本人特此申明对 ROM 之使用不提供任何保证，不对任何用户保证本 ROM 的适用性，不保证无故障产生；亦不对任何用户使用此 ROM 所遭遇到的任何理论上的或实际上的损失承担责任。
◎ 如果您使用本软件，即表示已经默认接受了此协议。
七、历史&lt;/p&gt;

&lt;p&gt;■ 2012.04.23 X1
◎ 第一个版本。&lt;/p&gt;

&lt;p&gt;■ 2012.04.24 X2
◎ 小改进。&lt;/p&gt;

&lt;p&gt;■ 2012.04.29 X3
◎ 大改进。&lt;/p&gt;

&lt;p&gt;■ 2012.06.01 X4
◎ 升级内核。
◎ 修正 Google 服务登录后图标消失的问题。
◎ 其它改进。&lt;/p&gt;

&lt;p&gt;Yonsm
Yonsm@msn.com
WWW.Yonsm.NET
2012.06.01，杭州&lt;/p&gt;

&lt;p&gt;FOR MY JANE, FOR MY DREAM...&lt;/p&gt;

&lt;p&gt;下载：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://115.com/file/dpvyj0qj&quot;&gt;http://115.com/file/dpvyj0qj&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>在 3.5MB 空闲空间的路由器上部署 Python + GoAgent</title>
      <link href="http://example.com/deploy-goagent-on-router/"/>
      <updated>2012-04-09T20:24:25+08:00</updated>
      <id>http://example.com/deploy-goagent-on-router</id>
      <content type="html">&lt;p&gt;在 3.5MB 超小空闲空间的路由器上部署 Python + GoAgent（以Tomato DualWAN WR500V 为例）
（以Tomato DualWAN WR500V 为例，WR500V 用户不想看废话的话请直接跳到“四、使用”开始看即可）&lt;/p&gt;

&lt;p&gt;一、来由&lt;/p&gt;

&lt;p&gt;    GoAgent 是利用 Google App Engine 的网络代理，速度超快，U2B之类的播放及其流畅，秒杀大部分VPN。介绍就不详说了，具体自己 Google 吧……&lt;/p&gt;

&lt;p&gt;   GoAgent 客户端（准确说是中继）是用 Python 实现的，可以在 Mac OS X、Windows、Android、iOS、WebOS 上运行，然后再设置浏览器的代理为本地 GoAgent 端口。但是要让每个访问点上部署 GoAgent 是非常麻烦的事情（如 iOS、Android 等）；即时是 Windows 和 Mac OS X，每次都使用都要打开一个多余的尾巴，想想就麻烦。有没有更好的解决方案呢？&lt;/p&gt;

&lt;p&gt;   当然有！最合适的部署的角色服务器就是在路由器上。搜索一下 GoAgent OpenWRT 或者 GoAgent Tomato，有很多教程可以参考。基本的步骤是安装 ipkg/opkg，安装 python、openssl，然后上传 GoAgent 的文件，然后少量设置就行了。&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;二、存储空间&lt;/p&gt;

&lt;p&gt;   我在使用的路由器 Tomato DualWAN 的 WR500V，只有 8M Flash，查看了一下空间使用，才用了3.xM，还有 4M+ 的空间那里去了呢？赶紧问了了一下路由器的生产商，答复了是在路由器 Web 控制台-&gt;系统管理-&gt;JFSS设置，启用并格式化，就能获得 3.5M 左右的可用空间——敢情说以前这么大的空间都闲着，真是浪费啊老大……&lt;/p&gt;

&lt;p&gt;   空间有了，准备开干。然后立马给了个下马威，ipkg 安装后就花费了将近 2M 空间，安装 python 的时候发现 *_mipsel.ipk 有 14 M+，包括其它的依赖，解压缩后竟然有 70M+（共 6498 个文件）。这对于那些有 USB 口的路由器来说，随手插上一个 U 盘或移动硬盘什么的，毫无压力，但对于我这种只有 8M Flash 的路由器来说，压力山大啊……&lt;/p&gt;

&lt;p&gt;   对于万能的终极动手折腾控来说，办法总是比困难多。于是想办法尝试，最终真的搞定了，在 3.5M 闲置空间内安装上了 GoAgent 1.8.0，让所有的电脑啊、手机啊、高清播放机啊神马的都可以轻松享受 GoAgent 带来的快感（部署 PAC 等会更方便）。本文典型地适用于有 8M Flash 且其中有 3.5M+ 空间剩余的可以刷 OpenWRT、Tomato、DD-WRT 的路由器（如果 8M Flash 刷固件后，空间不足 3.5M，可以寻找或者自己 DIY 精简版固件），特别是 Tomato DualWAN WR500V 用户可以照搬步骤和超级 Python 包。&lt;/p&gt;

&lt;p&gt;三、折腾细节&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Tomato DualWAN WR500V 支持 CIFS 客户端，即可以在路由器上映射 Samba （简单理解为类似 Windows 网络共享）的路径，如此一来，我们可以临时性地获得一个超大的“外援”空间。映射后，telnet 上去发现 /cifs1 已经可以用了。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行 mount -o bind /cifs1 /opt 让 /opt 绑定到远端可用空间上。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装 ipkg、然后 ipkg install python openssl 等，然后上传 GoAgent 然后测试运行无误（此步骤网上有很多教程，如参考：http://bbs.dualwan.cn/viewthread.php?tid=229261）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;上面步骤完成后发现总共耗费了 70M+ 空间（6498 个文件，似乎），好了，大刀阔斧地删减文件，做到最终减少到了 7M 多一点（光这个步骤就几乎花费了我超过 4 个小时的时间，Hacker、Cracker、Geeker 的成功之道：耐心+运气+经验）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;前文所述格式化装载 JFFS，df -h 查看只有 3.5M，网上查了一下得知 JFFS 是支持压缩的，cp -a /cifs1 /jffs，一阵忐忑后，发现全部拷贝进去了（正好压缩了 50% 左右），/jffs 上只剩下 150K 左右空间空闲了，真险啊……&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行 mount -o bind /jffs /opt 重新绑定 /opt 到内部的 JFFS 空间上，再次执行 GoAgent，成功，太棒了。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;剩下的收尾工作，卸磨杀驴，把 CIFS 取消掉（毕竟外援是靠不住的，并非 7×24 小时开机）；设置自动运行等，打包分享，搞定手工。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;四、使用&lt;/p&gt;

&lt;p&gt;   如果你是 WR500V 用户（或者其它 mipsel 架构的 CPU 的路由器或者高清播放机均可），可以直接用我导出的专用于 GoAgent 的 Python 包。特点：只有 JFFS 压缩后仅占用 3.5M 空间；TGZ 打包，部署后直接可用。缺点：删除了GoAgent cert 下的所有证书（实在没空间来保留这 1M 多的证书了），不知道访问那些 HTTPS 网站是否会有问题，尚未验证（似乎没遇到问题）。下面是 WR500V 用户使用的步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在 WR500V WEB 控制台-&gt;系统管理-&gt;JFFS设置，启用，格式化，得到 /jffs 空间。“挂载后执行 ”处输入“mount -o bind /jffs /opt”，以便 /opt 指向 JFFS 空间。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下载附件，上传文件 opt.tgz 到路由器上：&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;1）在 系统管理-&gt;访问设置 把 SSH 和 Telnet 访问打开（如果没打开的话）。&lt;/p&gt;

&lt;p&gt;2）用 WinSCP 等软件以 SCP 协议登陆路由，把 opt.tgz 整个压缩包传到 /tmp 目录下&lt;/p&gt;

&lt;p&gt;3）用 Putty 或 Telnet 登录到路由器，输入：&lt;/p&gt;

&lt;p&gt;cd /opt
tar -zxvf /tmp/opt.tgz。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;解压缩完成后，执行一下 /opt/goagent.autorun 看看有没有成功的信息，如果有即成功了。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改 /opt/etc/goagent/proxy.ini 中的 jeanzvpn 为你的 Google App Engine 的 App ID（为了测试你就用我的临时用一下吧，但完成后请自己申请和部署 GoAgent，切记，否则有 1G 流量限制，人多大家用的话一下就用完了）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重启路由器，万事 OK（重启后自动挂载 JFFS，绑定到 /opt，绑定后自动执行 /jffs/goagent.autorun，这个是从 Tomato USB 官网找到的自动运行的方法）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;要使用 GoAgent 翻墙，请选择下面的任意一种方式：&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;1). 设置浏览器代理为路由器地址，端口 8087;&lt;/p&gt;

&lt;p&gt;2).设置浏览器或或者 iPhone 自动代理脚本为 http://192.168.1.1:8087/goagent.pac（默认已经在 8087 端口开启 GoAgent PAC 服务，如果路由器的 IP 地址不是 192.168.1.1，请先修改 goagent.pac 的 127.0.0.1 为 路由器的地址）；&lt;/p&gt;

&lt;p&gt;3). Chrome 用户还可以用 Switchy Sharp 插件。&lt;/p&gt;

&lt;p&gt;五、后话&lt;/p&gt;

&lt;p&gt;   实际使用后用 top 命令查看 CPU 和内存占用：单个客户端普通网页浏览的话，CPU基本上 5% 以下，初始响应速度似乎不如 Windows 和 Mac OS X 的 GoAgent 快；看 YouTube 视频的话，CPU 大概会在 5~10%之间，非常流畅。没有启用 swap 空间，内存占用和稳定性完全无问题。&lt;/p&gt;

&lt;p&gt;By Yonsm
2012.04.16
感谢所有工具和参考文章作者&lt;/p&gt;

&lt;p&gt;下载：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://hdweb.googlecode.com/svn/goagent.tgz&quot;&gt;https://hdweb.googlecode.com/svn/goagent.tgz&lt;/a&gt; (2.0.2版本，&lt;strong&gt;尝试使用后请立即替换AppID&lt;/strong&gt;，未确认U2B是否可自动)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://115.com/file/c2c4nlla#GoAgent-1.8.11-On-opt.tar&quot;&gt;http://115.com/file/c2c4nlla#GoAgent-1.8.11-On-opt.tar&lt;/a&gt; （1.8.11版本，自己升级的话直接替换GA的文件即可）&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://115.com/file/e7n69oyv#&quot;&gt;http://115.com/file/e7n69oyv#&lt;/a&gt;（1.8.2 版本，已去除 logging 功能，已复用同一个线程/端口来做代理和PAC服务 ）&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://skydrive.live.com/redir.aspx?cid=d6cd6f1068e2bffd&amp;amp;resid=D6CD6F1068E2BFFD!311&amp;amp;parid=D6CD6F1068E2BFFD!116&amp;amp;authkey=!AP2H5RyjU8UdIxg&quot;&gt;From SkyDrive&lt;/a&gt; （1.8.0 版）&lt;/p&gt;

&lt;p&gt;DualWan BBS 相关讨论：&lt;a href=&quot;http://bbs.dualwan.cn/viewthread.php?tid=266521&quot;&gt;http://bbs.dualwan.cn/viewthread.php?tid=266521&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;更进一步的应用，自动转发指定网站到GA：&lt;a href=&quot;http://bbs.dualwan.cn/viewthread.php?tid=278761&quot;&gt;http://bbs.dualwan.cn/viewthread.php?tid=278761&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;iptables -t nat -I PREROUTING -i br0 -p tcp -d 12.34.56.78 --dport 80 -j REDIRECT --to-ports 8087
iptables -I INPUT -p tcp --dport 8087 -j ACCEPT&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;DNSMasQ 配置：&lt;a href=&quot;http://115.com/file/dpjlsv6j#dnsmasq.conf&quot;&gt;http://115.com/file/dpjlsv6j#dnsmasq.conf&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>[转载]逆向一条 MD5-32 大概需要多少运算能力</title>
      <link href="http://example.com/computing-power-for-reverse-md5/"/>
      <updated>2012-04-02T22:13:20+08:00</updated>
      <id>http://example.com/computing-power-for-reverse-md5</id>
      <content type="html">&lt;p&gt;起因大家都懂得，这里只是做个简单的计算，判断什么的我不会写的。
大前提是：MD5 是迄今为止没有算法上的太大漏洞，而且要求是逆向（不是寻找碰撞）。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;彩虹表有用吗？&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;在这个特定的情形下，没有。解释如下：&lt;/p&gt;

&lt;p&gt;MD5 是一种摘要散列算法，任意大小的原文都会转化为定长的密文。
彩虹表是一种预先计算的原文到密文的映射，如果密文在彩虹表的覆盖空间里，那么就可以反查到原文。而原文空间理论上无限大，完全运算并存储这些映射非常消耗资源，所以，彩虹表更多的是一种“空间时间消耗都可以接受”的算法加上数据集合。&lt;/p&gt;

&lt;p&gt;很显然，某个 MD5 运算结果不可能在常见的彩虹表覆盖空间里。
（注，一个9位以内数字组合的彩虹表大概要接近 1TB 而由于算法链式验证的原因，实际计算次数要数倍于穷举运算，参见&lt;a href=&quot;http://project-rainbowcrack.com/table.htm&quot;&gt; http://project-rainbowcrack.com/table.htm&lt;/a&gt; ）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;爆破怎么做？&lt;!-- more --&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;爆破就是拼运算力了。
手机号字段大概有 1e7 种组合，而后面还有随机字符串，不知道有多长，姑且算作 5 位吧，字母数字组合，就简化作 1e8 种组合好了。
现在假设你运气足够好，其他位全都猜对了，比如你知道要把 v2ex 逆序之类的，需要验证 1e15 次吧。
（这是一个非常简单的估算，纯粹估算下限）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;GPU 通用运算能力到底有多强？&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;最强的通用计算单元 ATI HD6990 大概运算力是 1e10 次，cpu 相对于 gpu 小太多数量级，所以可以不考虑了。
假如你能够调用 100 显卡的某超算集群，一个小时的运算力大概是 1e15 次验证。
（参见&lt;a href=&quot;http://golubev.com/gpuest.htm&quot;&gt; http://golubev.com/gpuest.htm&lt;/a&gt; ）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;一些细节&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;￥ 这个字符是 unicode 字符，而 md5 并没有针对 unicode 的特定实现。
实际的实现是先转换成 utf8/utf16/ansi 等等编码形式再进行计算。
（某些特定程序支持传入 unicode 字符串，但依旧需要内部进行编码转换）
这一条的意义是说，如果加密者的编码是 utf8 而你的运算程序是 ansi 编码，那就不用想了，永远都不会有结果。&lt;/p&gt;

&lt;p&gt;MD5 算法是 16-byte 分段，可以认为运算时间正比于原文长度，目测待解密的原文是 32-byte 左右，即实际运算能力可能要减半。&lt;/p&gt;

&lt;p&gt;（假设非常多的时候，参见&lt;a href=&quot;http://en.wikipedia.org/wiki/Occam&#39;s_razor&quot;&gt; http://en.wikipedia.org/wiki/Occam&#39;s_razor &lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;转自：&lt;a href=&quot;http://www.v2ex.com/t/29152&quot;&gt;http://www.v2ex.com/t/29152&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;点评：技术贴，有兴趣看看原文下面的评论&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>终于用上主流社会的主流博客程序了 </title>
      <link href="http://example.com/hello-world-press/"/>
      <updated>2012-03-29T18:16:59+08:00</updated>
      <id>http://example.com/hello-world-press</id>
      <content type="html">&lt;p&gt;实在受不了Bo-Blog的垃圾信息了，本来N年前就想转到WordPress，只是内容太多（500多个帖子了），转换有无数问题，一直没下定决心来。今天几经折腾，今天终于转到 Word Press 了。&lt;/p&gt;

&lt;p&gt;不过过程依然是问题一大堆，首先把1万多个用户信息丢失了，请见谅。现改为不需要注册即可留言，算是比之前方便了。其次……，再次……&lt;/p&gt;

&lt;p&gt;还好固定链接的格式和之前保持了一直，搜索引擎应该口味还好吧？&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>在 Mac OS X 中使用 GPT vs. MBR   | 启用BCM4331的Linux支持</title>
      <link href="http://example.com/using-gpt-vs-mbr-in-mac-osx/"/>
      <updated>2012-03-04T06:02:22+08:00</updated>
      <id>http://example.com/using-gpt-vs-mbr-in-mac-osx</id>
      <content type="html">&lt;p&gt;昨天差点把MacBook Pro的分区全部干掉了，折腾了一整天终于完整无损地修复了。同时搞明白了Mac系列的GPT、MBR、BootCamp分区表的林林种种。&lt;/p&gt;

&lt;p&gt;Mac 的 GPT/GUID 分区表并非纯的 GPT，而是叫做 Retained GPT或Hyrid GPT（保留/兼容/混合GPT，Paragon Partition Manager 叫法）：意即使用GPT的同时，还兼容MBR分区表。&lt;!-- more --&gt;但只能支持前面4个分区，包括EFI分区在内，非特殊情况下，分区越多越不利于空间利用，我个人习惯是少分区，所以MBR足够用了。&lt;/p&gt;

&lt;p&gt;假设我的硬盘分区是GUID分区表：EFI+MAC+WIN+LIN，这是种情况下WIN和LIN都是通过EFI转手（模拟BIOS）再启动的；此时EFI分区加载需要不少的时间，如果硬盘是MBR分区表格式则可以干掉这个分区，一样能启动Windows和Linux，这时候Windows将不再需要EFI支持了。这种情况下的优势是：1.启动速度快了不少（跳过了EFI模拟BIOS的部分）。这样做的唯一坏处就是Mac将不能再重新装了（只是不能重新安装，使用和升级没有任何问题，性能没有任何影响。如果要重新安装，可以破解OSInstall.pkg）。&lt;/p&gt;

&lt;p&gt;如果是磁盘空间金贵 MacBook Air 的用户，只想安装 Windows 的话，建议完全重新把硬盘初始化为 MBR 格式，干掉所有的分区，然后安装 Windows （不需要那个破烂 BootCamp 来支持）。&lt;/p&gt;

&lt;p&gt;顺便遐想了一下（未验证）：&lt;/p&gt;

&lt;p&gt;遐想1. 由于是Retained GPT，保留了MBR，如果安装Mac OS X完成后，编辑一下GPT的分区表标记（如果有的话，目前我不知道在哪），使Mac OS X认为不是GPT了（但在MBR中是正常的分区表）。要重新安装 Mac 的话，把GPT标记改回来，又可以无损地正常升级（当然前面GPT-&gt;MBR也无损的，省得现有用户重新初始化GUID）。&lt;/p&gt;

&lt;p&gt;遐想2. 由于Mac硬件是支持 EFI 的，Windows 7/8 也是支持 EFI 的，但大多数时候我们都是因为硬件仅支持BIOS或者没有使用GPT导致实际上Windows并非使用EFI来实际工作。如果跳过EFI模拟BIOS层，同时使用GPT的话，是不是Windows就直接通过Mac本身的EFI直接和硬件交互啦？（将完全没有BIOS这个东西存在于Windows运行过程中，这时运行性能是最高效的）。如果是，直接把 Windows 安装在 GPT 分区，然后想办法启动它（如果没有Mac分区，则应该是不需要想办法就能启动？），这样岂不是最完美（抛弃BootCamp这个破玩意）？等待验证中……&lt;/p&gt;

&lt;p&gt;顺便说一声：Ubuntu 本尊怎么越做用户体验越差啊。换了Linux Mint LXDE，终于清爽多了。MacBook Pro MC700上不支持BCM4331的WIFI，折腾了一番终于好了：http://www.ubuntubuzz.com/2011/10/macbook-pro-wireless-broadcom-bcm4331.html&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>分析 iOS 中使用 Mobile Installation 安装 IPA</title>
      <link href="http://example.com/reserve-engineering-for-mobile-installation-api/"/>
      <updated>2012-01-17T12:36:25+08:00</updated>
      <id>http://example.com/reserve-engineering-for-mobile-installation-api</id>
      <content type="html">&lt;p&gt;iOS 中要安装一个程序，从用户角度看有几种三：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;类似 Cydia 这种 DEB 的方式：直接安装到 /Applications 作为系统的APP，无法长按删除（不讨论CyDelete）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类似 UCWEB/Installous 的伪 IPA 的方式：直接解包 IPA （实际上就是 ZIP）,模拟官方 IPA 的安装方式。可以理解为黑盒测试这种只管结果的模式。这个安装方式可以说是知其表而不知其里，会有N多问题，如图标可能无法刷新、IPA无法同步回 iTunes 等问题。从这个角度说，我个人不推荐大家使用 UCWEB 下载安装 IPA，也不推荐使用 Installous。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;官方支持的 AppStore/iTunes 安装 IPA 的模式：这就是我这里要说的 Mobile Installation Framework 的方式，这是最官方、最安全、最完美的安装 IPA 的方式。目前已知、同步推/iFunBox/iFanBox/iTools都是使用这几种方式（其中 iFanBox 应该是在我和我交流之后才搞定这个：）&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Mobile Installation 是 iOS 中负责安装 IPA 的 Framework，&lt;!-- more --&gt;，通过 IDA 分析 /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS5.0.sdk/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation 可知它导出了以下 API：&lt;/p&gt;

&lt;p&gt;Name Address Ordinal&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;MobileInstallationArchive 00000F80
&lt;/em&gt;MobileInstallationBrowse 00000FE0
&lt;em&gt;MobileInstallationCheckCapabilitiesMatch 00000BE0
&lt;/em&gt;MobileInstallationCopySafeHarbors 00000CA4
&lt;em&gt;MobileInstallationInstall 00001144
&lt;/em&gt;MobileInstallationLookup 00001034
&lt;em&gt;MobileInstallationLookupArchives 00000E70
&lt;/em&gt;MobileInstallationProcessRestoredContainer 00000E10
&lt;em&gt;MobileInstallationRegisterSafeHarbor 00000D58
&lt;/em&gt;MobileInstallationRemoveArchive 00000EC0
&lt;em&gt;MobileInstallationRemoveSafeHarbor 00000CF4
&lt;/em&gt;MobileInstallationRestore 00000F20
&lt;em&gt;MobileInstallationSetDeviceCapabilities 00000C40
&lt;/em&gt;MobileInstallationUninstall 00001084
_MobileInstallationUpgrade 000010E4
__MobileInstallationRebuildMap 00000B90&lt;/p&gt;

&lt;p&gt;其中有两个 API 是非常有用的：&lt;/p&gt;

&lt;p&gt;&lt;em&gt;MobileInstallationInstall：安装 IPA
&lt;/em&gt;MobileInstallationLookup：列出已安装的 IPA&lt;/p&gt;

&lt;p&gt;直接贴 MobileInstallationInstall 分析结果了，分析过程看前面几期：）&lt;/p&gt;

&lt;p&gt;`
//
typedef int (&lt;em&gt;MobileInstallationInstall)(NSString &lt;/em&gt;path, NSDictionary &lt;em&gt;dict, void &lt;/em&gt;na, NSString &lt;em&gt;path2_equal_path_maybe_no_use);
IPAResult IPAInstall(NSString &lt;/em&gt;path)
{
    void &lt;em&gt;lib = dlopen(&quot;/System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation&quot;, RTLD_LAZY);
    if (lib)
    {
        MobileInstallationInstall pMobileInstallationInstall = (MobileInstallationInstall)dlsym(lib, &quot;MobileInstallationInstall&quot;);
        if (pMobileInstallationInstall)
        {
            NSString &lt;/em&gt;name = [@&quot;Install_&quot; stringByAppendingString:path.lastPathComponent];
            NSString* temp = [NSTemporaryDirectory() stringByAppendingPathComponent:name];
            if (![[NSFileManager defaultManager] copyItemAtPath:path toPath:temp error:nil]) return IPAResultFileNotFound;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        int ret = (IPAResult)pMobileInstallationInstall(temp, [NSDictionary dictionaryWithObject:@&quot;User&quot; forKey:@&quot;ApplicationType&quot;], 0, path);
        [[NSFileManager defaultManager] removeItemAtPath:temp error:nil];
        return ret;
    }
}
return IPAResultNoFunction;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;p&gt;补充一下，之所以要拷贝IPA是因为安装IPA后可能被删除。如果安装IPA可以删除无所谓则不需要拷贝到一个新地方。&lt;/p&gt;

&lt;p&gt;详细代码，请邮件索取 Yonsm@msn.com。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>获取普通用户 iOS 设备上的 Crash Log 的方法</title>
      <link href="http://example.com/method-of-obtaining-a-normal-crash-log-on-your-ios-device/"/>
      <updated>2012-01-16T13:49:52+08:00</updated>
      <id>http://example.com/method-of-obtaining-a-normal-crash-log-on-your-ios-device</id>
      <content type="html">&lt;p&gt;方法1：用工具直接获取 iPhone 设备上 /var/mobile/Library/Logs/CrashReporter  中的 Crash 报告文件。（Mac 下用 PhoneView/iTools/iExplorer，Windows下用、iFunBox、iTools、91助手等）。&lt;/p&gt;

&lt;p&gt;方法2：如果 iTunes 同步，则同步后Crash日志会同步到电脑上，把以下目录中的Crash提取打包即可：&lt;br/&gt;
Mac OS X：~/Library/Logs/CrashReporter/MobileDevice&lt;br/&gt;
Windows XP：C:\Documents and Settings\Application Data\Apple computer\Logs\CrashReporter&lt;br/&gt;
Windows 7/Vista: C:\Users\AppData\Roaming\Apple computer\Logs\CrashReporter/MobileDevice/&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>[转载]iPhone 開發教學 - 關於 Crash Report 和 dSYM 的使用</title>
      <link href="http://example.com/ios-crash-report-and-dsym/"/>
      <updated>2012-01-16T13:31:42+08:00</updated>
      <id>http://example.com/ios-crash-report-and-dsym</id>
      <content type="html">&lt;p&gt;前幾天玩遊戲時，看到開發者請大家把 Crash Log / Crash Report / Bug Report 寄回給他，如此一來就可以偵錯，滿好奇的便也隨意在網路上找找該怎樣使用，在此便稍作筆記，並且寫一個簡單會 crash 的程式(很少人會這樣做吧 XD)。&lt;/p&gt;

&lt;p&gt;所謂的 Crash Report 是在實體機器上，執行程式時發生 crash 時，此時 iOS 會幫忙將程式出錯的相關資訊存起來，這時候用 Xcode 的 Organizer - Devices 時，可以去點選設備，並且可以查看有哪些 report 在上頭，這時候就可以稍作觀看，但是上頭記錄的資訊是有稍微類似做過保護的，只會看到類似(這是網路上收集的資訊，但我嘗試做出的 log 好像已經轉好了？)：&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;
Thread 0 Crashed:&lt;br/&gt;
0   libSystem.B.dylib               0x35de3ad0 0x######## + ##&lt;br/&gt;
1   libSystem.B.dylib               0x35de3abe 0x######## + ##&lt;br/&gt;
2   libSystem.B.dylib               0x35de3ab2 0x######## + ##&lt;br/&gt;
3   libSystem.B.dylib               0x35dfad5e 0x######## + ##&lt;br/&gt;
4   libSystem.B.dylib               0x35de967e 0x######## + ##&lt;br/&gt;
5   libSystem.B.dylib               0x35de974c 0x######## + ##&lt;br/&gt;
6   libSystem.B.dylib               0x35d5c8e0 0x######## + ##&lt;br/&gt;
7   libSystem.B.dylib               0x35d5c798 0x######## + ##&lt;br/&gt;
8   CoreFoundation                  0x3750022c 0x######## + ##&lt;br/&gt;
9   CoreFoundation                  0x374fc206 0x######## + ##&lt;br/&gt;
10  CoreFoundation                  0x37504564 0x######## + ##&lt;br/&gt;
11  CoreFoundation                  0x37504406 0x######## + ##&lt;br/&gt;
12  Foundation                      0x351530f0 0x######## + ##&lt;br/&gt;
13  CrashTesting                    0x00002712 0x######## + ##&lt;br/&gt;
14  UIKit                           0x35924fd0 0x######## + ##&lt;br/&gt;
15  UIKit                           0x3591ea70 0x######## + ##&lt;br/&gt;
16  UIKit                           0x358d82dc 0x######## + ##&lt;br/&gt;
17  UIKit                           0x358d7b14 0x######## + ##&lt;br/&gt;
18  UIKit                           0x358d73ac 0x######## + ##&lt;br/&gt;
19  GraphicsServices                0x33e77c80 0x######## + ##&lt;br/&gt;
20  CoreFoundation                  0x3752f5c4 0x######## + ##&lt;br/&gt;
21  CoreFoundation                  0x3752f582 0x######## + ##&lt;br/&gt;
22  CoreFoundation                  0x3752182e 0x######## + ##&lt;br/&gt;
23  CoreFoundation                  0x37521504 0x######## + ##&lt;br/&gt;
24  CoreFoundation                  0x37521412 0x######## + ##&lt;br/&gt;
25  UIKit                           0x3591d54c 0x######## + ##&lt;br/&gt;
26  UIKit                           0x3591a550 0x######## + ##&lt;br/&gt;
27  CrashTesting                    0x0000266e 0x######## + ##&lt;br/&gt;
28  CrashTesting                    0x00002620 0x######## + ##&lt;br/&gt;
這時候需要使用原先編譯 app 時，在同一目錄中會產生對應的 dSYM 檔案，搭配 dwarfdump 使用才可以查詢到真正的片段程式(例如想看 line 13 的意思)：&lt;/p&gt;

&lt;h2&gt;$ dwarfdump --lookup 0x00002712 -arch armv6 CrashTesting.app.dSYM/  &lt;/h2&gt;

&lt;h2&gt;File: CrashTesting.app.dSYM/Contents/Resources/DWARF/CrashTesting (armv6)  &lt;/h2&gt;

&lt;p&gt;Looking up address: 0x0000000000002712 in .debug_info... found!&lt;/p&gt;

&lt;p&gt;0x00000132: Compile Unit: length = 0x000049b0  version = 0x0002  abbr_offset = 0x00000000  addr_size = 0x04  (next CU at 0x00004ae6)&lt;/p&gt;

&lt;p&gt;0x0000013d: TAG_compile_unit [1] *&lt;br/&gt;
            AT_producer( &quot;4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2373.6)&quot; )&lt;br/&gt;
            AT_language( DW_LANG_ObjC )&lt;br/&gt;
            AT_name( &quot;CrashTestingAppDelegate.m&quot; )&lt;br/&gt;
            AT_entry_pc( 0x000026b4 )&lt;br/&gt;
            AT_stmt_list( 0x0000006b )&lt;br/&gt;
            AT_comp_dir( &quot;/Volumes/Data/iPhoneDev/trunk/CrashTesting/CrashTesting&quot; )&lt;br/&gt;
            AT_APPLE_major_runtime_vers( 0x02 )&lt;/p&gt;

&lt;p&gt;0x00000166:     TAG_subprogram [16] *&lt;br/&gt;
                AT_sibling( {0x000001d2} )&lt;br/&gt;
                AT_name( &quot;-[CrashTestingAppDelegate application:didFinishLaunchingWithOptions:]&quot; )&lt;br/&gt;
                AT_decl_file( &quot;/Volumes/Data/iPhoneDev/trunk/CrashTesting/CrashTesting/CrashTestingAppDelegate.m&quot; )&lt;br/&gt;
                AT_decl_line( 17 )&lt;/p&gt;

&lt;p&gt;;               AT_prototyped( 0x01 )&lt;br/&gt;
                AT_type( {0x0000015b} ( BOOL ) )&lt;br/&gt;
                AT_APPLE_isa( 0x01 )&lt;br/&gt;
                AT_low_pc( 0x000026b4 )&lt;br/&gt;
                AT_high_pc( 0x00002780 )&lt;br/&gt;
                AT_frame_base( r7 )&lt;/p&gt;

&lt;p&gt;0x000001b9:         TAG_lexical_block [5] *&lt;br/&gt;
                    AT_low_pc( 0x000026c4 )&lt;br/&gt;
                    AT_high_pc( 0x00002780 )&lt;br/&gt;
Line table file: &#39;CrashTestingAppDelegate.m&#39; line 20, column 0 with start address 0x000000000000270e&lt;/p&gt;

&lt;p&gt;Looking up address: 0x0000000000002712 in .debug_frame... found!&lt;/p&gt;

&lt;p&gt;0x00000020: FDE&lt;br/&gt;
       length: 0x0000000c&lt;br/&gt;
  CIE_pointer: 0x00000000&lt;br/&gt;
   start_addr: 0x000026b4 -[CrashTestingAppDelegate application:didFinishLaunchingWithOptions:]&lt;br/&gt;
   range_size: 0x000000cc (end_addr = 0x00002780)&lt;br/&gt;
 Instructions: 0x000026b4: CFA=4294967295+4294967295&lt;/p&gt;

&lt;p&gt;因此就可以查看到 line 13 是指 CrashTestingAppDelegate.m&#39; line 20，所以就可以去那邊追查看看。&lt;/p&gt;

&lt;p&gt;以上的例子僅需建立一個 Project (此例名為 CrashTesting)，然後在 - (BOOL)application:(UIApplication &lt;em&gt;)application didFinishLaunchingWithOptions:(NSDictionary &lt;/em&gt;)launchOptions 裡頭寫一段會 crash 的程式碼(此例為 double free)：&lt;/p&gt;

&lt;p&gt;   NSString *justCrash = [[NSString alloc] initWithFormat:@&quot;CrashTesting&quot;];&lt;br/&gt;
   [justCrash release];&lt;br/&gt;
   [justCrash release];&lt;/p&gt;

&lt;p&gt;如此一來，在實機執行完並當機後，可以接上 Xcode 去 Organizer - Devices 查看：&lt;/p&gt;

&lt;p&gt;（图片省略，其实再Archive后中就能看到）&lt;/p&gt;

&lt;p&gt;而 dSYM 檔案，則是在 Xcode 編譯的地方：&lt;/p&gt;

&lt;p&gt;（图片省略，其实再Archive后中就能看到）&lt;/p&gt;

&lt;p&gt;點選後，就可以看到並且可以複製到習慣的工作目錄囉&lt;/p&gt;

&lt;p&gt;转自：http://changyy.pixnet.net/blog/post/29468695-iphone-%E9%96%8B%E7%99%BC%E6%95%99%E5%AD%B8---%E9%97%9C%E6%96%BC-crash-report-%E5%92%8C-dsym-%E7%9A%84%E4%BD%BF%E7%94%A8&lt;br/&gt;
点评：万恶的墙，翻爬才能看到&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>免费的持续集成测试服务</title>
      <link href="http://example.com/travis-ci-is-a-free-continuous-integration-test-server/"/>
      <updated>2011-11-29T00:00:00+08:00</updated>
      <id>http://example.com/travis-ci-is-a-free-continuous-integration-test-server</id>
      <content type="html">&lt;p&gt;A distributed build system for the open source community.&lt;/p&gt;</content>
    </entry>
  
    <entry>
      <title>iOS 程序逆向工程分析方法和工具介绍（GDB、IDA、ARMASM）</title>
      <link href="http://example.com/ios-reverse-engineering/"/>
      <updated>2011-10-10T09:56:47+08:00</updated>
      <id>http://example.com/ios-reverse-engineering</id>
      <content type="html">&lt;p&gt;一、简述&lt;/p&gt;

&lt;p&gt;先用自己的话给 iOS 做个介绍：iOS 是基于 ARM 处理器的 Mac OS X 的移动设备专用操作系统，可以认为是 Unix-like 的操作系统核心和 Cocoa Touch 应用层构成的一个系统架构。&lt;/p&gt;

&lt;p&gt;基于上述描述，要分析 iOS 程序，我们需要有以下基础知识：&lt;!-- more --&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ARM 汇编指令&lt;/p&gt;

&lt;p&gt;逆向工程意味着没有源代码可以参考，不得不在很低的一个 Level 去分析程序的意图，然后才能做更进一步的修改的操作。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unix-like 的系统&lt;/p&gt;

&lt;p&gt;了解 Unix-like 系统的基本知识是有必要的，如果有 *nix 上常用的 调试工具 gdb 的知识更佳。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Coacoa Touch 的开发语言 Object C&lt;/p&gt;

&lt;p&gt;AppStore 中发布的 iOS 的应用程序都是在 XCode 中使用 Object C 编写出来的，了解开发语言才能更清楚地知道原作者的意图，在一堆堆没有人性的汇编代码面前，做到“目无全牛”绝不是轻而易举能达到的。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;逆向工程中常用的思维方式和工具应用&lt;/p&gt;

&lt;p&gt;废话了，这才是本文的重点……&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;  下面内容中将会介绍到的工具包括：GDB、IDA、CeleASM、ClassDump、WinHex，基于 Mac OS X 下及其蹩脚的和稀有的工具，分析 iOS 程序的主要功能平台听应该选定在 Windows 下进行（Mac OS X下想找到对应的工具，试试看——连个拿得出手的 Hex 编辑工具都没有）。&lt;/p&gt;

&lt;p&gt;[待续]&lt;/p&gt;

&lt;p&gt;二、读懂汇编代码的意图&lt;/p&gt;

&lt;p&gt;（一）、静态分析&lt;br/&gt;
[待续]&lt;/p&gt;

&lt;p&gt;http://www.codethecode.com/projects/class-dump/&lt;br/&gt;
https://github.com/kennytm/iphone-private-frameworks&lt;br/&gt;
http://zhiwei.li/text/2011/09/iphone%E7%A7%81%E6%9C%89api%E8%B7%9F%E7%94%B5%E8%AF%9D%E7%9B%B8%E5%85%B3%E7%9A%84coretelephony/&lt;br/&gt;
http://code.google.com/p/iphone-wireless/source/browse/wiki/CoreTelephonyFunctions.wiki&lt;/p&gt;

&lt;p&gt;（二）、动态调试&lt;br/&gt;
[待续]&lt;/p&gt;

&lt;p&gt;三、修改汇编代码&lt;/p&gt;

&lt;p&gt;[待续]&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>终于学会 gdb 调试 iPhone 程序了</title>
      <link href="http://example.com/gdb-debugging-for-ios/"/>
      <updated>2011-09-16T01:20:59+08:00</updated>
      <id>http://example.com/gdb-debugging-for-ios</id>
      <content type="html">&lt;p&gt;乱摸索尝试，终于搞定了如何查看变量，分析函数调用，哈哈，分析了一下“第一个能安装IPA的IPA”，我也大概知道MobileInstallationInstall的参数了。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;R0: （NSPathStore2）&lt;br/&gt;
(gdb) p (char&lt;em&gt;)[[NSString stringWithFormat:@&quot;%@&quot;,(void&lt;/em&gt;)0x29bca0] UTF8String]&lt;br/&gt;
$21 = 0x88836a0 &quot;/var/mobile/Applications/CEE25E1D-9E40-4DC2-B539-3FE1F87A46FD/Documents/PublicStaging/Youni(有你).ipa&quot;&lt;/p&gt;

&lt;p&gt;R1:（__NSCFDictionary）&lt;br/&gt;
(gdb) p (char&lt;em&gt;)[[NSString stringWithFormat:@&quot;%@&quot;,(void&lt;/em&gt;)[0x88cf8c0 allValues]] UTF8String]&lt;br/&gt;
$22 = 0x2e1430 &quot;(\n    User\n)&quot;&lt;br/&gt;
(gdb) p (char&lt;em&gt;)[[NSString stringWithFormat:@&quot;%@&quot;,(void&lt;/em&gt;)[0x88cf8c0 allKeys]] UTF8String]&lt;br/&gt;
$23 = 0x229900 &quot;(\n    ApplicationType\n)&quot;&lt;/p&gt;

&lt;p&gt;R2=0&lt;/p&gt;

&lt;p&gt;R3=R0&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>iMac+SSD 发烧的历程——终于烧成功啦</title>
      <link href="http://example.com/imac-ssd-diy/"/>
      <updated>2011-09-10T01:03:19+08:00</updated>
      <id>http://example.com/imac-ssd-diy</id>
      <content type="html">&lt;p&gt;一、缘由 &lt;br/&gt;
两三年前就一直听说 SSD 速度多么快，但从来没有实际体验过。上个月入了一个MacBook Air，才发现原来真的是快的不行了。一直都说计算机系统的瓶颈在磁盘，果不其然。顿时萌生了在工作机器上也加SSD的想法，于是恶补各种知识：TRIM、AHCI、优化、分区对齐、测速、疑难杂症等等……。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;（提示，很长，只是流水记录而已，看着难受的话请一目十行：）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二、升级内存&lt;br/&gt;
&lt;/strong&gt;&lt;br/&gt;
主要的工作机器是 iMac 2010 21 寸的版本。原本iMac是4G内存，上个月刚刚升级为8G内存（现在好后悔，应该升级到 12G，现在想升级都白菜价，但已经没有插槽了），这次升级还有点小插曲，升级之后经常死机，送Apple指定的维修站，测试了将近一个星期才发现是内存的问题（我也真傻的，没怀疑到内存），应该是因为原配内存是1066Mhz，而我买的是KINGSTON 1333MHz的频率不匹配的原因（教训啊，想升内存的参考下）。就在感觉内存要浪费的时候，突然想，要么把 MacBook Pro MC700 上原配2x2G的三星内存换来试试，虽然也是1333Mhz的，但三星是苹果原配的，说不定没问题----装上去果然好了……&lt;br/&gt;
**&lt;/p&gt;

&lt;p&gt;三&lt;strong&gt;**、牛刀小试&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;仔细看评测，发现镁光 M4 的SSD是超强性能且价格比较实惠的，同类型超强性能的OCZ V3，将近1700。镁光M4 128G 网购 1260，不过镁光SSD在大陆似乎没有真正的行货，大公司搞的似乎不正规渠道的代理。最近镁光发布了 M4 的009版本固件，连续读取速度接近500MBps/s，真的非常爽（后面实测确实能达到这个速度，真爽！）。推荐购买128G或者更大的，因为128G的写入速度理论上是64G的两倍。&lt;/p&gt;

&lt;p&gt;经了解才知，iMac 2010 21只有两个 SATA 3Gbps 的接口（2010 27和2011的所有iMac都有3个SASTA，2011的所有iMac、MAcBook Pro Air都是 6GBps），所以只能牺牲光驱或者缘由的硬盘。我一直很反感光存储，当然是拿光驱下手。SSD到手后，网购准备好了吸盘、螺丝刀套件、3M双面胶（准备黏在机壳上），拆机，老婆在一旁休息、拍照、帮忙，偶尔欣赏地鼓励两句，那个美啊哈。结果竟然没搞定：光驱的SATA线和硬盘SATA不同，需要重新买过线，接到主板上，难啊…&lt;/p&gt;

&lt;p&gt;只好再次网购SSD线和一分二的电源线（后面的参考贴有别人的图）。但实在忍不住了，决定装装在MacBook Pro上试试，替换硬盘，很快搞定了，装好系统，MAC &amp;amp; WIN 各64G，发现MAC下不支持TRIM，Windows下不支持AHCI，分别打补丁解决（Windows 下AHCI补丁不完美，会导致不能休眠，不能访问BootCamp控制面板，不过后面这个是都是小问题，分析一下其他电脑的Bootcamp修改了什么，自己直接修改注册表就OK）。搞定TRIM和AHCI后，秒开秒启的爽感真他妈的好，实测速度，连续读取能达到470~500M，真的是超级强啊（现在主流的3.5机械硬盘，才110M的速度）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;四、重装上阵&lt;br/&gt;
&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;又等了好几天，需要的东西都到了，于是轻车熟路，拆iMac玻璃面板、显示屏，准备装上去。看到别人说最好不要拆主板，而是采用抬高主板的方法装SATA线。我死活也没搞定怎么抬高主板，没有找到光驱线在主板上的SATA口（硬盘的SATA在主板上很容易找到）。想拆下来，折腾的满头大汗，竟然拆了大部分螺丝后还拿不下来。&lt;/p&gt;

&lt;p&gt;此时突然想到，原本光驱的线之所以不能用，是因为光驱是SATA标准数据接口+非标准电源接口合并在一起，我&lt;strong&gt;用剪刀把这个合在一起的接口剪开，直接用原来光驱的SATA数据接口；电源接口则使用硬盘的，一分为二。&lt;/strong&gt;后来验证了确实可行，于是又好不容易装回主板，竟然有一个螺丝似乎不对，但实在不知道哪里错了，之后将就了（真后悔早没想到用光驱SATA，那样的不但可以少买一个SATA线，还不用拆主板差点搞死了）。看看这个，被我剪开了：&lt;br/&gt;
&lt;img src=&quot;attachment.php?fid=55&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接好所有的线，用3M双面胶封好光驱口，再把SSD黏在iMac内壳上，因为光驱SATA的线不够长，所以只好在不是最好的位置随便粘着，贼丑啊，我心里想这辈子最好也不要再拆开这个iMac了。看下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;attachment.php?fid=56&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;装回去，用移动硬盘上的 Mac OS X Lion 全新安装，很快搞定（发现Lion竟然不再支持自定义安装，所有语言和打印机驱动程序都装进去了，浪费1.xG，SSD空间啊，10+元/G）。TRIM Enabler、禁用SMS（突发运动传感器），禁用Spolight等优化，测试一下速度，只有 MacBook 上的一半左右，不愧是 3Gbps 和 6Gbps 差别啊----先天不足了----顿时羡慕起购买 iMac 2011 的朋友来……&lt;/p&gt;

&lt;p&gt;不过实际使用的体验速度依然非常快，Mac，Mac 启动大多数时候看不到风火轮。程序也是秒开。看别人解释说SSD的速度即使和机械硬盘一样的情况下，也比硬盘的速度感觉更快，因为小文件的随机存取速度比机械硬盘快得多。&lt;/p&gt;

&lt;p&gt;**五、新的问题（无光驱 Boocamp 安装 Windows）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;正要满怀希望安装 Windows 7 的时候，发现没有光驱竟然无法启动安装 Win7。之前在 Mac Book 上的时候，也没用光驱而是用移动硬盘安装 Win7。在 MacBook Air 上，用移动硬盘也能启动 PE 和 Win7 安装环境(用 rEFIt 引导的)。仔细分析了一下，BootCamp 真是他妈的F&lt;/strong&gt;K的，只要BootCamp发现内部的硬盘分区上有 Windows 分区，就无法引导到外部磁盘上的 Windows 分区，rEFIt的Q&amp;amp;A上也这样说了。无奈内部磁盘的一个NTFS分区都是我的主要数据盘，删掉是不可能的，又不想再拆了。于是尝试了各种办法，包括 dd 备份数据分区的PBR，然后写入错误的数据假装&quot;销毁&quot;这个分区（现在想想都后怕，不过还好如预期恢复了分区：），都不能启动受到外部分区。&lt;/p&gt;

&lt;p&gt;Mac 下只能修改FAT分区，虽然我也准备了FAT分区，也用dd写入了FAT引导 GRLDR 的功能，但就是无法启动（NO GRLDR都看到了，可能写入的GRUB4DOS到PBR不齐全，又没文档参考，作罢）。最后真的各种办法都尝试了（网上别人说 MacBook 也是一样的情况），大概搞了7~8个小时（0:30~4:30，9:30~14：30，这样折腾，只是为了找到使用外部移动硬盘启动非Mac OSX 的方法）。结果还是没搞定，只好又回到早就知道的最稳打稳扎的办法----虚拟机……&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;六、最终解决&lt;br/&gt;
&lt;/strong&gt;&lt;br/&gt;
以前用VMWare，这次听说Paralles Desktop 7速度很快，虽然不是为了使用虚拟机（虚拟机和TT感觉一样隔靴抓痒），权当测试一下，发现真不好用，远不如VMWare（PD速度可能更好）。新建虚拟机，引入Bootcamp磁盘，用Win7安装盘或PE启动，格式化BootCamp磁盘，BootSect修改启动记录，关闭虚拟机，重新启动电脑，进入BootCamp分区，终于能启动啦…………&lt;/p&gt;

&lt;p&gt;提示：网上都说先安装 Windows，再修改MBR，开启AHCI。这样的结果是Windows安装过程中识别的硬盘式IDE的，之后开
启ACHI感觉不妥：我在MacBook Pro上市这样的步骤，感觉Windows启动速度在&quot;Windows徽标动画&quot;时特慢，即使开启了AHCI之后没变快多少（启动速度慢，但进去之后快的）。在 iMac 上我&lt;strong&gt;先修改MBR，然后再安装Win7，安装时候已经开启AHCI，安装后&lt;/strong&gt;&quot;Windows徽标动画&quot;基本上只有2~3秒钟不到，Mac+Win 双双秒启……&lt;/p&gt;

&lt;p&gt;进入 Windows 测速，只有250M，先天不足，SATA 3G vs SATA 6G，接口啊……不过实际体验速度依然是一流的---- Windows 7 磁盘评分 7.8 (在 MacBook Pro上的时候是7.9，数据控也认可的数字了，哈哈)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;七、参考文章和工具&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;br/&gt;
&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我发的威锋贴，内涵部分工具：&lt;strong&gt;&lt;a href=&quot;http://bbs.weiphone.com/read-htm-tid-2829570.html&quot;&gt;http://bbs.weiphone.com/read-htm-tid-2829570.html&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.insanelymac.com/forum/index.php?showtopic=126089&amp;amp;hl=&quot;&gt;[HOWTO] Boot Macs with Intel Chipset in AHCI Win7 Vista XP Linux - InsanelyMac Forum&lt;/a&gt;
&lt;a href=&quot;http://bbs.weiphone.com/read-htm-tid-2409328.html&quot;&gt;09iMac历险记，加ssd焕发第二春| Mac综合讨论区 - iPhone 4 论坛|iPad 2 论坛|iPod Touch 4 论坛|Mac 论坛|我们的iPhone|期待iPhone5 - WeiPhone威锋网&lt;/a&gt;
&lt;a href=&quot;http://bbs.weiphone.com/read-htm-tid-2090369.html&quot;&gt;2011 MBP Win7下打开AHCI，完全释放SSD性能。(重新编排中。。。）| Mac综合讨论区 - iPhone 4 论坛|iPad 2 论坛|iPod Touch 4 论坛|Mac 论坛|我们的iPhone|期待iPhone5 - WeiPhone威锋网&lt;/a&gt;
&lt;a href=&quot;http://bbs.weiphone.com/read-htm-tid-2655854.html&quot;&gt;2011款iMAC 27&quot;一体机添加SSD硬盘作业-多图（813/814型）| Mac综合讨论区 - iPhone 4 论坛|iPad 2 论坛|iPod Touch 4 论坛|Mac 论坛|我们的iPhone|期待iPhone5 - WeiPhone威锋网&lt;/a&gt;
&lt;a href=&quot;http://bbs.weiphone.com/read-htm-tid-2611347.html&quot;&gt;2011新款27寸iMac低配自行更换SSD，无菊花秒开Lion，从开机到进系统18秒| Mac综合讨论区 - iPhone 4 论坛|iPad 2 论坛|iPod Touch 4 论坛|Mac 论坛|我们的iPhone|期待iPhone5 - WeiPhone威锋网&lt;/a&gt;
&lt;a href=&quot;http://bbs.weiphone.com/read-htm-tid-1467667.html&quot;&gt;8,1的imac更换ssd硬盘作业成功，发现屏幕内部进灰求解| Mac综合讨论区 - iPhone 4 论坛|iPad 2 论坛|iPod Touch 4 论坛|Mac 论坛|我们的iPhone|期待iPhone5 - WeiPhone威锋网&lt;/a&gt;
&lt;a href=&quot;http://www.ocztechnologyforum.com/forum/showthread.php?87950-Enabling-AHCI-for-Windows-on-MBP-2011-now-possible&quot;&gt;Guide Enabling AHCI for Windows on MBP 2011 now possible&lt;/a&gt;
&lt;a href=&quot;http://www.macx.cn/a/a89i1930905.htm&quot;&gt;iMac 2011 mc814改装SSD 完成，改装有难度下手需谨慎 - 【苹果网】 - MacX.cn - 苹果新闻与用户互动&lt;/a&gt;
&lt;a href=&quot;http://bbs.weiphone.com/read-htm-tid-1522225.html&quot;&gt;iMac 27 加装SSD成功！受惠于威锋，故此来报道！| Mac综合讨论区 - iPhone 4 论坛|iPad 2 论坛|iPod Touch 4 论坛|Mac 论坛|我们的iPhone|期待iPhone5 - WeiPhone威锋网&lt;/a&gt;
&lt;a href=&quot;http://bbs.pceva.com.cn/viewthread.php?tid=18789&amp;amp;highlight=iMac&quot;&gt;Intel+AMD----苹果2011款iMac全面大拆解（小心杀猫哦） - 便携电脑 - PC绝对领域---中国最专业、最真实、无水区的PC爱好者论坛 - Powered by Discuz!&lt;/a&gt;
&lt;a href=&quot;http://poller.se/2010/08/optimizing-mac-os-x-for-ssd-drives/&quot;&gt;Optimizing Mac OS X for SSD drives | Fredrik Poller&lt;/a&gt;
&lt;a href=&quot;http://bbs.weiphone.com/read-htm-tid-1461092.html&quot;&gt;受不了imac噪音了，今儿终于换了ssd，图片流程| Mac综合讨论区 - iPhone 4 论坛|iPad 2 论坛|iPod Touch 4 论坛|Mac 论坛|我们的iPhone|期待iPhone5 - WeiPhone威锋网&lt;/a&gt;
&lt;a href=&quot;http://www.91nes.cn/thread-970873-1-1.html&quot;&gt;完成SSD更换、固件升级、分区、4K对齐、TRIM、AHCI一系列工作, - Mac综合讨论区&lt;/a&gt;
&lt;a href=&quot;http://www.u2game.net/bbs/thread-29808-1-1.html&quot;&gt;在苹果的 Mac OS X 下使用 SSD固态硬盘，必要的相关系统优化设置手册 - 硬件/外设等综合讨论区 - U2Game.Net社区论坛&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;另外一篇Win7下SSD优化：http://memory.it168.com/a2011/0818/1234/000001234279.shtml
还有一个优化贴，中文的：http://www.u2game.net/bbs/thread-29808-1-1.html
RAMDisk对于SSD我感觉也是及其有效的手段。&lt;/p&gt;

&lt;h1&gt;iMac 2010 SSD vs. MacBook Pro 2011 HDD 启动速度对比（老婆随手录制的）：&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;时间就是生命，SSD就是时间！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;br/&gt;
&lt;/strong&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Windows Phone Emulator Unlocked ROM 完整版用于开发调试的方法</title>
      <link href="http://example.com/windows-phone-emulator-development/"/>
      <updated>2011-06-02T17:46:46+08:00</updated>
      <id>http://example.com/windows-phone-emulator-development</id>
      <content type="html">&lt;p&gt;Windows Phone Emulator 提供的是一个阉割版的 ROM Image（MS 就是不想 Developer好？），网上很多地方说有 unlocked 的完整版 ROM 下载。Google 一下，果然能找到&lt;!-- more --&gt;”http://forum.xda-developers.com/showthread.php?t=784523“（需翻墙下载）。&lt;/p&gt;

&lt;p&gt;刚高兴没多久，发现这个ROM几乎没法用于开发调试，因为每次启动都会非常完全Reboot，”Windows Mobile Emulator is doing a complete OS boot“，将近3分钟或者更久才能完成启动，严重影响调试的心情。&lt;/p&gt;

&lt;p&gt;几经琢磨，歪打正着，终于找到了预先Boot这个ROM的方法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;删除C:\ProgramData\Microsoft\XDE文件夹（老的Boot状态）&lt;/li&gt;
&lt;li&gt;执行msiexec /update WindowsPhoneDeveloperResources_en-US_Patch1.msp（这是个WPDT的更新包，你懂的），执行后会等很久才能完成（用任务管理器看XDE进程不在了，则完成了）&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;之后重新Boot就万事大吉了——终于可以在完整版的ROM里面调试程序了。&lt;/p&gt;

&lt;p&gt;另外，刚刚发现 VS2011可以直接打开 WP 的工程文件，但VS2011里面不能创建WP工程（看readme，似乎同样语言的版本似乎可以？）。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>[转载]导入通讯录到 iPhone Simulator</title>
      <link href="http://example.com/import-contacts-to-iphone-simulator/"/>
      <updated>2011-05-13T03:52:49+08:00</updated>
      <id>http://example.com/import-contacts-to-iphone-simulator</id>
      <content type="html">&lt;p&gt;Using your own address book in the iPhone Simulator&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;
Jailbroken iPhone with OpenSSH:&lt;/p&gt;

&lt;p&gt;scp mobile@192.168.1.10:~/Library/AddressBook/* ~/Library/Application\ Support/iPhone\ Simulator/User/Library/AddressBook&lt;/p&gt;

&lt;p&gt;Non-jailbroken iPhone:&lt;/p&gt;

&lt;h1&gt;!/bin/bash&lt;/h1&gt;

&lt;p&gt;cd ~/Library/Application\ Support/MobileSync/Backup&lt;br/&gt;
backup=&lt;code&gt;ls -t1 | sed -n &#39;1p&#39;&lt;/code&gt; # most recent backup&lt;br/&gt;
for f in &quot;$backup&quot;/*.mdinfo; do&lt;br/&gt;
   grep -q &quot;Library/AddressBook/AddressBook.sqlitedb&quot; $f&lt;br/&gt;
   if [ $? -eq 0 ]; then&lt;br/&gt;
       addressbook=&lt;code&gt;basename $f .mdinfo&lt;/code&gt;&lt;br/&gt;
       cp -v &quot;&lt;code&gt;pwd&lt;/code&gt;/$backup/$addressbook.mddata&quot; ~/Library/Application\ Support/iPhone\ Simulator/User/Library/AddressBook/AddressBook.sqlitedb&lt;br/&gt;
       exit $?&lt;br/&gt;
   fi&lt;br/&gt;
done&lt;/p&gt;

&lt;p&gt;echo &quot;Address Book not found in iPhone backup&quot; &gt;&amp;amp;2&lt;br/&gt;
exit 1&lt;/p&gt;

&lt;p&gt;转自：http://0xced.blogspot.com/2009/01/using-your-own-address-book-in-iphone.html&lt;br/&gt;
修正：新版本（如iOS SDK 4.3.2）的通讯录数据在~/Library/Application\ Support/iPhone\ Simulator/4.3.2/Library/AddressBook中，而不是User目录。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Go Go Go & A Tutorial for the Go Programming Language</title>
      <link href="http://example.com/tutorial-for-the-go-programming-language/"/>
      <updated>2011-05-12T17:21:40+08:00</updated>
      <id>http://example.com/tutorial-for-the-go-programming-language</id>
      <content type="html">&lt;p&gt;Go Go Go，http://golang.org/doc/go_tutorial.html，看了一下貌似好酷⋯⋯&lt;/p&gt;

&lt;p&gt;Unix-like 的东西，速度啥没得说，就 TMD 命名超级恶心，一看 Hello World 就不爽，format简写成 fmt 怎么说都没什么好挑剔的，但不明白为什么 PrintLine 要写成 Println，不伦不类，P为何大写，l为何小些，Line 这么几个字母简写成 ln 有很大意义？没有！反而更多 puzzle 和增加了阅读的障碍。而且现代变编辑器基本上都有很强大的自动补全功能，不差这么几个字母的输入时间。&lt;/p&gt;

&lt;p&gt;和Uni-like的风格完全相反地，Apple 的 CoreFoundation 和 Cocoa 的命名风格基本上是超级长，搞得好像日常书写的英文句子，语义上来说，Apple风格的命名是最亲近人类语言的命名方式。但TMD输入好繁琐（太长了，虽然能补全），另外满屏幕都是代码，阅读效率不是太高（可评议）。&lt;/p&gt;

&lt;p&gt;总的来说，还是 Microsoft 风格的最让人喜欢，虽然我已经至少1+年没写过 Windows 平台的代码了⋯⋯&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;Windows Phone 7 尝试中⋯⋯&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>[转载]Changing the headers for UIWebKit HTTP requests - Method Swizzling</title>
      <link href="http://example.com/changing-the-headers-for-uiwebkit-http-request/"/>
      <updated>2011-05-11T06:12:03+08:00</updated>
      <id>http://example.com/changing-the-headers-for-uiwebkit-http-request</id>
      <content type="html">&lt;p&gt;I was asked several times, in which way the “User-Agent” header can be modified for the HTTP requests that are initiated from within the UIWebView object. iCabMobile is doing this, and also some other iPhone Apps, but the UIWebView API doesn’t provide anything which allows to modify the “User-Agent” information or any other HTTP header.&lt;/p&gt;

&lt;p&gt;When you load a web page from the internet through UIWebView, you can provide a delegate which is called for each web page that is loaded. And in the method “webView:shouldStartLoadWithRequest:navigationType:” of the delegate, you’ll even get an NSURLRequest object you can look at, but unfortunately you can not modify this object. So there’s no way to change the default “User-Agent” information that is sent to the server, nor can you modify any other data.&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;When you’re loading data from the internet outside of UIWebView, you would probably use the NSURLConnection class. In this case you would create an NSURLRequest object (or the mutable counterpart NSMutableURLRequest) with all the HTTP headers for the request yourself (using the method “setValue:forHTTPHeaderField:”). You have full control over all of the HTTP headers you want to send to the server, including the “User-Agent” information.&lt;/p&gt;

&lt;p&gt;When we assume that the UIWebView object will internally also use NSURLRequest or NSMutableURLRequest to create a HTTP request before this request is passed to the networking classes like NSURLConnection, we need a way to subclass or overwrite the method “setValue:forHTTPHeaderField:” of the NSMutableURLRequest class. Then we would be able to check for each HTTP header that is set for a NSMutableURLRequest, if this is the “User-Agent” header and if it is, we can modify it.&lt;/p&gt;

&lt;p&gt;The only problem is that we can’t overwrite or subclass the NSMutableURLRequest class and force UIWebView to use our subclass instead of the original class. But iPhone Apps are written in Objective C and this programming language does allow exchanging and modifying classes, methods, variables etc. at runtime any time. So we can tell the Objective C runtime system that each time the method “setValue:forHTTPHeaderField:” of the “NSMutableURLRequest” class is called, our own method is called instead. This way it doesn’t matter that UIWebView will never call our method directly. Exchanging methods is called “Method Swizzling” and you can learn more about it on the CocoaDev page.&lt;/p&gt;

&lt;p&gt;The method swizzling is very powerful, but it can be also very dangerous if you don’t know what you’re doing. So be very careful.&lt;/p&gt;

&lt;p&gt;Now to the sources. I’ve implemented the method swizzling as a category of NSObject, so you can use it for all classes very easy (but as I said above, be careful, don’t use it if there are other options).&lt;/p&gt;

&lt;p&gt;MethodSwizzling.h:&lt;/p&gt;

&lt;p&gt;@interface NSObject (Swizzle)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(BOOL)swizzleMethod:(SEL)origSelector withMethod:(SEL)newSelector;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;@end&lt;/p&gt;

&lt;p&gt;MethodSwizzling.m:&lt;/p&gt;

&lt;h1&gt;import &quot;MethodSwizzling.h&quot;&lt;/h1&gt;

&lt;p&gt;@implementation NSObject (Swizzle)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;(BOOL)swizzleMethod:(SEL)origSelector withMethod:(SEL)newSelector&lt;br/&gt;
{&lt;br/&gt;
 Method origMethod = class_getInstanceMethod(self, origSelector);&lt;br/&gt;
 Method newMethod = class_getInstanceMethod(self, newSelector);&lt;/p&gt;

&lt;p&gt; if (origMethod &amp;amp;&amp;amp; newMethod) {&lt;br/&gt;
     if (class_addMethod(self, origSelector, method_getImplementation(newMethod), method_getTypeEncoding(newMethod))) {&lt;br/&gt;
         class_replaceMethod(self, newSelector, method_getImplementation(origMethod), method_getTypeEncoding(origMethod));&lt;br/&gt;
     } else {&lt;br/&gt;
         method_exchangeImplementations(origMethod, newMethod);&lt;br/&gt;
     }&lt;br/&gt;
     return YES;&lt;br/&gt;
 }&lt;br/&gt;
 return NO;&lt;br/&gt;
}&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;@end&lt;/p&gt;

&lt;p&gt;You can call “swizzleMethod:” for an object, passing in the selectors of the original and the new replacement methods. If the “swizzleMethod:” method returns with the result YES, each call of the original method will then call the replacement method and each call of the replacement method will call the original method. So within your replacement method you can still call the original method.&lt;/p&gt;

&lt;p&gt;Here’s the implementation of the new replacement method for the NSMutableURLRequest class:&lt;/p&gt;

&lt;p&gt;MyMutableURLRequest.h:&lt;/p&gt;

&lt;p&gt;@interface NSMutableURLRequest (MyMutableURLRequest)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(void)setupUserAgentOverwrite;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;@end&lt;/p&gt;

&lt;p&gt;MyMutableURLRequest.m:&lt;/p&gt;

&lt;h1&gt;import &quot;MyMutableURLRequest.h&quot;&lt;/h1&gt;

&lt;h1&gt;import &quot;MethodSwizzling.h&quot;&lt;/h1&gt;

&lt;p&gt;@implementation NSMutableURLRequest (MyMutableURLRequest)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;(void)newSetValue:(NSString &lt;em&gt;)value forHTTPHeaderField:(NSString &lt;/em&gt;)field;&lt;br/&gt;
{&lt;br/&gt;
 if ([field isEqualToString:@&quot;User-Agent&quot;]) {&lt;br/&gt;
     value = @&quot;The new User-Agent string&quot;;&lt;br/&gt;
 }&lt;br/&gt;
 [self newSetValue:value forHTTPHeaderField:field];&lt;br/&gt;
}&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(void)setupUserAgentOverwrite&lt;br/&gt;
{&lt;br/&gt;
 [self swizzleMethod:@selector(setValue:forHTTPHeaderField:)&lt;br/&gt;
         withMethod:@selector(newSetValue:forHTTPHeaderField:)];&lt;br/&gt;
}&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;@end&lt;/p&gt;

&lt;p&gt;This new method is implemented as a category, we don’t need to subclass. The replacement method for “setValue:forHTTPHeaderField:” is called “newSetValue:forHTTPHeaderField:” and it is simply checking if the “field” variable is equal to “User-Agent”. If it is, the value is modified. Afterwards the original method is called.&lt;br/&gt;
Please note: because the method swizzling exchanges the original and replacement methods, we have to call “newSetValue:forHTTPHeaderField:” to call the original method “setValue:forHTTPHeaderField:”. This looks confusing, but this is the way you can give control back to the original method.&lt;/p&gt;

&lt;p&gt;The method “setupUserAgentOverwrite” has to be called once after the App is launched (for example in the Application delegate in the “applicationDidFinishLaunching:” method, or even in “main()”).&lt;/p&gt;

&lt;p&gt;  [NSMutableURLRequest setupUserAgentOverwrite];&lt;br/&gt;
This should be done before any UIWebView objects are created to make sure that the “User-Agent” is modified for all requests.&lt;/p&gt;

&lt;p&gt;You can also use this approach when you need to modify other HTTP headers.&lt;/p&gt;

&lt;p&gt;转自：http://www.icab.de/blog/2010/04/07/changing-the-headers-for-uiwebkit-http-requests/&lt;br/&gt;
点评：就是Windows下常说的API Hook类似的东西。可能无法通过AppStore的审核。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>CeleDial for iPhone - 不需要越狱也能使用智能拨号了</title>
      <link href="http://example.com/celedial/"/>
      <updated>2011-05-07T22:43:11+08:00</updated>
      <id>http://example.com/celedial</id>
      <content type="html">&lt;p&gt;一、简介&lt;/p&gt;

&lt;p&gt;CeleDial 是方便快捷的的智能拨号助手，可以帮助您快速地找到需要的联系人。提供类似 iPhone 拨号程序的数字/字母拨号界面（支持换肤），不改变既有习惯，简单易用，真正做到『想到即找到，随手可呼叫』。&lt;/p&gt;

&lt;p&gt;二、功能&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;支持各种自然思维的方式查找联系人，在数字/字母拨号界面上输入姓名拼音、简拼、混拼或电话号码的部分或全部，想到就能立即找到。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt; 以『诸葛亮（电话：1860588xxxx）&quot;为例，您可以通过拼音（ZhuGeLiang）、简拼（ZGL）、混拼（ZGLiang）或电话号码（18605...）找到该联系人。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;支持号码归属地查询功能（默认仅在长按菜单、陌生号码或者当输入号码不在联系人列表时，才显示归属地信息。如果要强制开启查询归属地功能，可以在设置中『输入号码个数』中，输入一个数字，如『3』）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内置支持简体拼音、通用拼音、注音符号方式搜索联系人。如果选择注音符号搜索方式，会自动显示注音符号拨号界面。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持仅显示特定联系人分组；&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;联系人助手功能（注意：风险自负，仅供完美主义者或强迫症专用！！！：）。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt; 1). 在多个 Google、iCloud、Hotmail 账户之间同步联系人：使用之前在系统设置中添加多个联系人账户；然后在 CeleDial 设置中，点击所有联系人群组，在下面展开的单个联系人账号的右侧点击，有弹出菜单可以操作。目前仅支持单向同步。&lt;/p&gt;

&lt;p&gt; 2). 电话号码批量添加国家区号（如+86）：8个数字以上的才会添加，区号是根据区域设置来的，中国+86，已经有+或00开头的，不会添加。会自动删除『-』和『 』（空格）。&lt;/p&gt;

&lt;p&gt; 3). 批量删除国家区号（如 +86）。&lt;/p&gt;

&lt;p&gt; 4). 批量合并姓氏和名字。&lt;/p&gt;

&lt;p&gt; 5). 批量拆分姓氏和名字（仅拆分 2、3、4 个非英文字母的姓名，或者带空格的英文姓名，拆分和合并可以轮着用，整理得更透彻）。&lt;/p&gt;

&lt;p&gt; 6). 把未分组的联系人添加到『未分组』中（以便整理）：仅支持 CardDAV/Local/iCloud 账户（推荐iCloud分组，可以同步到 iCloud上来管理分组）。Exchange不支持分组，iOS的设计如此。Google 已经支持 CardDAV，但Google 竟然不支持同步分组（不过跟 CeleDial 没关系）。&lt;/p&gt;

&lt;p&gt; iOS SDK 不支持读取联系人账户的名称，只能读取类型。iCloud 类型的联系人账户，实际上也是 CardDAV，所以没法很好地来标识联系人来源。再次提请注意：请确认操作不会造成联系人数据丢失！！最好是在 iPhone 中，关闭掉网络，使用后，检查一下联系人没问题，再打开网络同步到网上。&lt;/p&gt;

&lt;p&gt;三、保证&lt;/p&gt;

&lt;p&gt;CeleDial 曾经是 Pocket PC 上必备的智能拨号实用工具，自 2005 年开始一直只专注于联系人号码查找体验，未加入任何网络功能。iPhone 版本除了关于界面上的几个在线信息网页外，不会进行任何网络连接，更不会上传联系人或泄露个人隐私，请放心使用。&lt;/p&gt;

&lt;p&gt;四、局限&lt;/p&gt;

&lt;p&gt;由于 iPhone 系统设计的限制，本程序和其它所有 AppStore 中提供的程序一样，有以下局限性:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;无法获取系统的通话记录;&lt;/li&gt;
&lt;li&gt;呼叫前需要确认，或者通话结束后无法自动返回本程序(可在设置中选择何种方式);&lt;/li&gt;
&lt;li&gt;无法截获或者修改通话过程，因此来电号码归属地自动查询、接通提醒、电话防火墙等功能无法实现。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;如果由此造成任何不便，请谅解。欢迎给我们评分，或反馈意见和建议。&lt;/p&gt;

&lt;p&gt;官方网站：&lt;a href=&quot;http://www.celedial.com&quot;&gt;http://www.celedial.com&lt;/a&gt;
AppStore：&lt;a href=&quot;http://itunes.apple.com/cn/app/id434119998&quot;&gt;http://itunes.apple.com/cn/app/id434119998&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;“已经到AppStore中国区所有免费软件的第7名了”——过期了，是曾经：）&lt;/p&gt;

&lt;p&gt;WeiPhone帖子：&lt;a href=&quot;http://bbs.weiphone.com/read.php?tid=2124799&quot;&gt;http://bbs.weiphone.com/read.php?tid=2124799&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;新浪微博上的 CeleDial 话题：&lt;a href=&quot;http://t.sina.com.cn/k/celedial&quot;&gt;http://t.sina.com.cn/k/celedial&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>[转载]为什么开发人员不能估算时间？</title>
      <link href="http://example.com/why-developers-cant-estimate-time/"/>
      <updated>2011-05-06T16:20:46+08:00</updated>
      <id>http://example.com/why-developers-cant-estimate-time</id>
      <content type="html">&lt;p&gt;Ashley Moran 是一名软件开发人员，最近在其关注的邮件列表中看到了一些有趣的观点，所以他做出了相应回应。（以下是全文）一些有趣的观点出现在我所关注的邮件列表中。下面是其中的一些。原始评论将以蓝色字体显示，下面是我的回应。这不是对相关问题的彻底看法，只是我所想到的一些相关的回应。注：我已加以编辑，以改善流程（flow），并加以阐述。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;在软件开发中，我们不能对任何单独的任务作出时间的估算，是由于工作性质是创造新知识。&lt;/p&gt;

&lt;p&gt;　　软件开发的目标是实现流程（Process）自动化。只要一个流程实现了自动化，便可以针对大多数情况在可预期的时间内反复运行。源代码就好像生产蓝 图，而电脑就好像生产工厂，输入（数据）好像原材料，输入（数据）就像制成品。而使用另一种类比，星巴克可以重复迅速地制作咖啡的原因就在于他们花费很多 时间在流程的设计上，使得该流程成为了一个复杂且昂贵的作业。星巴克的个人经营者不必再去重新研究该流程，只需买下此蓝图便可。我会让各位读者练习推断我 对COSTA咖啡制作过程的意见。&lt;/p&gt;

&lt;p&gt;　　事实上，不可预期的开发时间并不总是坏事，因为它所带来的价值也是如此。一款成功的软件可以制造或节省的价值远超过其成本。Tom DeMarco之所以赞成关注高成本项目，正是基于这个原因。能注意到这点，需要一种价值增长的理念，而不是广泛而又普遍的成本控制理念。这是很重要的问 题。&lt;/p&gt;

&lt;p&gt;　　目前为止，Don Reinertsen的《Principles of Product Development Flow / 产品开发流程原理》，是我所看过的对可变性与为价值而开发的最好解释，该原理在日常流程管理中大量使用PatchSpace Bible。我所说的“目前为止最好的”是指超越我所看过的其他解释一个档次，不包括约束理论（Theory of Constraints）的著作。&lt;/p&gt;

&lt;p&gt;　　这就是我的最近开发项目的数据。直方图中的R表示5个小时的量：横轴表示的是User Case 的持续时间——0-5小时，5-10小时，等等；纵轴表示的是占此时续时间的User Case数量。我以90分钟为间隔，工作并将其记录在Wave上，这样我们就能清楚地知道任务持续时间。&lt;/p&gt;

&lt;p&gt;　　我们这么做既为了与客户沟通，又为了账单。结果是：我们的开发时间的可预知程度跟放射性衰变一样，但却是始终如一的辐射。可估计的相关数据少得可怜，我拒绝估计个别任务的的时间，因为这会产生误导，但是我们有足够数据进行合计。&lt;/p&gt;

&lt;p&gt;　　经验法则：接受开发人员的估算意见，但是要在两倍的基础上再加一点时间&lt;/p&gt;

&lt;p&gt;　　两倍加一点法则很有趣。经理开始运用此法则时，多长时间他会提前完成一次？我们通常太过注重超支。如果一个团队未能提前完成任务的一半。他就要增加估 计时间，这意味着拿开发周期与项目进度做交易。周期往往比可预测性更重要，因为它意味着更早地进入市场。同样看看Reinertsen的作品，数字会以与 数量级不同的规律出现。&lt;/p&gt;

&lt;p&gt;　　并且，这是关键链（Critical Chain）项目管理的基础，这会将项目估计时间二等分，把剩余时间（添补单独项目）放在最后，作为“项目缓冲时间”。这就意味着帕金森定律不会导致单独 任务无规律地扩张。尽管我不觉得关键链是软件行业的一个合适的方法，但作为开发工作的内容，它可作为反馈与学习提高的工具，可明显改善计划。&lt;/p&gt;

&lt;p&gt;　　通常人们只是估计时间&lt;/p&gt;

&lt;p&gt;　　不仅开发人员估计不好。每个人都会遇到临场发挥（即兴应付）的问题，因为那是他们没从未做过的事，所以在完成之前，他们无法准确地作出判断。&lt;/p&gt;

&lt;p&gt;　　作为一个群体，我们应避免这一点。不知道就是不知道，一定要说出来。相比于无法估计，那些能够定期了解任务进度，从而意识到风险（并选择继续投资）的 客户，会给予团队更多的信任。这是事实！我是认真的，不用只相信我的话，看看David Anderson的《Kanban》一书吧。&lt;/p&gt;

&lt;p&gt;　　估算是一个很重要的技能，应该在初级开发人员中广泛教学&lt;/p&gt;

&lt;p&gt;　　我提出了一个替换方案：我们需要教给初级开发人员的是完成的意义。如果估计问题已经够糟糕了，在一些不确定的点找出未完成的某些东西（也许是匆忙地兑 现承诺…我的意思是估计判断！）不仅会打乱时间的估计，还会打乱所进行的工作的日程。这是常有的事，并且会给一个开发团队的地位造成重大损失。&lt;/p&gt;

&lt;p&gt;　　译文出处：伯乐在线 - 职场博客 - 程序员&lt;br/&gt;
　　译文链接：http://www.jobbole.com/entry.php/689&lt;br/&gt;
　　原文：Ashley Moran　　文章推荐：关关　　翻译：伯乐在线 敏捷翻译 - 高志翔&lt;/p&gt;

&lt;p&gt;转自：http://www.cnbeta.com/articles/141947.htm&lt;br/&gt;
点评：在理。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>安装 Windows Phone Developer Tool 的步骤</title>
      <link href="http://example.com/installation-steps-for-windows-phone-developer-tool/"/>
      <updated>2011-05-04T07:58:12+08:00</updated>
      <id>http://example.com/installation-steps-for-windows-phone-developer-tool</id>
      <content type="html">&lt;p&gt;如果本机没有安装 Visual Studio 2010，则很简单，不用担心冲突等问题（直接下载Windows Phone 7 Developer Tool，然后安装一个 Update 即可（支持复制粘贴等功能）——看下面2、3两步即可）。如果有 VS2010要仔细了：&lt;!-- more --&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;安装 VS2010&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装 WPDT：http://www.microsoft.com/downloads/en/details.aspx?FamilyID=04704acf-a63a-4f97-952c-8b51b34b00ce&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装 Fix：http://www.microsoft.com/downloads/en/details.aspx?FamilyID=49b9d0c5-6597-4313-912a-f0cca9c7d277&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;安装 VS2010的 SP1&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;如果已经安装过 VS2010的SP1，则从2步开始，然后3，然后4 SP1要重新装一遍。&lt;br/&gt;
另有一点需要注意，VS2010的SP1可以卸载，但一旦卸载则无法重新安装，只能把VS2010一起卸载后重头来（我就是吃亏了一下，结果全盘重来，耗时⋯⋯）。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>WeBe++ 1.1-6汉化破解版——直接把iPhone做成蓝牙键鼠（触摸板）</title>
      <link href="http://example.com/webe-iphone-bluetooth-mouse/"/>
      <updated>2011-04-23T10:42:13+08:00</updated>
      <id>http://example.com/webe-iphone-bluetooth-mouse</id>
      <content type="html">&lt;p&gt;以前WM的时候有类似的软件，直接把手机做成蓝牙HID设备（蓝牙键盘鼠标之类的）。直接支持蓝牙 HID 设备的协议，不是模拟，是真正的蓝牙  HID。PC或者Mac（或者PSP等其他支持蓝牙HID的其他设备）不需要装任何服务端（当然，必须支持蓝牙HID协议）。&lt;/p&gt;

&lt;p&gt;iPhone中一直在找这种软件，一直没找到，绝大多数的控制PC的程序都需要服务端——要服务端我及其不喜欢，靠！直接支持蓝牙HID多好，零代价（本来就用蓝牙鼠标等蓝牙设备）。&lt;/p&gt;

&lt;p&gt;找啊找，终于找到一个，WeBe++，这个介绍非常少（他的同门弟弟WeBe倒是不少介绍，需要服务端的遥控软件），好不容易翻墙搞到最新的 1.1-6 的破解版，尝试了一下，非常棒，感觉汉化了。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;功能：把 iPhone /iPod Touch 做成蓝牙HID，更准确说是蓝牙触摸板，具有蓝牙鼠标和蓝牙键盘双重功能。&lt;br/&gt;
用途：在客厅中，用蓝牙鼠标其实很不方便，因为没有支撑处（茶几一般都比较矮，而且杯具、洗具之类的比较多）。此时，使用iPhone来操作HTPC或者其他设备就非常爽了——就是一个蓝牙键鼠、爱控制PC、Mac、PSP, MCE、XMBC、FrontRow、Keynote、PowerPoint什么的，随便，哈哈。&lt;/p&gt;

&lt;p&gt;软件下载（包含原版、汉化和说明图片，注意看图片中的说明）：&lt;br/&gt;
&lt;a href=&quot;/assets/WeBe++_1.1-6_Crack_CHS.zip&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;有图有真相（注意看图片中的说明）：&lt;br/&gt;
&lt;a href=&quot;/assets/1303469168_7035595c.png&quot;&gt;&lt;img src=&quot;/assets/1303469168_7035595c.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;推荐 http://apt.178.com 把这个给收了，顺便更新一下178里面的BT Stack，太老了。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>汉字码表</title>
      <link href="http://example.com/chinese-character-code-table/"/>
      <updated>2011-03-26T10:04:41+08:00</updated>
      <id>http://example.com/chinese-character-code-table</id>
      <content type="html">&lt;p&gt;刚整理的汉字码表，包括以下编码：&lt;/p&gt;

&lt;p&gt;倉吉碼.txt&lt;br/&gt;
嘸蝦米.txt&lt;br/&gt;
汉字笔划.txt&lt;br/&gt;
汉语拼音.txt&lt;br/&gt;
注音符號.txt&lt;br/&gt;
通用拼音.txt&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;
转载或使用请注明出处：&lt;br/&gt;
&lt;a href=&quot;/assets/1301047407_7597ce4b.rar&quot;&gt;CodeChar.rar&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>终于用上 Xcode 4 了，太棒了</title>
      <link href="http://example.com/xcode4-released/"/>
      <updated>2011-03-17T03:39:35+08:00</updated>
      <id>http://example.com/xcode4-released</id>
      <content type="html">&lt;p&gt;Xcode 一直是 Mac 下开发的软肋，编辑 IDE 和 Debugger 都非常他妈的垃圾，半年多前就看到 Xcode 4 的预览版的介绍，改进了非常非常多。昨天终于把新的正式版本的 Xcode 4.0+iOS SDK 4.3下载下来安装上，太棒了！&lt;/p&gt;

&lt;p&gt;整个开发环境的设计有了非常大的改进，针对 iOS 的开发也有了更好的支持（Project&amp;Target; Setting精简多了）。Editor、Debugger、Organizer、SCM（整合进入了Organizer） 都有很好的改进，哈哈……&lt;/p&gt;

&lt;p&gt;有需要的快去下载吧，这次真的是“革命性”的：）&lt;/p&gt;

&lt;p&gt;http://developer.apple.com/xcode/index.php&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>BootCamp 分两个 Windows 分区的完美方案</title>
      <link href="http://example.com/two-windows-partition-solution-on-bootcamp/"/>
      <updated>2011-01-14T17:27:07+08:00</updated>
      <id>http://example.com/two-windows-partition-solution-on-bootcamp</id>
      <content type="html">&lt;p&gt;一个 Windows 分区的文件管理方式非常别扭，主要是长久以来习惯了数据和程序分开的使用方式。这也要怪 Windows 这种不稳定的系统──在Windows下用不了多久就感觉系统程序和数据放在一起有点心虚，在 Mac 下一个分区使用到现在从没想过要重装系统之类的……&lt;/p&gt;

&lt;p&gt;Boot Camp 助理仅支持一个 Windows 分区。网上找着方案，说得神乎奇乎，貌似都要删除那个200M的或者其他超复杂、超难度的不完美方案。我试着搞了一下，嘿，竟然很简单就搞定了一个很完美的方案：&lt;!-- more --&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Mac 下用 Boot Camp 助理分出一个 Windows 分区（容量为之后期待的两个 Windows 分区的总大小）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用 Mac OS X 光盘启动，使用磁盘工具，把刚才的 Windows 分区抹掉，搞成 Mac OS X 扩展日志分区格式（为了能进行步骤3）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在磁盘工具中选定磁盘（而不是分区），点击右侧的“分区”页面，然后点击刚才抹掉的 Windows 分区，点击 + 号，变成两个分区。注意调整好你需要的大小。（比如第一个分区 40G，第二个分区200G） 经过步骤三，会有两个Mac OS X扩展日志分区。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;4.在磁盘工具中，把上面所说ode两个分区抹掉，成为 exFAT 格式。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;重新启动，按住 Option 键，出现系统启动选择界面的时候，按F12或者弹出光盘键推出 Mac OSX 光盘，再放入 Windows 7 光盘（注意 GUID 文件系统，XP可能不能认，现在还想在 Mac 上安装 XP + IE6 的人，下回还投胎到中国吧）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows 7 安装的过程中，记得把刚才的两个 exFAT 分区格式化成 NTFS 分区（当然，你也可以用多个NTFS分区+FAT分区）。（同6，现在还不用NTFS来装 Windows 的人，也……那个吧）&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;(实际上不建议用光盘安装系统，超级慢，妈的。建议用小型 PE （如我的 REBOOT 光盘）启动，然后用 GIMAGEX 之类的，把移动硬盘上的 Win7光盘中的 sources\install.wim 直接释放到C:\上去安装，速度快非常多。（这点技巧不仅适用与iMac上安装Windows，所有PC均如此）。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;顺利安装完成。赶紧放入 OS X 光盘到 Windows 中安装 Boot Camp 吧（然后到Apple升级到 Boot Camp 3.2）&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;(iMac 如果是 ATI 的显卡，安装 Windows 7的时候，第一次重新启动后会黑屏。解决方法是用 PE 光盘或者  Windows 7 光盘启动进入命令行提示符模式，把 ATI 的垃圾驱动删除掉（C:\Windows\System32\Drivers\ati***.sys），重启继续即可。&lt;br/&gt;
)&lt;/p&gt;

&lt;p&gt;我打字真厉害啊，瞬间一片文章跃然屏上……&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>杭州数字电视 CAM 卡接收方案小结</title>
      <link href="http://example.com/cam-card-in-hangzhou/"/>
      <updated>2011-01-11T08:41:29+08:00</updated>
      <id>http://example.com/cam-card-in-hangzhou</id>
      <content type="html">&lt;p&gt;买了个机卡分离的 LG42LE5300，支持CAM卡替换机顶盒的有线电视接收方案。实际整下来，非常完美，有杭州的朋友可以参考一下，小结如下：&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;一、 准备&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;电视机：LG42LE5300，京东买的，5799元，比国美苏宁便宜1200+&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务：到华数数字电视营业厅开通数字电视功能，21元/月。&lt;strong&gt;注意，选择最便宜的即可，现在CAM卡不支持什么乱七八糟的功能之类的。&lt;/strong&gt;&lt;em&gt;杭州的数字电视的运营公司是有Z～F的黑幕背景（隆）断公司，非要买他们的机顶盒，我说我愿意出钱买，但不要那他们的货（因为停机的时候要还他们的）──我根本用不着。但就是不行，最后只好拿回家给他们保管着，说不准哪年还得把他们的垃圾还给他们。&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CAM卡：各地不同，据说北京和广州在购买LG的机卡分离的电视的时候，可以免费送一个。杭州的只能自己去华数的营业厅购买，285元一个，是大唐国微的（带了某字头的，没一个好东西，你懂的），没有包装，没有售后，没有人指导安装的，网上关于杭州的参考经验文章也几乎没有，只好全凭自己琢磨搞定（这就是我记录这个的原因，供参考）。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;二、步骤&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;先用官方的安装师傅来安装好数字电视机顶盒，确定没问题后，等他们走人。立即拆掉机顶盒（N根线：网线、TV线、电源线、AV线3根……）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;插入CAM卡（就是 PCMCIA接口的卡，内含银行卡一样大小的身份认证卡一张，用来收钱的），开电视机，自动搜台，搞定（两根线：一跟电源线、一跟信号线连接电视的Cable In和华数的信号来源）。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;靠，就这么简单。&lt;/p&gt;

&lt;p&gt;三、结果&lt;/p&gt;

&lt;p&gt;能收到 180+ 个数字电视节目，其中 80 个台是加密收费的。其他能看的台正好100个，我编辑调整好节目单如下：&lt;/p&gt;

&lt;p&gt;01~10：正好10个高清电视台（CAM卡竟然支持高清频道，很爽，央视两个高清台，还有8个高清卫视台。分辨率是1080i+杜比音频）&lt;br/&gt;
11~30：央视的20个台，包括法语啊等等之类的&lt;br/&gt;
31~40：8个浙江台+两个华数气象和华数交通台&lt;br/&gt;
41~4?：杭州的几个台&lt;br/&gt;
4?~9?：各地卫视和乱七八糟的台&lt;br/&gt;
还有4个高清的节目，没有名称，都是一直在播放电影的，分辨率是720p（补充：据说是CHC高清电影频道）&lt;/p&gt;

&lt;p&gt;另外，还有15+个模拟电视节目和20多个数字广播节目，鸡肋。&lt;/p&gt;

&lt;p&gt;四、更进一步&lt;/p&gt;

&lt;p&gt;地面数字信号接收，才是电视的最正宗、最先进，最好的传输技术。其他的说白了都是他妈的为了赚钱弄的非建设性的技术&lt;br/&gt;
包括机卡分离。LG在地面数字接收和机卡分离中是走在最前头的，大部分出货的机器都支持这两种技术。&lt;/p&gt;

&lt;p&gt;地面数字接收就是20年以前那种方式，不过接收的信号是数字信号了，太方便了。但据说杭州才5个频道，所以我还没买天线（非常小的一个东西：http://item.taobao.com/item.htm?id=415752172，也可以买鱼骨天线：&lt;a href=&quot;http://www.360buy.com/product/176878.html#&quot;&gt;菲力克斯（PHILEX） 数字高清天线27766R&lt;/a&gt;──注意，我不是推荐这两个卖家，只是记录一下产品名称，以便查找）。这帮鬼孙子现在还没搞定如何加密解密传输，无法收钱，所以一两年内估计流行不起来的（实际上欧洲北美据说早就是用这种方式作为主流的传送方式，镇内一向都是反（柯）学（返）人类的）。&lt;/p&gt;

&lt;p&gt;如果地面数字信号接收的频道足够多的话，CAM卡也可以不用了，直接买跟100快钱的小天线，就能看数字信号的电视节目了──虽然我tmd根本不怎么看这帮粉饰（钛）平的电视节目。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>PLCMD - iPhone/iPad IPA 程序名称批量修改工具（PLIST 命令行编辑器）</title>
      <link href="http://example.com/plcmd/"/>
      <updated>2010-12-16T06:35:53+08:00</updated>
      <id>http://example.com/plcmd</id>
      <content type="html">&lt;p&gt;2011.08.02 更新，请看最新版本：http://bbs.weiphone.com/read-htm-tid-2631741.html#tpc&lt;/p&gt;

&lt;p&gt;iPhone/iPad 下的图标在iTunes中竟然不能改名，看着五花八门的名字都不爽。网上找找也没有很好的工具来整理 IPA 程序名。（weiphone 有个 Rename 支持在 iPhone 内改名，但直接修改的是Info.plist，非完美支持多语言显示，也不支持预先修改IPA文件。不过当然也不错了）&lt;/p&gt;

&lt;p&gt;这里基于 CoreFoundation 自己做了个 PLED&lt;!-- more --&gt;，用法如下：&lt;/p&gt;

&lt;p&gt;PLED 1.0 - PList EDitor&lt;br/&gt;
Copyright (C) Yonsm 2010, All rights reserved.&lt;/p&gt;

&lt;p&gt;Usage: PLED {File} {Name} {Value} [/b[inary]]&lt;/p&gt;

&lt;p&gt;File 是文件名称&lt;br/&gt;
Name 是plist中的KeyName&lt;br/&gt;
Value 就是值了&lt;br/&gt;
/b 参数指定输出的文件格 bplist 格式（二进制plist），对于 IPA 修改，建议加上这个参数。&lt;/p&gt;

&lt;p&gt;活用一下，顺便还有一个功能，就是把 bplist 保存为 XML 格式的 plist，随便写点东西进去，不加 /b 参数就是XML输出了。输出XML后可以调用 EmEditor 之类的编辑，完成后再次 用 /b 改写一下 plist 又变成 bplist 了。&lt;/p&gt;

&lt;p&gt;完整版本包括源代码请参看其它帖子&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;基于上面的 PLED，做了个PLCMD，支持修改 IPA 文件内部的程序名称为IPA的文件名称 。&lt;/p&gt;

&lt;p&gt;PLCMD [IPA/DIR] [LANG]&lt;/p&gt;

&lt;p&gt;第一个参数可以是 IPA 文件或者 文件夹（将处理里面的所有 IPA 文件）。&lt;br/&gt;
第二个参数是语言（如“zh_CN”），如果省略,将写入 Info.plist（影响所有语言）。&lt;/p&gt;

&lt;p&gt;您也可以在资源管理器中直接拖动 IPA 或者 文件夹 到当前批处理文件上。&lt;/p&gt;

&lt;p&gt;请按任意键继续. . .&lt;/p&gt;

&lt;p&gt;使用方法：预先把某个目录内所有的 IPA 文件命名为为“程序名称.ipa”这种格式，然后拖动文件夹到 批处理文件上（或者在命令行中加入第二个参数 zh_CN，以便生成的plist只对中文有效，不影响多语言）。&lt;/p&gt;

&lt;p&gt;文件名可以是“iPhone.程序名称.ipa”的格式，会自动提取“程序名称”几个字，截掉扩展和前导的部分（也可以没有前导的部分）。&lt;/p&gt;

&lt;p&gt;注意：必须越狱后装了 IPA 破解补丁（hackulo.us 的 AppSync）的设备才能使用修改过的 IPA 文件。&lt;/p&gt;

&lt;p&gt;D:&gt;D:\Projects\PLCMD\Release\PLCMD\PLCMD &quot;D:\Mobile Applications&quot; zh_CN&lt;/p&gt;

&lt;p&gt;程序名称: iBooks.app&lt;br/&gt;
显示名称：书籍&lt;br/&gt;
修改文件: Payload\iBooks.app\zh_CN.lproj\InfoPlist.strings&lt;br/&gt;
PLED 1.0 - PList EDitor&lt;br/&gt;
Copyright (C) Yonsm 2010, All rights reserved.&lt;/p&gt;

&lt;p&gt;Set CFBundleDisplayName to 书籍: Done&lt;/p&gt;

&lt;p&gt;回写文件：Payload\iBooks.app\zh_CN.lproj\InfoPlist.strings&lt;/p&gt;

&lt;p&gt;程序名称: Night Stand HD.app&lt;br/&gt;
显示名称：夜钟&lt;br/&gt;
修改文件: Payload\Night Stand HD.app\zh_CN.lproj\InfoPlist.strings&lt;br/&gt;
PLED 1.0 - PList EDitor&lt;br/&gt;
Copyright (C) Yonsm 2010, All rights reserved.&lt;/p&gt;

&lt;p&gt;Set CFBundleDisplayName to 夜钟: Done&lt;/p&gt;

&lt;p&gt;回写文件：Payload\Night Stand HD.app\zh_CN.lproj\InfoPlist.strings&lt;/p&gt;

&lt;p&gt;程序名称: AccuWXCirrus.app&lt;br/&gt;
显示名称：天气&lt;br/&gt;
修改文件: Payload\AccuWXCirrus.app\zh_CN.lproj\InfoPlist.strings&lt;br/&gt;
PLED 1.0 - PList EDitor&lt;br/&gt;
Copyright (C) Yonsm 2010, All rights reserved.&lt;/p&gt;

&lt;p&gt;Set CFBundleDisplayName to 天气: Done&lt;/p&gt;

&lt;p&gt;回写文件：Payload\AccuWXCirrus.app\zh_CN.lproj\InfoPlist.strings&lt;/p&gt;

&lt;p&gt;……&lt;/p&gt;

&lt;p&gt;上面这么多废话，总结为两句话：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;把所有的 IPA 改名为和程序名称一致的文件名，如：“谷歌搜索.ipa”。&lt;/li&gt;
&lt;li&gt;把“谷歌搜索.ipa”（或者所在的文件夹）拖动到 PLCMD.cmd 文件上。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;懒得自己去写 Zip 处理的代码了，用7ZA+批处理做的，有兴趣可以看看。&lt;/p&gt;

&lt;p&gt;2010.12.15 批处理工具包也更新了，自动改名 ipa 为名称_版本.ipa 的格式（如果定制可以可以自己修改批处理）&lt;br/&gt;
&lt;a href=&quot;/assets/PLCMD.1.2.zip&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2010.12.15 已更新，PLED程序增加新功能（源代码下载，普通用户只要下载上面的工具包即可）&lt;br/&gt;
&lt;a href=&quot;/assets/PLED.2010.11.12.zip&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2012.01.28 更新：&lt;/p&gt;

&lt;p&gt;http://115.com/file/be898pc2#PLCMD.2012.01.28.rar&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>[转载]不适合当一名开发人员的10种迹象</title>
      <link href="http://example.com/10-things-with-bad-developer/"/>
      <updated>2010-12-15T03:49:30+08:00</updated>
      <id>http://example.com/10-things-with-bad-developer</id>
      <content type="html">&lt;p&gt;程序员能够赚大钱；软件开发人员一周七天都可以随意穿戴；任何人都可以通过自学成为一名程序员。这些仅是人们想成为开发人员的一小 部分原因。不幸的是，人才市场中到处都是拥有原始智力或学问的应聘者，但是他们却不具有成为一名优秀程序员所需要的正确的态度或品格。在决定自己是否应当 成为一名软件开发人员时，你应当考虑以下几件事情。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://img.cnbeta.com/newsimg/101214/1137200804081441.jpg&quot;&gt;&lt;img src=&quot;http://img.cnbeta.com/newsimg/101214/1137200804081441.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;宁愿培训，也不自学&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;即使公司对其他类型员工有合适的培训计划，大多数开发部门也很少给程序员提供培训机会。顶多为你报销买书的费用。他们都希望程序员踏进公司的第 一天就掌握了所有（至少大部分）必需的技术。更糟的是，他们主观地认为程序员都非常聪明，很擅长解决问题。这让上层管理人员相信，优秀的程序员不需要培 训。最重要的，对开发人员的培训费用是相当昂贵的。结果呢？当你职位调动时，你要弄清楚接下来要做什么，必要的话就要自学一下了。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;喜欢正常的工作时间&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;软件开发项目不能按时交工是出了名的。从某种角度而言，即便是如期完工的项目也通常落后于计划表。如果你不能忍受（或不能处理）自己的业余时间 因上级的命令而失去规律或充满变数，那么你不适合做软件开发。到了关键时刻，上级只会在乎能否将产品如期交到资产雄厚的客户手上，而不是你孩子的足球比赛 或你想看的一个新的电视节目。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;喜欢正常加薪胜过跳槽&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;软件开发行业，技术无时无刻不在贬值。除非你所在公司是和缓慢变化的技术打交道，否则，你的技术很可能一天不如一天值钱。目前技术发展水平飞速 变化，今天还很热门的技术明天可能就无人问津了。因此，日复一日的重复着同样的工作，还期盼得到超过不断增长的生活费用的加薪是很困难的。要想保值，就必 须保证自己的技术跟得上发展的步伐。此外，如果还想加薪，就必须大大扩充自己的技术，要么获得晋升，或者直接跳槽。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;无法和他人和睦共处&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;性格内向或喜欢一个人工作是一回事。无法与他人和睦共处是另一回事，而且作为一名开发人员，这会拖你的后腿。不仅如此，你的经理很可能是一名非技术人员（或很久没有亲自从事技术工作的技术人员），所以你必须善于向非技术人员表达自己的想法。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;容易垂头丧气&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;软件开发经常会让人产生挫败感。文件材料过于陈旧或有错误、之前的程序员写的代码晦涩难懂、老板规定了一些必须遵守但毫无意义的规定……诸如此 类的事情不胜枚举。一天下来，没有人愿意和一个整天在无休止地咒骂或对着显示器尖叫的人一起工作。如果因为花了8个小时完成看似10分钟就能完成的任务而 抓狂，那么开发工作不适合你。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;思想保守，不考虑他人建议&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;编程过程中遇到的问题往往都有很多解决方案。如果你不能正确对待他人的批评，或者不能认真聆听他人的意见，你很可能会漏掉一些重要的东西。举个 例子，几周前，一名初级程序员给我提了一个建议。经过思考，我决定尝试一下。结果证明他是正确的，而我之前的想法是错误的，而且，他的建议让一段代码的运 行时间从之前的若干天一下缩短到几个小时。如果因为经验水平的不同而忽略他的意见，那是多么愚蠢啊。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;不注重细节&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;编程过程处处都是细节。如果一部情节比《野蛮人柯南》复杂一点的电影就弄得你晕头转向，或者填写一个折扣单就让你感觉很费劲的话，那么，你在软 件开发这个行业也不会有长足发展。有时，像少一个句号这样的小错误，就会让原本很完美的程序产生随机错误。如果你连哪里少了句号都搞不清楚，恐怕你在这一 行业也不会有很大发展。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;没有工作自豪感&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;当然，循规蹈矩式的编写一个说得过得去的程序是有可能的。问题是，规则不是一成不变的。软件开发不像是在工厂里整天拧同样的螺丝，拧的力度大了 小了都无所谓。它需要独立思考，进而需要开发人员对工作有自豪感。而且，软件开发过程中，一些错误的做法很可能一开始不会对整个工作有不良影响。那些你所 忽视的、看似不会引起麻烦的“小错误”，最终会酿成大祸。没有工作自豪感、不认真对待每个项目的程序员工作质量不高，从而编程事业也不会长久。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;不三思而后行&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;比起编写程序，软件开发人员（至少是优秀的开发人员）会在项目计划上花费更多的时间。通常，当程序员不假思索地打开程序编辑器就开始写代码时， 他们写的大部分代码稍后就会作废。而经过深思熟虑后写出来的代码错误会更少，而且耗时短。很多程序员不知道如何合理编写程序是有原因的：软件开发的难点在 于知道要编写什么。不事先仔细思考就开始盲目工作只会事倍功半。如果你只会实干不会思考，或许软件开发这项工作并不适合你。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;不喜欢极客类型的人&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;出于种种原因（其中一些是合理的），很多人不喜欢与工程师或技术人员相处。如果你认为与像呆伯特或怪人奥尔那样的人相处是一种煎熬的话，那趁早放弃进入编程行业的念头吧。所有的开发人员都像那样性格怪异吗？当然不是。但也不乏古怪的人，这足以让你在这个行业痛苦不堪。&lt;/p&gt;

&lt;p&gt;后记&lt;/p&gt;

&lt;p&gt;如果你还有其他想法，欢迎在评论或微博中分享。&lt;br/&gt;
本文出处：伯乐在线- 职场博客&lt;br/&gt;
本文链接：http://www.jobbole.com/entry.php/389&lt;/p&gt;

&lt;p&gt;转自：http://www.cnbeta.com/articles/129635.htm&lt;br/&gt;
点评：“程序员能够赚大钱”没感觉，其他10条观点，似乎很共鸣……&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>最便捷的 HTC HERO G3 简体中文 ROM</title>
      <link href="http://example.com/hero-rom/"/>
      <updated>2010-11-09T14:43:57+08:00</updated>
      <id>http://example.com/hero-rom</id>
      <content type="html">&lt;p&gt;欢迎使用 Yonsm.NET 定制的 HTC HERO G3 简体中文 ROM OS！希望它能带给您一个全新的完美体验。&lt;/p&gt;

&lt;p&gt;一、特性&lt;/p&gt;

&lt;p&gt; ◎ 基于官方 2.1 内核，完美定制，细致周到。&lt;br/&gt;
 ◎ 自动 WIPE，刷机之前无需 WIPE。&lt;br/&gt;
 ◎ 纯净稳定，一次刷机，长时间无需更新 ROM。&lt;br/&gt;
 ◎ 配备各种精选工具（请到其它帖子中下载）。&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;
二、使用&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;如果您的设备从没刷过 Recovery，进入 Recovery 目录更新 Recovery。&lt;/p&gt;

&lt;p&gt;强烈建议不要使用 APP2SD 功能，而是使用 MTD 方式来增大应用程序的空间，具体请参看：http://www.htcplayer.com/thread-54033-1-1.html。Recovery 目录中提供了 HERO G3 MTD 所有需要的文件，刷写后 data 分区254M，可以装不少程序了。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;请如果 Recovery 已经准备好。请按严格安装以下步骤操作刷入 ROM：&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;   1). 把 ROM 文件复制到 SD 卡。&lt;/p&gt;

&lt;p&gt;   2). 关机，然后按住 Home（小房子）启动手机，进入 Recovery 模式。&lt;/p&gt;

&lt;p&gt;   3). 在 Recovery 中选择正确的 ROM 文件（ZIP）刷入（无需WIPE，刷入ROM过程中会自动WIPE数据）。&lt;/p&gt;

&lt;p&gt;   4). 重新启动即可。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;如果刷完之后启用 GPS 没有锅盖信号，则必须重刷 Radio，这里提供最新官方 Radio_Signed_HERO_63.18.55.06O_6.35.15.01.zip，刷入方法同上。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;三、问答&lt;/p&gt;

&lt;p&gt; ■ 如何扩展定制此 ROM？&lt;br/&gt;
 答：Yonsm.NET 将提供 AnRomCmd，您可以随便看看。编辑 ROM 需要安装 Java 虚拟机（http://www.java.com/zh_CN/）。&lt;/p&gt;

&lt;p&gt; ■ 我想精简 ROM 中的程序，怎么做？&lt;br/&gt;
 答：刷完 ROM 后，WIPE 一次。或者执行“手动编辑 ROM.bat”，然后删除掉不需要的程序即可（如 data\app 中的扩展程序，但至少保留一个文件在此文件夹中）。&lt;/p&gt;

&lt;p&gt; ■ 我想集成 ROM 外的组件，怎么做？&lt;br/&gt;
 ◎ 执行“整合扩展组件.bat”，就会把 system* 和 data、&lt;em&gt; 集成到 ROM 中（&lt;/em&gt;***.EXT.zip）。&lt;/p&gt;

&lt;p&gt; ■ 我应该更新 Radio 吗？&lt;br/&gt;
 答：推荐更新这里提供的最新官方稳定 Radio，如果没有 GPS 信号（俗称锅盖），或者只有锅盖但不能定位成功，请重刷 Radio。&lt;/p&gt;

&lt;p&gt; ■ 这个 ROM 没有启动声音？&lt;br/&gt;
 答：是的，如果需要启动声音，请打开文件 system\customize\CID\default.xml，把注释掉的  打开。&lt;/p&gt;

&lt;p&gt;六、致谢&lt;/p&gt;

&lt;p&gt; ◎ 感谢 Sense 的部分 ROM 参考。 &lt;br/&gt;
 ◎ 感谢各位作者提供的 ROM 定制工具和相关资源。&lt;br/&gt;
 ◎ 感谢您的测试结果和建议报告（如果有的话）。&lt;br/&gt;
 ◎ 感谢您使用本 ROM（如果您使用的话）。&lt;/p&gt;

&lt;p&gt;七、许可&lt;/p&gt;

&lt;p&gt; ◎ 本人未持有 ROM 及其中的软件的版权，请以研究和学习为目的，合法使用。&lt;br/&gt;
 ◎ 如果您根据我提供的方法以及工具修改了 ROM，建议继续公开和分享您的工作成果。&lt;br/&gt;
 ◎ 本人特此申明对 ROM 之使用不提供任何保证，不对任何用户保证本 ROM 的适用性，不保证无故障产生；亦不对任何用户使用此 ROM 所遭遇到的任何理论上的或实际上的损失承担责任。&lt;br/&gt;
 ◎ 如果您使用本软件，即表示已经默认接受了此协议。&lt;/p&gt;

&lt;p&gt;八、历史&lt;/p&gt;

&lt;p&gt; ■ 2.1.2 之前更新的更新日志不再记录。&lt;/p&gt;

&lt;p&gt; ■ 2010.06.11 2.1.2&lt;br/&gt;
  ◎  基于官方发布的 2.1 内核，终于稳定、流畅了。&lt;br/&gt;
  ◎  升级部分软件，修改不分配置。&lt;br/&gt;
  ◎  去除部分软件。&lt;/p&gt;

&lt;p&gt; ■ 2010.06.12 2.1.3&lt;br/&gt;
  ◎  集成最新 Radio 到 ROM 中。&lt;br/&gt;
  ◎  把 Superuser.apk 和 Maps.apk、VoiceSearch.apk 从 data\app 移动到 system\app 中。（方便刷机后 WIPE 得到纯净版）&lt;br/&gt;
  ◎  调整修改 QQ 桌面图标的小错误。&lt;/p&gt;

&lt;p&gt; ■ 2010.06.12 2.1.4&lt;br/&gt;
  ◎  更新 libgps.so 支持凯立德。&lt;br/&gt;
  ◎  修改部分文件，更加省电稳定。&lt;br/&gt;
  ◎  修改默认桌面图片。&lt;/p&gt;

&lt;p&gt; ■ 2010.07.31 2.1.5&lt;br/&gt;
  ◎  更新了一些软件：地图、文件管理、大众点评、本地通、凯立德（凯立德终于能用了）。&lt;br/&gt;
  ◎  更新了 Radio 包（单独版本，不在 ROM 中）。&lt;/p&gt;

&lt;p&gt; ■ 2010.09.04 2.1.6&lt;br/&gt;
  ◎  把扩展软件单独放到外面，这次终于做成一次刷 ROM 永久不用更新了。&lt;br/&gt;
  ◎  在所有程序中，隐藏系统内置的程序图标（都在桌面上可以找到，Android “所有程序”这个设计太他妈的烧饼了！）。&lt;br/&gt;
  ◎  其它小调整。&lt;/p&gt;

&lt;p&gt; ■ 2010.11.04 2.1.7&lt;br/&gt;
  ◎  更换内核版本为香港官方 2.1（好吧，其实是我抄了Sense 2.19：）。&lt;br/&gt;
  ◎  解决Google账户授权的时候Crash的问题。&lt;br/&gt;
  ◎  更新谷歌地图为4.6叫兽版，支持纵横、Buzz、导航、中国区定位偏差修正。&lt;/p&gt;

&lt;p&gt; ■ 2011.04.26 2.1.9&lt;br/&gt;
  ◎  更新谷歌地图。&lt;br/&gt;
  ◎  其它小修改。&lt;/p&gt;

&lt;p&gt; ■ 2011.10.6 2.1.10&lt;br/&gt;
  ◎  更新谷歌地图。&lt;br/&gt;
  ◎  精简了一些 HTC 的 Widget 和很少使用的部件（StreamPlayer、Flash 等），本着速度至上原则，毕竟 G3 已经远远落后于现在主流的 Android 设备了，折腾不起。如果在意完整的插件，请继续使用 2.1.9，它依然是一个非常不错的 ROM。&lt;br/&gt;
  ◎  提供 MTD 所需的所有东西。&lt;br/&gt;
  ◎  其它小修改。&lt;/p&gt;

&lt;p&gt;Yonsm&lt;br/&gt;
Yonsm@msn.com&lt;br/&gt;
WWW.Yonsm.NET&lt;br/&gt;
2011.10.6，杭州&lt;/p&gt;

&lt;p&gt;FOR MY JANE, FOR MY DREAM...&lt;/p&gt;

&lt;p&gt;论坛讨论：&lt;br/&gt;
http://www.hiapk.com/bbs/thread-82758-1-1.html&lt;br/&gt;
http://www.goapk.com/viewthread.php?tid=9917&lt;br/&gt;
http://www.androidin.net/bbs/viewthread.php?tid=45162&lt;/p&gt;

&lt;p&gt;最新版本：2.1.10，解压缩，刷入里面的 HERO.Yonsm.2.1.10.zip 即可。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://115.com/file/e65od5hu&quot;&gt;http://115.com/file/e65od5hu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;次新版本：2.1.9，解压缩，刷入里面的 HERO.Yonsm.2.1.9.zip 即可。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://u.115.com/file/bhzpffvh&quot;&gt;http://u.115.com/file/bhzpffvh&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以下图片为截图，由于版本更新，实际可能有所出入：&lt;br/&gt;
&lt;a href=&quot;/assets/1314406562_3819d866.png&quot;&gt;&lt;img src=&quot;/assets/1314406562_3819d866.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>观望 WP7</title>
      <link href="http://example.com/waiting-for-wp7/"/>
      <updated>2010-10-13T05:31:47+08:00</updated>
      <id>http://example.com/waiting-for-wp7</id>
      <content type="html">&lt;p&gt;……&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>西北悠行</title>
      <link href="http://example.com/north-western-tour/"/>
      <updated>2010-10-05T13:58:06+08:00</updated>
      <id>http://example.com/north-western-tour</id>
      <content type="html">&lt;p&gt;一、兰州 2 0 1 0.10.04&lt;br/&gt;
链接至 Jane 的&lt;a href=&quot;http://t.sina.com.cn/janezguo&quot;&gt;新浪博客&lt;/a&gt;&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>在 iPhone/iPad 中随意修改数字键盘按钮</title>
      <link href="http://example.com/modify-keyboard-in-ios/"/>
      <updated>2010-09-02T19:00:55+08:00</updated>
      <id>http://example.com/modify-keyboard-in-ios</id>
      <content type="html">&lt;p&gt;一、起因&lt;/p&gt;

&lt;p&gt;iPhone 的键盘，特别是数字键盘，往往不能满足程序的输入需要。最典型的例子就是在数字键盘上添加一个“.”，用来输入小数点。安装 iPhone SDK 官方的观点，如果要使用小数点键盘，那只好使用数字和符号键盘，但那样没个按键很小，且不需要的按键太多。&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;二、现有方案&lt;/p&gt;

&lt;p&gt;针对这种情况，最早的解决方案，请参考这里：&lt;a href=&quot;http://www.cnblogs.com/mac_arthur/archive/2010/05/18/1738363.html&quot;&gt;http://www.cnblogs.com/mac_arthur/archive/2010/05/18/1738363.html&lt;/a&gt;。使用的是 以下代码来检测一个 Notification。&lt;/p&gt;

&lt;p&gt;[[NSNotificationCenter defaultCenter] addObserver:self &lt;br/&gt;
                                         selector:@selector(addCustomKeyBoardButton)&lt;br/&gt;
                                                name:UIKeyboardWillShowNotification&lt;br/&gt;
                                              object:nil];&lt;/p&gt;

&lt;p&gt;这种方法，在 iOS 4.0 后失效了，原因有两个，一是UIKeyboardWillShowNotification的时候，键盘根本没有创建出来;另外，Class Name 也被外包了一层，叫做UIPeripheralHostView。&lt;/p&gt;

&lt;p&gt;于是又有了一种改进的方案，请看这里：&lt;a href=&quot;http://www.neoos.ch/news/46-development/54-uikeyboardtypenumberpad-and-the-missing-return-key&quot;&gt;http://www.neoos.ch/news/46-development/54-uikeyboardtypenumberpad-and-the-missing-return-key&lt;/a&gt;。主要的改进是在UIKeyboardDidShowNotification的通知消息中来修改键盘。但正如作者所说，这里有个不完美的情况，只能等键盘动画显示完成之后，才能添加显示我们的东西，视觉效果不好。&lt;/p&gt;

&lt;p&gt;三、改进方案&lt;/p&gt;

&lt;p&gt;经过试验，找到一个比较完美的方案：在 UITextField 的becomeFirstResponder和resignFirstResponder中修改键盘。&lt;/p&gt;

&lt;p&gt;定以一个类，假如叫做 KBCustomTextField : UITextField，在这个类中加入一下代码：&lt;/p&gt;

&lt;p&gt;//&lt;br/&gt;
- (BOOL)becomeFirstResponder&lt;br/&gt;
{&lt;br/&gt;
 BOOL ret = [super becomeFirstResponder];&lt;br/&gt;
 [self modifyKeyView:@&quot;NumberPad-Empty&quot; display:@&quot;.&quot; represent:@&quot;.&quot; interaction:@&quot;String&quot;];&lt;br/&gt;
 return ret;&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;//&lt;br/&gt;
- (BOOL)resignFirstResponder&lt;br/&gt;
{&lt;br/&gt;
 BOOL ret = [super resignFirstResponder];&lt;br/&gt;
 [self modifyKeyView:@&quot;NumberPad-Empty&quot; display:nil represent:nil interaction:@&quot;None&quot;];&lt;br/&gt;
 return ret;&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;modifyKeyView 的实现可以参看附件。我使用的是循环查找UIKBKeyView类，这是Apple 的 Private API（私有API的声明可以在这里找：&lt;a href=&quot;http://github.com/kennytm/iphone-private-frameworks/tree/master/UIKit/&quot;&gt;http://github.com/kennytm/iphone-private-frameworks/tree/master/UIKit/&lt;/a&gt;），不确信能否通过 App Store 的审核：）&lt;/p&gt;

&lt;p&gt;更近一步地，我完善了一下 KBCustomTextField，通过这个类，非常方便地就可以做到自定义输入键盘：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/1283431378_9792baf4.zip&quot;&gt;KBCustom.zip&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用小数点和数字键盘：非常简单，只要在 IB 中把 UITextField 的类改成KBCustomTextField，就OK了，不用一行代码，效果如下图：&lt;br/&gt;
&lt;a href=&quot;/assets/1283431378_38117112.png&quot;&gt;&lt;img src=&quot;/assets/1283431378_38117112.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在键盘的按键上添加一个文字按钮（并指定处理动作）：设置KBCustomTextField.kbDelegate，实现这两个函数即可：&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;// [Yonsm] Handle keyboard show&lt;br/&gt;
- (void)keyboardShow:(KBCustomTextField *)sender&lt;br/&gt;
{&lt;br/&gt;
 [sender addCustomButton:@&quot;NumberPad-Empty&quot; title:@&quot;DONE&quot; target:self action:@selector(onButton:)];&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;// [Yonsm] Handle keyboard hide&lt;br/&gt;
- (void)keyboardHide:(KBCustomTextField *)sender&lt;br/&gt;
{&lt;br/&gt;
 [sender delCustomButton:@&quot;NumberPad-Empty&quot;];&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/1283431378_98952583.png&quot;&gt;&lt;img src=&quot;/assets/1283431378_98952583.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;更近一步地，这两个 Delegate 函数中，你只要通过 name 来查找到想要修改的 UIKBKeyView，就可以随便修改它。name 可以通过 KBCustomTextField 的#define _LOG_KEY_VIEW来列出所有的按键名称。name 为 nil 则找任何的 UIKBKeyView（可以用他的 .superview 来找到整个键盘View，做更多的处理）。&lt;br/&gt;
&lt;a href=&quot;/assets/1283431378_246664d4.png&quot;&gt;&lt;img src=&quot;/assets/1283431378_246664d4.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;下面是 iPhone 数字键盘的前面10个按键（后面忘了打出来了：）&lt;/p&gt;

&lt;p&gt;Found View: UIPeripheralHostView&lt;br/&gt;
Found View: UIKeyboardAutomatic&lt;br/&gt;
Found View: UIKeyboardImpl&lt;br/&gt;
Found View: UIKeyboardLayoutStar&lt;br/&gt;
Found View: UIKBKeyplaneView&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=NumberPad-1  representedString=1  displayString=1  displayType=NumberPad  interactionType=String  displayRowHint=Row1&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=NumberPad-2  representedString=2  displayString=2/ABC  displayType=NumberPad  interactionType=String  displayRowHint=Row1&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=NumberPad-3  representedString=3  displayString=3/DEF  displayType=NumberPad  interactionType=String  displayRowHint=Row1&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=NumberPad-4  representedString=4  displayString=4/GHI  displayType=NumberPad  interactionType=String  displayRowHint=Row2&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=NumberPad-6  representedString=6  displayString=6/MNO  displayType=NumberPad  interactionType=String  displayRowHint=Row2&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=NumberPad-7  representedString=7  displayString=7/PQRS  displayType=NumberPad  interactionType=String  displayRowHint=Row3&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=NumberPad-8  representedString=8  displayString=8/TUV  displayType=NumberPad  interactionType=String  displayRowHint=Row3&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=NumberPad-9  representedString=9  displayString=9/WXYZ  displayType=NumberPad  interactionType=String  displayRowHint=Row3&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=NumberPad-Empty &amp;nbs;
p;representedString=  displayString=  displayType=NumberPad  interactionType=None  displayRowHint=Row4&lt;/p&gt;

&lt;p&gt;代码对 iPad 也有效，当然 Key Name 和  Type 不一样，下面是 iPad 数字键盘的Log：&lt;/p&gt;

&lt;p&gt;Found View: UIPeripheralHostView&lt;br/&gt;
Found View: UIKeyboardAutomatic&lt;br/&gt;
Found View: UIKeyboardImpl&lt;br/&gt;
Found View: UIKeyboardLayoutStar&lt;br/&gt;
Found View: UIKBKeyplaneView&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Digit-1  representedString=1  displayString=1  displayType=String  interactionType=String-Popup  displayRowHint=Row1&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Digit-2  representedString=2  displayString=2  displayType=String  interactionType=String-Popup  displayRowHint=Row1&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Digit-3  representedString=3  displayString=3  displayType=String  interactionType=String-Popup  displayRowHint=Row1&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Digit-4  representedString=4  displayString=4  displayType=String  interactionType=String-Popup  displayRowHint=Row1&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Digit-5  representedString=5  displayString=5  displayType=String  interactionType=String-Popup  displayRowHint=Row1&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Digit-6  representedString=6  displayString=6  displayType=String  interactionType=String-Popup  displayRowHint=Row1&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Digit-7  representedString=7  displayString=7  displayType=String  interactionType=String-Popup  displayRowHint=Row1&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Digit-8  representedString=8  displayString=8  displayType=String  interactionType=String-Popup  displayRowHint=Row1&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Digit-9  representedString=9  displayString=9  displayType=String  interactionType=String-Popup  displayRowHint=Row1&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Digit-0  representedString=0  displayString=0  displayType=String  interactionType=String-Popup  displayRowHint=Row1&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Hyphen-Minus  representedString=-  displayString=-  displayType=String  interactionType=String-Popup  &lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Solidus  representedString=/  displayString=/  displayType=String  interactionType=String-Popup  displayRowHint=Row2&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Colon  representedString=:  displayString=:  displayType=String  interactionType=String-Popup  displayRowHint=Row2&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Semicolon  representedString=;  displayString=;  displayType=String  interactionType=String-Popup  &lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Left-Parenthesis  representedString=(  displayString=(  displayType=String  interactionType=String-Popup  &lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Right-Parenthesis  representedString=)  displayString=)  displayType=String  interactionType=String-Popup  &lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Primary-Currency-Sign  representedString=$  displayString=$  displayType=DynamicString  interactionType=String-Popup&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Ampersand  representedString=&amp;amp;  displayString=&amp;amp;  displayType=String  interactionType=String-Popup  &lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Commercial-At  representedString=@  displayString=@  displayType=String  interactionType=String-Popup  &lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Full-Stop  representedString=.  displayString=.  displayType=String  interactionType=String-Popup  &lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Comma  representedString=,  displayString=,  displayType=String  interactionType=String-Popup  displayRowHint=Row3&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Question-Mark  representedString=?  displayString=?  displayType=String  interactionType=String-Popup  &lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Exclamation-Mark  representedString=!  displayString=!  displayType=String  interactionType=String-Popup  &lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Apostrophe  representedString=&#39;  displayString=’  displayType=String  interactionType=String-Popup  &lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Quotation-Mark  representedString=&quot;  displayString=”  displayType=String  interactionType=String-Popup  &lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Delete-Key  representedString=Delete  displayString=delete  displayType=Delete  interactionType=Delete  &lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Return-Key  representedString=&lt;br/&gt;
interactionType=Return  displayRowHint=Row2&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Undo-Key  representedString=undo  displayString=undo  displayType=Command  interactionType=Undo  displayRowHint=Row3&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=More-Key  representedString=More  displayString=more  displayType=More  interactionType=More  displayRowHint=Row4&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Unlabeled-Space-Key  representedString=   displayString=  displayType=Space  interactionType=Space  &lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=More-Key  representedString=More  displayString=more  displayType=More  interactionType=More  displayRowHint=Row4&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Dismiss-Key  representedString=Dismiss  displayString=Dismiss  displayType=Dismiss  interactionType=Dismiss  &lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Shift-Key  representedString=Shift  displayString=shift  displayType=Shift  interactionType=Shift  displayRowHint=Row3&lt;br/&gt;
Found View: UIKBKeyView&lt;br/&gt;
 name=Shift-Key  representedString=Shift  displayString=shift  displayType=Shift  interactionType=Shift  displayRowHint=Row3&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>计划骑自行车环游青海湖</title>
      <link href="http://example.com/plans-to-ride-around-the-qinghai-lake/"/>
      <updated>2010-08-30T15:37:21+08:00</updated>
      <id>http://example.com/plans-to-ride-around-the-qinghai-lake</id>
      <content type="html">&lt;p&gt;……&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;
有没有网友知道下面两个问题：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;10月1～10号那边天气会非常冷么？&lt;/li&gt;
&lt;li&gt;那边租的自行车好骑么？我自己有 DAHOO 的 SP8，但这么长距离携带应该多有不便。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;a href=&quot;http://maps.google.com/maps?f=d&amp;amp;source=embed&amp;amp;saddr=%E6%9D%AD%E5%B7%9E&amp;amp;daddr=%E4%B8%8A%E6%B5%B7+to:%E8%A5%BF%E5%AE%81+to:%E8%A5%BF%E6%B5%B7%E9%95%87+to:109%E5%9B%BD%E9%81%93+to:109%E5%9B%BD%E9%81%93+to:%E7%8E%AF%E6%B9%96%E8%A5%BF%E8%B7%AF+to:%E8%A5%BF%E5%A4%A7%E8%A1%97+to:310%E7%9C%81%E9%81%93+to:%E6%9D%AD%E5%B7%9E&amp;amp;hl=zh-CN&amp;amp;geocode=FdnvzQEdcWwpBymZqppDKbZLNDE66E2Cg9G_pw%3BFfSK3AEdlIc9BykzPPWxQHCyNTGhZMMjlBKVAg%3BFX27LgIdIAMRBilJZgikXIFNNjGkG1GZ95af7g%3BFSn1MwIdnpsDBin3DuturlxNNjGmuG4PB_hHCw%3BFTF4LQIdLzYABg%3BFfZyMAIdZHvyBQ%3BFZkYNQId9DLyBQ%3BFbCWOQId7ub3BQ%3BFfYoNAId2KoDBg%3BFdnvzQEdcWwpBymZqppDKbZLNDE66E2Cg9G_pw&amp;amp;mra=ls&amp;amp;sll=36.721274,101.151123&amp;amp;sspn=5.168125,9.063721&amp;amp;ie=UTF8&amp;amp;ll=36.791691,100.280457&amp;amp;spn=1.099749,1.370544&amp;amp;t=h&amp;amp;z=9&quot;&gt;查看大图&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我们计划6天环湖，每天60公里。应该轻松的的。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>[转载]韩寒主编杂志《独唱团》今日全国上市</title>
      <link href="http://example.com/han-han-magazine/"/>
      <updated>2010-07-07T04:09:19+08:00</updated>
      <id>http://example.com/han-han-magazine</id>
      <content type="html">&lt;p&gt;核心提示：韩寒主编杂志《独唱团》今日将在全国上市。为防止串货，每本杂志背后都印有地区标码，可以视为当地的“限量版”。同济大学副教授王晓渔表示，不一定会去看，但是一定会去买，在经济上表示支持。从某种意义上说，这本杂志一出生就已风华正茂。&lt;/p&gt;

&lt;p&gt;更多内容：http://news.163.com/10/0706/01/6ASF7TMO00014AED.html&lt;br/&gt;
官方网店：http://shop57860513.taobao.com/&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>[转载]八大看点 苹果iPhone 4升级详解</title>
      <link href="http://example.com/apple-iphone4-upgrade-details/"/>
      <updated>2010-06-09T02:07:03+08:00</updated>
      <id>http://example.com/apple-iphone4-upgrade-details</id>
      <content type="html">&lt;p&gt;http://www.cnbeta.com/articles/113214.htm&lt;/p&gt;

&lt;p&gt;http://www.cnbeta.com/articles/113195.htm&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>CFLite for VC:移植 Core Foundation 到 Visual C++ 中</title>
      <link href="http://example.com/cflite-vc/"/>
      <updated>2010-05-20T06:12:05+08:00</updated>
      <id>http://example.com/cflite-vc</id>
      <content type="html">&lt;p&gt;Core Foundation 是 Apple 的开源基础组件，提供了各种基础设施，如 PLIST 处理、XML parser、String、Array、Dictionary 等等&lt;/p&gt;

&lt;p&gt;在处理 Apple 平台的某些东西（比如处理 Mac OSX、iPhone、iPad 的 plist 文件）的时候可能需要用到 Apple 的 Core Foundation。当然在 Xcode 中可以很轻易使用这些东西（内置的），但在 Win32 中却有些麻烦（有时候可能会在 Windows 下处理点什么）。&lt;/p&gt;

&lt;p&gt;网上搜索 CFLite （http://www.kjams.com/wiki/Code/CFLite） 可以找到一个网站，精简了 CoreFoundation 并提供了些 DLL l以便在 Win32 中使用它——但，这个东西太老了（2008年的更新），以至于都不支持 binary plist 这些 iPhone 中最常用的 plist 格式的读写。&lt;/p&gt;

&lt;p&gt;正好想弄个 iPhone/iPad  PLIST 的命令行编辑工具，所以自己移植了一下 Core Foundation。&lt;!-- more --&gt;参看附件中的 CFLite 目录：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;CoreFoundation：头文件，从“http://www.opensource.apple.com/”中下载的 10.6.2 的版本（10.6.3尚未提供）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Redist：运行库，从 iTunes 安装后的“C:\Program Files\Common Files\Apple\Apple Application Support”中打包的运行时DLL。本来想把 Core Foundation 的 C 文件编译一下做成静态库的，折腾了好久没搞定，暂时用用 40M 的庞大的 运行库吧。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CoreFoundation.lib，从 Redist\CoreFoundation.dll 中手工制作的LIB文件，制作方法如下：&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt; 1、在 Visuall Studio Command Prompt 执行：   &lt;br/&gt;
 dumpbin   /exports   CoreFoundation.dll   &gt;   CoreFoundation.def&lt;/p&gt;

&lt;p&gt; 2、编辑   yourdll.def   文件，使之格式与.def文件格式一致。比如：   &lt;br/&gt;
 LIBRARY CoreFoundation  &lt;br/&gt;
 EXPORTS&lt;br/&gt;
               fn1;   &lt;br/&gt;
               fn2;   &lt;br/&gt;
 3、在命令行执行：   &lt;br/&gt;
 lib   /def:CoreFoundationl.def   /machine:i386   /out:CoreFoundationl.lib&lt;/p&gt;

&lt;p&gt;如果需要其他的DLL中的功能，可以类推。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;其他 .h 文件，GNU 兼容的 头文件。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;其他的文件是 PLCMD 的东西，PLED.cpp 可以认为是一个 PLIST 读写的 Sample 吧：）&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/CFLite.zip&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>折腾了两天，对 iPad 好熟悉了</title>
      <link href="http://example.com/two-days-using-of-ipad/"/>
      <updated>2010-05-07T15:10:44+08:00</updated>
      <id>http://example.com/two-days-using-of-ipad</id>
      <content type="html">&lt;p&gt;非常不错的东西，流畅、省电……&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;有好多小技巧或许可以做成小工具……&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Google Maps 4.1 绿色版 - 非常实用的地图软件</title>
      <link href="http://example.com/google-maps-for-windows-mobile/"/>
      <updated>2010-04-25T10:13:33+08:00</updated>
      <id>http://example.com/google-maps-for-windows-mobile</id>
      <content type="html">&lt;p&gt;Google Maps Mobile 是目前为止我发现的最实用的手机软件，在手机上查看 Google 地图、卫星图、生活信息（餐馆等）、交通状况（仅北京上海等城市）、GPS定位、公交驾车导航、纵横（好友定位）、Buzz（墙外开花墙内没香，暂时不能用）、语音搜索等……&lt;/p&gt;

&lt;p&gt;关键一点是，如果没有GPS，一样可以非常方便地使用这个软件，它会读取你的移动电话所使用的基站（就是移动电话发射塔）的位置信息，做到一个粗略的定位——城市精确度800-1500米左右，乡村可能更差点，依赖于基站的密集程度——这个精确度水然比较低，但已经非常有用了：一打开软件就会帮你找到你所在的位置的周边地图，非常的实用。另外“谷歌纵横”功能可以帮助我们随时得知好友的位置信息。感谢 Google 提供这么棒的软件！&lt;/p&gt;

&lt;p&gt;Google Maps 支持多种手机（智能手机都支持，非智能手机也支持部分），具体可以到此 http://mobile.google.com 查询下载。&lt;/p&gt;

&lt;p&gt;对于 Windows Mobile，目前最新版本是 4.1，SP 和 PPC 是通用的。但郁闷的一点是，程序的缓存数据一定会保存在 Applicaion Data 中（且程序字符串也必须在这个目录下）。为了解决这个问题，我耐心分析后修改了一个“当前目录”的版本，所有的数据都保存在当前EXE所在的GoogleMaps目录下，做成绿色版本了（高难度动作：）。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;有需要可以从一键安装GPS软件包中获取此软件修改版（如果只需要谷歌地图，只提取其中的GMAP目录即可）&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/1241094363_6214a0c3.gif&quot;&gt;&lt;img src=&quot;/assets/1241094363_6214a0c3.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/PPCGPS.zip&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;另外，下面是修改方法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;找到 SHGetSpecialFolderPath 函数，参数是...0x1A... 的就是 Application Data 的目录。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我们要修改为以下代码：&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;UINT nLen = GetModuleFileName(NULL, tzPath, MAX_PATH);&lt;br/&gt;
tzPath[nLen - 15] = 0;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;换成汇编代码为：&lt;br/&gt;
.text::00019E8C                 MOV     R2, #0x104&lt;br/&gt;
.text:00019E90                 ADD     R1, SP, #0x458+var_42C&lt;br/&gt;
.text:00019E94                 MOV     R0, #0&lt;br/&gt;
.text:00019E98                 BL      GetModuleFileNameW&lt;br/&gt;
.text:00019E9C                 ADD     R3, SP, #0x458+var_42C&lt;br/&gt;
.text:00019EA0                 ADD     R3, R3, R0,LSL#1&lt;br/&gt;
.text:00019EA4                 MOV     R2, #0&lt;br/&gt;
.text:00019EA8                 STRH    R2, [R3,#-0x1E]&lt;br/&gt;
.text:00019EAC                 B       loc_19ED4&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;查找（可能不准确）：&lt;/p&gt;

&lt;p&gt;02 00 A0 E1&lt;br/&gt;
1A 20 A0 E3 00 30 A0 E3 2C 10 8D E2 F1 E3 05 EB&lt;br/&gt;
BC 32 DD E1 5C 00 53 E3 09 00 00 0A BC 01 9F E5&lt;/p&gt;

&lt;p&gt;改成（其中7E E3 05 EB必须更改为GetModuleFIileW的调用）：&lt;br/&gt;
41 2F A0 E3&lt;br/&gt;
2C 10 8D E2 00 00 A0 E3 7E E3 05 EB 2C 30 8D E2&lt;br/&gt;
80 30 83 E0 00 20 A0 E3 BE 21 43 E1 08 00 00 EA&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;因为还会加上 \Storage Card，所以必须去掉此功能。往下看，转到本来就有的GetModuleFileNameW下面：&lt;br/&gt;
.text:00019F70                 MOV     R6, #0&lt;br/&gt;
.text:00019F74                 CMP     R7, #0&lt;br/&gt;
.text:00019F78                 BLE       loc_1A01C&lt;br/&gt;
改为：&lt;br/&gt;
.text:00019F70                 MOV     R6, #0&lt;br/&gt;
.text:00019F74                 CMP     R7, #0&lt;br/&gt;
.text:00019F78                 B       loc_1A01C&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;查找（可能不准确）：&lt;br/&gt;
0B 0C 00 EB 00 60 A0 E3  00 00 57 E3 27 00 00 DA&lt;br/&gt;
把 DA 改成 EA 即可&lt;/p&gt;

&lt;p&gt;2009.8.15  更新到3.2&lt;br/&gt;
2009.9.15  更新到3.2.1.12&lt;br/&gt;
2009.11.13  更新到3.2.1.35&lt;br/&gt;
2009.12.09  更新到3.3.1&lt;br/&gt;
2010.2.18  更新到4.0.0&lt;br/&gt;
2010.4.24  更新到4.1.0&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>加装定速巡航了</title>
      <link href="http://example.com/cruiser-on-car/"/>
      <updated>2010-03-06T16:34:41+08:00</updated>
      <id>http://example.com/cruiser-on-car</id>
      <content type="html">&lt;p&gt;话说一直都感觉速腾1.8TSI缺少定速巡航和胎压检测这两点不爽，刚入手的时候就想加装定速巡航，官僚态度的4S店号称非冠军版要2000大洋，冠军版要4000大洋——真他妈吓唬人。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;早就在网上论坛社区看到有人推荐说杭州有个“萧山农民”的大神，在改装大灯方面忒有一手啥的。前几天有网友说已经在他这里加装定速巡航，感觉不错。于是赶紧联系上传说中的“大神”，一口价280大洋（网上淘宝价150~...，不包安装），敲定周末之前随时去，20分钟搞定云云……&lt;/p&gt;

&lt;p&gt;今晚大雨，晚上19:30出发感到萧山原野汽配城，找到大神的Carbar工作室店铺后，见到本尊——原来是在宋城集团做IT服务，也算同行，在汽配城开了这个店。直入正题，手脚麻利熟练地开始拆方向盘、换手柄（意大利“ACR”？不懂）、连电脑改参数……，不到10分钟工夫，搞定了。付钱走人，心想原来这么顺利……&lt;/p&gt;

&lt;p&gt;开出一小段后，饶有兴趣地想试试效果，……咦，咋按咋没反应。后来又开回去，开始倒腾，……，啥原因忘了，总之清除了一下数据（类似复位了一下系统？），不懂，只好在旁边候着，期间竟然遇到本地速腾群里的菜刀、斑鸠（但没打照面先走了），还真巧……，终于搞定了。&lt;/p&gt;

&lt;p&gt;路上试试定速巡航，真的是感觉爽多了，瞬间增值不少。杭州附近的速腾和明锐用户，如果需要可以找这位农民兄（看名片似乎主营大灯改装和ECU升级）换一下手柄。——这么低成本的东西，厂家干嘛不从用户的角度多考虑下，别把这个小部件省了呢（莫非就留着功能缺口让4S店赚2000/4000的大钱？）——虽说自己加装能搞定，不过换下来的原装手柄啥用处没有，真是闲置浪费资源啊。&lt;/p&gt;

&lt;p&gt;和菜刀结伴回市区，一上路没多远，就丢了，惭愧……。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://maps.google.com/maps?f=d&amp;amp;source=embed&amp;amp;saddr=China%E6%B5%99%E6%B1%9F%E7%9C%81%E6%9D%AD%E5%B7%9E%E5%B8%82%E8%A5%BF%E6%B9%96%E5%8C%BA%E6%96%87%E4%B8%89%E8%A5%BF%E8%B7%AF535%E5%8F%B7+(%E8%8E%B1%E8%8C%B5%E8%BE%BE%E5%A4%A7%E5%8E%A6&quot;&gt;查看大图&lt;/a&gt;&amp;amp;daddr=30.217097,120.24004+to:China%E6%B5%99%E6%B1%9F%E7%9C%81%E6%9D%AD%E5%B7%9E%E5%B8%82%E8%90%A7%E5%B1%B1%E5%8C%BA%E6%96%B0%E7%9B%9B%E8%B7%AF+(%E5%8E%9F%E9%87%8E%E6%B1%BD%E9%85%8D%E4%BA%94%E9%87%91%E5%B8%82%E5%9C%BA)&amp;amp;hl=zh-CN&amp;amp;geocode=Ffb4zQEdcvIoByGMt5ofP5vhZA%3B%3BFa7YzAEdmnArByGIarz8hdkvwQ&amp;amp;mra=dpe&amp;amp;mrcr=0&amp;amp;mrsp=1&amp;amp;sz=13&amp;amp;via=1&amp;amp;sll=30.23712,120.222702&amp;amp;sspn=0.114938,0.222301&amp;amp;ie=UTF8&amp;amp;ll=30.254915,120.207596&amp;amp;spn=0.118624,0.171661&amp;amp;z=12)&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>RawPlayer 2.2 - YUV Player/RGB Player 原始视频播放器/分析器</title>
      <link href="http://example.com/rawplayer/"/>
      <updated>2010-01-21T13:49:24+08:00</updated>
      <id>http://example.com/rawplayer</id>
      <content type="html">&lt;p&gt;RawPlayer 是一个解码后的原始视频数据的分析工具。它支持多种未压缩纯视频数据 (Uncompressed Raw Video Data，包括 YV12、IYUV、YUY2、YVYU、UYVY、VYUY、RGB24) 文件的显示播放，以及任意两种格式之间的相互转换。&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;● 主要功能&lt;/p&gt;

&lt;p&gt;○ 播放多种未压缩纯视频文件，包括 YV12、IYUV、YUY2、YVYU、UYVY、VYUY、RGB24。&lt;br/&gt;
○ 支持任意两种格式之间的相互转换输出。&lt;br/&gt;
○ 支持输出位图文件。&lt;br/&gt;
○ 多窗口同步播放。&lt;br/&gt;
○ 多窗口拼接播放。&lt;br/&gt;
○ 选择性地播放指定通道 (Y、U、V、R、G、B)。&lt;br/&gt;
○ 可选择使用 Windows GDI 或者 DirectDraw 显示方式。&lt;br/&gt;
○ 关联到支持的文件。&lt;/p&gt;

&lt;p&gt;● 其它功能&lt;/p&gt;

&lt;p&gt;○ 提供运行于 Windows X64 平台上的纯 64 为高效代码。&lt;br/&gt;
○ 针对 MMX、SSE、SSE2 指令优化。&lt;br/&gt;
○ 使用外部 LNG 文件实现多语言支持，自动根据用户环境选择语言。&lt;br/&gt;
○ 在桌面、开始菜单、程序菜单和快速启动栏中创建快捷方式。&lt;br/&gt;
○ 在 Microsoft Visual Studio 工具菜单中创建快捷方式。&lt;br/&gt;
○ 支持拖放、命令行方式打开图像文件。&lt;br/&gt;
○ 打开文件对话框中，可根据设定格式，实时预览和播放视频。&lt;br/&gt;
○ 自动记忆打开文件对话框中指定的格式，在下次选定该文件时，将自动套用历史格式。&lt;br/&gt;
○ 自动记忆新近文件历史记录。&lt;br/&gt;
○ 最小化到系统托盘，窗口总在最前。&lt;br/&gt;
○ 更多...&lt;/p&gt;

&lt;p&gt;版权所有 (C) 2004-2010 Yonsm.NET，保留所有权利。&lt;/p&gt;

&lt;p&gt;最好用、最有用的裸视频播放器（播放、对比、分析、转换等功能），专业人士必备：）&lt;br/&gt;
多余的不说了，懂的人看着办。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/RawPlayer.2.2.222.exe&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>试用了一下 My Tracks，记录从六和塔到五云寺的爬山轨迹</title>
      <link href="http://example.com/my-tracks-for-android/"/>
      <updated>2010-01-18T12:33:38+08:00</updated>
      <id>http://example.com/my-tracks-for-android</id>
      <content type="html">&lt;p&gt;这两天感冒，朋友邀约下午去爬山，想想好久没动了，就去了。顺便试用了一下Android的My Tracks记录轨迹，一直开着，耗电量还行，撑到了五云寺就没电了（满电的话，感觉能走5个小时？）。&lt;/p&gt;

&lt;p&gt;开始走的是六和塔到九溪理安寺的路线，一路石阶，非常好走。下到九溪烟树后感觉不过瘾，有继续找路网云栖竹径，结果走的全是几乎未开发过的陡坡小道，随处树枝挂头。走啊走……当然终于到了：）&lt;/p&gt;

&lt;p&gt;评测了一下My Tracks的功能，感觉连续性和稳定性都很不错，上传分享结果也非常方便——可以直接上传结果到Goole My Maps和Google Docs，然后用MAIL或短信通知其他人一起查看。这不，就下面这些：&lt;/p&gt;

&lt;p&gt;在较大的地图中查看&lt;a href=&quot;http://maps.google.com/maps/ms?msa=0&amp;amp;msid=101737900009088758277.00047d5b30c5eca6af72b&amp;amp;ie=UTF8&amp;amp;ll=30.201743,120.110178&amp;amp;spn=0.03709,0.04283&amp;amp;z=14&amp;amp;source=embed&quot;&gt;足迹 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上面出发点是六和塔边上，浙大之江校区，结束点是十里郎当路上的五云寺（没电了），中间去了理安寺和九溪烟树，标记点是快崩溃的时候，做了个记号：）&lt;/p&gt;

&lt;p&gt;有个几乎崩溃的问题：地图偏移太厉害了！实际上我们到达了九溪烟树的瀑布的，请以此作为参考点来估算地图的便宜——便宜太厉害了——Google 想离开中国，也麻烦把这中国用户一直在抱怨的地图偏移问题解决了啊……&lt;br/&gt;
（切换到卫星视图，似乎没有偏差）&lt;/p&gt;

&lt;p&gt;My Tracks 软件下载：http://www.hiapk.com/bbs/viewthread.php?tid=53970&amp;highlight;=Tracks&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>传闻WM7将延期至2011年</title>
      <link href="http://example.com/wm7-will-be-postponed-to-2011/"/>
      <updated>2010-01-13T09:16:48+08:00</updated>
      <id>http://example.com/wm7-will-be-postponed-to-2011</id>
      <content type="html">&lt;p&gt;请参考：http://www.pdafans.com/article-5648-1.html&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Yonsm 观点：&lt;/p&gt;

&lt;p&gt;早就听说 WM7 和 WM6.5 一起开发的，后来 WM7 的团队大换血，一再延迟，现在终于看到延迟到更迟了……&lt;/p&gt;

&lt;p&gt;从WM6 到 WM6.5 几乎没有任何实质性的改进（唯一的改进就是IE6，其它都是乱来或者HTC之类的改进的东西）。&lt;/p&gt;

&lt;p&gt;Windows Mobile 已死？Windows Phone 诈尸……&lt;/p&gt;

&lt;p&gt;一个缺乏 统一性、易用性、美观性 的系统；再有龟速.NET的实现，不思优化；完全没有任何完美的偏执，只有市场的和稀泥和糊弄。有此下场，早该如此！&lt;/p&gt;

&lt;p&gt;更新：早死早超生，期待 Windows Mobile 复活重生……&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;2010.2.7 更新&lt;br/&gt;
标题：退回单任务系统！Windows Mobile 7 最新信息全面泄露&lt;br/&gt;
转自：http://www.cnbeta.com/articles/103844.htm&lt;/p&gt;

&lt;p&gt;MWC前夕，国外网站PPCGeeks泄露了有关于Windows Mobile 7的最新信息，这也是WM7自开发以来最完整的传闻---看上去就像一个更新列表。&lt;br/&gt;
全新的界面和从多任务退回到单任务系统的消息值得一起来关注。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;UI的新开发代号为“METRO”.非常类似于Zune HD的界面加上一个开始按钮，“非常干净”“充满精神”和“活泼” 。&lt;/li&gt;
&lt;li&gt;系统依然没有对Adobe Flash提供内置支持。&lt;/li&gt;
&lt;li&gt;Windows Phone 7 将原生支持Marketplace等程序分发应用，并且将不再支持记忆卡安装应用。&lt;/li&gt;
&lt;li&gt;不再支持多任务，但应用可以通过一种“暂停”功能来令它退到后台，并且支持推送特性。&lt;/li&gt;
&lt;li&gt;Marketplace 拥有“try before you buy” 试用功能。&lt;/li&gt;
&lt;li&gt;并没有NETCF底层支持，不过也不排除正在开发新版。&lt;/li&gt;
&lt;li&gt;预计发布时间2010年9月。&lt;/li&gt;
&lt;li&gt;全面整合Zune功能。&lt;/li&gt;
&lt;li&gt;Windows Mobile Device Center将不再被使用，Zune软件才可以同步WM7。&lt;/li&gt;
&lt;li&gt;OEM界面将不再被支持运行，包括Sense UI / SPB Mobile Shell / Point UI / Infinity等界面。&lt;/li&gt;
&lt;li&gt;全面支持XBOX Gaming。&lt;/li&gt;
&lt;li&gt;全面支持各大社交网络&lt;/li&gt;
&lt;/ul&gt;

</content>
    </entry>
  
    <entry>
      <title>ROMCMD - 非常方便的 NB/NBH ROM 自动化拆解/合成工具</title>
      <link href="http://example.com/romcmd/"/>
      <updated>2009-12-26T12:56:31+08:00</updated>
      <id>http://example.com/romcmd</id>
      <content type="html">&lt;p&gt;欢迎使用 Yonsm.NET 提供 Windows Mobile ROM 制作工具！它能将繁杂的 ROM 制作过程自动化，带给您一个全新的完美体验。&lt;/p&gt;

&lt;p&gt;一、特性&lt;/p&gt;

&lt;p&gt; ◎ 拆解和合成 ROM 过程完全自动化。&lt;br/&gt;
 ◎ 分块式结构化批处理，易读、易修改定制。&lt;br/&gt;
 ◎ 支持主流的 HTC NBH 和 NB 模式（即针对 NB 和 NBH 文件均可）。&lt;br/&gt;
 ◎ 自动判断纯数据模式或额外数据模式的 NB 文件，适应性广（甚至支持 ASUS 大部分 NB 格式）。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;二、细节&lt;/p&gt;

&lt;p&gt; 简单说一下拆解 ROM 的过程：&lt;/p&gt;

&lt;p&gt;   NBH -(NBHExtract)-&gt;NB-(NBSplit)-&gt;PAYLOAD+EXTRA-(IMGFSFromNB)-&gt;BIN-(IMGFSToDUMP)-&gt;DUMP&lt;/p&gt;

&lt;p&gt;   NBH 是 HTC 的 ROM 发布格式，其中包含几个部分，比如 SPL、Radio、Splash、OS 等。&lt;br/&gt;
   NB 这里特指 NBH 拆解出来的 OS 部分。&lt;br/&gt;
   PAYLOAD+EXTRA 是 NB 的两各组成部分，有些机型只有 PAYLOAD 没有 EXTRA（比如 DOPOD T2222 和 ASUS P527），这种情况下 ROMCMD 会自动判断并跳过这个拆解步骤。&lt;br/&gt;
   BIN 是标准的 IMGFS 格式，似乎所有 WM ROM 解到这一步都是通用的了（包括微软的模拟器镜像）。&lt;br/&gt;
   DUMP 文件夹就是解开后的文件夹。&lt;/p&gt;

&lt;p&gt; 合成 ROM 的过程正好和上面相反，在这里就不多说了。&lt;/p&gt;

&lt;p&gt;三、使用&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ROMCMD 使用非常方便，要解开 ROM，只要在资源管理器中把 NB 或者 NBH 拖动到 ROMDUMP.bat 中，就能自动完成上面所说的拆解步骤，得到 DUMP 目录和注册表脚本。&lt;/p&gt;

&lt;p&gt;用法：ROMDUMP [ROM] [CMD]&lt;/p&gt;

&lt;p&gt; ROM  指定ROM文件名称，可以是NB或NBH文件。&lt;/p&gt;

&lt;p&gt; CMD  指定操作命令（默认将按顺序执行所有步骤）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  NBH2NB        转换NBH为NB  
  NB2BIN        转换NB为BIN（如果失败，将尝试转换NB为PAYLOAD）  
  NB2PAYLOAD    转换NB为PAYLOAD  
  PAYLOAD2BIN   转换PAYLOAD为BIN  
  BIN2DUMP      转换BIN为NDUMP  
  HV2REG        转换HV为REG  
  PAYLOAD2XIP   转换PAYLOAD为XIP（默认未启用，仅供测试）  
  DUMP2PKG      转换DUMP和XIP为PKG（默认未启用，仅供测试）  
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;您可以编辑 DUMP 文件夹中的内容来定制 ROM（具体如何定制是另外的话题，不多说）。为了处理方便，ROMCMD 还会导出 default.reg 和 user.reg 注册表文件到 NB/NBH 文件所在文件夹，这是标准的注册表脚本，已使用 SortReg 排序过滤，推荐使用 Registry Workshop 来编辑、用 Beyond Compare 来比较。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定制好 DUMP 文件夹和 default.reg/user.reg 后，只要把原始的 NB 或者 NBH 拖动到 ROMMAKE.bat 中，ROMCMD 将自动为您构建新的 NB 文件（文件名为 OUT.***.NB）。完成后会调用工具来转换 NB 为 NBH 文件（请自行选择 ROM 配置，也可以直接取消，ROMCMD 会保留 NB 文件，以便您使用其它 NBH 制作工具）。&lt;/p&gt;

&lt;p&gt;用法：ROMMAKE [ROM] [CMD]&lt;/p&gt;

&lt;p&gt; ROM  指定ROM文件名称，可以是NB或NBH文件。&lt;/p&gt;

&lt;p&gt; CMD  指定操作命令（默认将按顺序执行所有步骤）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  PKG2DUMP      转换PKG为DUMP（如果存在SYS目录，才会执行步骤）  
  REG2HV        转换HV为REG（如果存在SYS目录，将不执行此步骤）  
  DUMP2BIN      转换DUMP为BIN  
  BIN2NB        转换BIN为NB（如果有额外数据，将转换BIN为PAYLOAD）  
  BIN2PAYLOAD   转换BIN为PAYLOAD  
  PAYLOAD2NB    转换PAYLOAD为NB  
  NB2NBH        转换NBH为NB  
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;四、备注&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;更详细的 ROM 定制操作，比如用 CoXCo 解码 initflashfile.dat、BuildDSM、重定位模块等可选步骤，没有加入过到上面的自动化过程中。如果需要您可以手动操作，也可以修改 ROMCMD 批处理来自动化这个过程。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内置其他特殊改进过的工具（如 RGUComp 修改版 和 SortReg，排序注册表项目，方便REG文件对比（推荐用 Beyond Compare比较，用RegWorkShop编辑.reg文件）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;您可以为 ROMCMD.bat、ROMDUMP.bat 和 ROMMAKE.bat 创建快捷方式，并到放到系统的“SendTo”文件夹中，以后就可以在 NB 和 NBH 文件上点击右键，选择“发送到”来操作了。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当前版本中，DUMP2PKG 和 PKG2DUMP 命令可能不完善，暂时被禁用。请使用命令行参数或者修改批处理文件来调用此功能。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;五、致谢&lt;/p&gt;

&lt;p&gt; ◎ 感谢各位作者提供的 ROM 定制工具。&lt;br/&gt;
 ◎ 感谢您的测试结果和建议报告（如果有的话）。&lt;/p&gt;

&lt;p&gt;六、许可&lt;/p&gt;

&lt;p&gt; ◎ 除 CoXCo.exe、SortReg.exe、ROMDUMP.bat 和 ROMMAKE.bat 等文件外，本人未持有 ROMCMD 中其它的软件的版权，请以研究和学习为目的，合法使用。&lt;br/&gt;
 ◎ 如果您使用了此工具定制 ROM，建议在 ROM 发布的说明文档提及“使用 ROMCMD 生成”；如果您修改了 ROMCMD，建议继续公开和分享您的工作成果。&lt;br/&gt;
 ◎ 本人特此申明对 ROMCMD 之使用不提供任何保证，不保证无故障产生；亦不对任何用户使用 ROMCMD 所遭遇到的任何理论上的或实际上的损失承担责任。&lt;br/&gt;
 ◎ 如果您使用本软件，即表示已经默认接受了此协议。&lt;/p&gt;

&lt;p&gt;七、历史&lt;/p&gt;

&lt;p&gt; ■ 2008.08.30&lt;/p&gt;

&lt;p&gt;  ◎ 早期版本升级，更新至最新的 IMGFSTools，支持部分机器调整ROM空间大小。&lt;/p&gt;

&lt;p&gt; ■ 2009.12.25&lt;/p&gt;

&lt;p&gt; ◎ 重新制作，更广泛地支持和更完善的自动化操作。&lt;/p&gt;

&lt;p&gt; ■ 2009.12.30&lt;/p&gt;

&lt;p&gt; ◎ 进一步优化批处理文件，添加 PKG 模式支持（默认未启用，仅供测试）。&lt;/p&gt;

&lt;p&gt;要获取更多信息，请访问 WWW.YONSM.NET&lt;/p&gt;

&lt;p&gt;Yonsm&lt;br/&gt;
Yonsm@msn.com&lt;br/&gt;
WWW.Yonsm.NET&lt;br/&gt;
2009.12.30，杭州&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/ROMCMD.rar&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>WM5/6 PPC 一键安装软件包、词典包、游戏包和 GPS 包</title>
      <link href="http://example.com/software-packages-for-ppc/"/>
      <updated>2009-12-11T13:00:00+08:00</updated>
      <id>http://example.com/software-packages-for-ppc</id>
      <content type="html">&lt;p&gt;欢迎评估 Yonsm 收集的一键安装 PPC 软件包，只要轻轻敲击一下，就能安装所有的软件！&lt;/p&gt;

&lt;p&gt;一、特点&lt;/p&gt;

&lt;p&gt;◎ 所有软件都是简体中文的。&lt;/p&gt;

&lt;p&gt;◎ 所有软件都是绿色的，一键式安装。&lt;/p&gt;

&lt;p&gt;◎ 所有软件都是破解和注册的最好版本。&lt;/p&gt;

&lt;p&gt;二、使用&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;把所有文件复制到设备中的任意目录中，推荐复制到 \Storage Card\Tools、\Storage Card\Games 和 \Storage Card\GPS。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 PPC 中点击运行 CeleSetup.exe，几秒钟内即可完成安装设置。&lt;!-- more --&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;三、说明&lt;/p&gt;

&lt;p&gt;◎ 此软件包已在 Diamond 中完全测试可用。已测试在 WM5/6 QVGA/VGA 中均可运行，但部分软件存在功能限制（如全能名片王），另外有部分软件在 PPC 2003 下不适用。&lt;/p&gt;

&lt;p&gt;◎ 部分软件需要自己输入注册码，请在注册码输入框中，按提示的输入注册码。如果没有提示，请随意输入足够数目的任意英文字符即可。&lt;/p&gt;

&lt;p&gt;◎ 如果不需要其中的某个软件，请在安装之前自行删除目录即可。比如，不需要 CorePlayer，只要把 Tools\CorePlayer 目录删除即可。&lt;/p&gt;

&lt;p&gt;◎ 请使用读卡器复制文件，而不是 ActiveSync 连接。&lt;/p&gt;

&lt;p&gt;◎ MDict 词典需要单独下载。&lt;/p&gt;

&lt;p&gt;◎ 请勿单独提取出里面的国产软件公开发布！&lt;/p&gt;

&lt;p&gt;四、致谢&lt;/p&gt;

&lt;p&gt;◎ 感谢各软件的提供者。&lt;/p&gt;

&lt;p&gt;五、许可&lt;/p&gt;

&lt;p&gt;◎ 本人特别声明，不对此软件包中的软件提供技术支持和问题解答，如有问题请自行解决。&lt;br/&gt;
◎ 本人不持有其中绝大部分软件的所有权，此软件包仅用于 PPC 爱好者交流研究学习目的，非此目的请勿使用。&lt;br/&gt;
◎ 作者特此申明对本软件包之使用不提供任何保证，不对任何用户保证本软件包的适用性，不保证无故障产生；亦不对任何用户使用此软件包所遭遇到的任何理论上的或实际上的损失承担 责任。&lt;br/&gt;
◎ 如果您使用本软件包，即表示已经默认接受了此协议。&lt;/p&gt;

&lt;p&gt;要获取更多信息，请访问 WWW.YONSM.NET&lt;/p&gt;

&lt;p&gt;Yonsm&lt;br/&gt;
Yonsm@163.com&lt;br/&gt;
WWW.Yonsm.NET&lt;br/&gt;
2009.04.24，杭州&lt;/p&gt;

&lt;p&gt;分享 体验 思考&lt;/p&gt;

&lt;p&gt;2008.12.25  更新工具包中的大部分软件，支持 WM5/6 PPC VGA/QVGA，欢迎下载。&lt;br/&gt;
2009.01.01  更新词典库文件，和工具包中的 MDict 3.0 Beta1，支持 WikiPedia 20081222。&lt;br/&gt;
2009.04.24  更新了很多工具包中的软件，统一游戏包和 GPS 包风格，升级谷歌地图等。&lt;br/&gt;
2009.12.10  更新了工具包中的大部分软件，删减了其中12个软件到PPCExtras.zip中。&lt;/p&gt;

&lt;p&gt;下载工具包（25MB，2009.12.10）：&lt;br/&gt;
&lt;a href=&quot;/assets/PPCTools.zip&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3GTan&lt;br/&gt;
AlReader&lt;br/&gt;
AudioNotes&lt;br/&gt;
CeleTools.ccs&lt;br/&gt;
CoolWebCam&lt;br/&gt;
CorePlayer&lt;br/&gt;
FoxitReader&lt;br/&gt;
HandCalendar&lt;br/&gt;
HandCN&lt;br/&gt;
HiCalc&lt;br/&gt;
IMPlus&lt;br/&gt;
JBed&lt;br/&gt;
JPSKB&lt;br/&gt;
LibFetion&lt;br/&gt;
MDict&lt;br/&gt;
PhotoManager&lt;br/&gt;
QCellCore&lt;br/&gt;
QQ2008&lt;br/&gt;
Skype&lt;br/&gt;
SysTools&lt;br/&gt;
UCPlayer&lt;br/&gt;
UCWEB&lt;/p&gt;

&lt;p&gt;SysTools 包括：&lt;br/&gt;
Calculator.exe&lt;br/&gt;
CeleCmd.exe&lt;br/&gt;
QuickPad.exe&lt;br/&gt;
RadioTimer.exe&lt;br/&gt;
Resco&lt;br/&gt;
SimMgr.exe&lt;br/&gt;
SysMgr.exe&lt;br/&gt;
（以上工具建议添加到ROM中）&lt;/p&gt;

&lt;p&gt;下载扩展工具包（11MB，2009.12.10）：&lt;br/&gt;
&lt;a href=&quot;/assets/PPCExtras.zip&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BizCard&lt;br/&gt;
BusLine&lt;br/&gt;
CHMReader&lt;br/&gt;
EOM&lt;br/&gt;
FlashLite&lt;br/&gt;
ListPro&lt;br/&gt;
NewsBreak&lt;br/&gt;
PhatPad&lt;br/&gt;
PocketArtist&lt;br/&gt;
PocketRAR&lt;br/&gt;
Remote2PC&lt;br/&gt;
VoiceBook&lt;/p&gt;

&lt;p&gt;下载游戏包（10MB，2009.04.24）：&lt;br/&gt;
&lt;a href=&quot;/assets/PPCGames.zip&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载GPS包（1.3MB，2009.12.09，GPS 导航软件未提供，请自行下载）：&lt;br/&gt;
&lt;a href=&quot;/assets/PPCGPS.zip&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载词典包（87MB，2009.01.01）：&lt;br/&gt;
&lt;a href=&quot;/assets/PPCDicts.rar&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;其中词典包包含以下词典库：&lt;br/&gt;
1.常用词典：排版非常好的中英文词典（内含四部词典）&lt;br/&gt;
2.新华字典：不用说&lt;br/&gt;
3.掌上法典：很小，分发一下吧：）&lt;/p&gt;

&lt;p&gt;另外维基百科和维基文库因为太大未加入，推荐下载这里的 20081222 版维基百科（文库新版本下载地址暂未找到）：&lt;br/&gt;
MDD: http://www.rayfile.com/files/23a2ef14-d0b3-11dd-8f9a-0019d11a795f/&lt;br/&gt;
MDX: http://www.rayfile.com/files/63daba63-d0cc-11dd-9dca-0014221b798a/&lt;/p&gt;

&lt;p&gt;屏幕截图（实际情况可能稍有出入）&lt;br/&gt;
&lt;a href=&quot;/assets/PPCPack.Yonsm.WM5.png&quot;&gt;attachment/PPCPack.Yonsm.WM5.png&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;欢迎评测：）&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>10 月之行</title>
      <link href="http://example.com/october-tour/"/>
      <updated>2009-10-16T13:50:28+08:00</updated>
      <id>http://example.com/october-tour</id>
      <content type="html">&lt;p&gt;先随便记录一下，有空再详细攻略。&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ditu.google.cn/maps?f=q&amp;amp;source=embed&amp;amp;hl=zh-CN&amp;amp;geocode=&amp;amp;q=from:%E6%9D%AD%E5%B7%9E%E5%B8%82+to:%E9%95%BF%E6%B2%99%E5%B8%82+to:%E6%BE%A7%E5%8E%BF+to:%E9%95%BF%E6%B2%99%E5%B8%82+to:%E5%BC%A0%E5%AE%B6%E7%95%8C%E5%B8%82+to:%E7%8C%9B%E6%B4%9E%E6%B2%B3%E5%81%9C%E8%BD%A6%E5%9C%BA+to:%E5%90%89%E9%A6%96%E5%B8%82+to:%E5%87%A4%E5%87%B0%E5%8E%BF+to:26.492699,109.909973+to:%E9%80%9A%E9%81%93%E5%8E%BF+to:%E6%A1%82%E6%9E%97%E5%B8%82+to:%E9%98%B3%E6%9C%94%E5%8E%BF+to:%E5%B9%BF%E5%B7%9E%E5%B8%82+to:%E5%AE%9A%E5%8D%97%E5%8E%BF+to:%E6%9D%AD%E5%B7%9E%E5%B8%82&amp;amp;sll=27.527758,114.873047&amp;amp;sspn=16.267487,28.54248&amp;amp;brcurrent=3,0x31508e64e5c642c1:0x951daa7c349f366f,0%3B5,0,0&amp;amp;ie=UTF8&amp;amp;ll=26.450902,114.829102&amp;amp;spn=9.827153,10.986328&amp;amp;z=6&quot;&gt;查看大图&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;10.1&lt;br/&gt;
杭州-&gt;长沙&lt;/p&gt;

&lt;p&gt;10.2&lt;br/&gt;
长沙-&gt;常德-&gt;澧县&lt;/p&gt;

&lt;p&gt;10.3 1xx&lt;br/&gt;
澧县&lt;/p&gt;

&lt;p&gt;10.4&lt;br/&gt;
澧县&lt;/p&gt;

&lt;p&gt;10.5&lt;br/&gt;
灰汤温泉，车胎磕破了，轮毂也有小点痕迹，崩溃。倍耐力22/45 R17 PZero红胎，4S店报价1880，外面说1450，贼贵，都说没货要厂家发货。暂时硫化补了一下，到广州或回杭州再说——但愿不会有问题。&lt;/p&gt;

&lt;p&gt;10.6 长沙&lt;/p&gt;

&lt;p&gt;10.7 长沙&lt;/p&gt;

&lt;p&gt;10.8&lt;br/&gt;
家界，黄龙洞，晚上回来车钥匙锁在后备箱了，糟糕！绝大部分东西都锁在后备箱，只好等两三天从杭州快递另一个钥匙过来……：（&lt;/p&gt;

&lt;p&gt;10.9&lt;/p&gt;

&lt;p&gt;只有200块，只好在张家界发呆一天，原本是想在阳朔或凤凰才发呆的。还好下午拐弯抹角弄来1000大洋，明天可以去玩了。&lt;/p&gt;

&lt;p&gt;因为呆在宾馆，一直用手机当WM WiFi iRouter 上网，一下就将近100M流量，刚一问经然有超快的宽带，拿根网线就OK，晕倒！&lt;/p&gt;

&lt;p&gt;10.10&lt;br/&gt;
因为东西都锁在车里，辗转3道才弄到1000大洋，穿着拖鞋短袖去了天门山玩，冻个半死……&lt;/p&gt;

&lt;p&gt;10.11&lt;br/&gt;
终于到钥匙了，感谢感动感激中……&lt;br/&gt;
去猛洞河漂流，下雨，湿透。下午五点多从猛洞河出发本想去凤凰，走到吉首已经7点多了，雾大，在吉首住了一晚，酒店非常不错。&lt;/p&gt;

&lt;p&gt;10.12&lt;br/&gt;
在凤凰&lt;/p&gt;

&lt;p&gt;10.13&lt;br/&gt;
本想一天赶到桂林，但从怀化开始到通道县，209国道在修怀通高速路，其中的洪江到靖州走了102公里的黄泥路，用了4个小时，快崩溃了。从靖州到通道绕路走，夜里走深山老林似的公路，老婆都快吓哭了。8点半到了通道县，住下。&lt;/p&gt;

&lt;p&gt;10.14&lt;/p&gt;

&lt;p&gt;到桂林，发现有个前段时间补的胎漏气，另外一个好的轮胎似乎也漏气——凤凰到通道一路过来路况太差了，不堪回首——还好一路吃住都很好，很爽。&lt;/p&gt;

&lt;p&gt;发现桂林收费道路还特别多，湖南中张家界高速下来，一直走到广西的边境，从没收过路过桥费。进入广西龙胜，到桂林收费4次。&lt;/p&gt;

&lt;p&gt;10.14&lt;br/&gt;
到阳朔，发呆中……&lt;br/&gt;
桂林到阳朔短短60公里，又被收买路钱2次。&lt;/p&gt;

&lt;p&gt;待续……&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>CoBind - 拨通多个 ADSL 连接，大幅度提升网络速度</title>
      <link href="http://example.com/cobind/"/>
      <updated>2009-09-01T09:15:34+08:00</updated>
      <id>http://example.com/cobind</id>
      <content type="html">&lt;p&gt;副题：在Windows Socket SPI 层实现客户端负载均衡
翻出2005年的帖子，发现在今天看来依然还是好有创意啊……&lt;/p&gt;

&lt;p&gt;程序实现了轮番邦定RAS拨号连接IP地址。要使CoBind生效，必须先注册它，且必须先按亮ScrollLock键。&lt;/p&gt;

&lt;p&gt;代码示例，演示了Windows Socket SPI的使用，仅供参考： &lt;a href=&quot;/assets/CoBind%201.0.54.242.rar&quot;&gt;CoBind 1.0.54.242&lt;/a&gt;&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;有关WSP SPI的文章，请参看：&lt;a href=&quot;http://www.xfocus.net/articles/200304/518.html&quot;&gt;基于SPI的数据报过滤原理与实现&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我这里指的是杭州的 ADSL，特点是，不支持绑定多重连接到同一个 IP 地址。但是可以同一个用户名密码拨通多个连接，且不限速（或能提供比一个连接更大的速度）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/1251767462_431101de.png&quot;&gt;&lt;img src=&quot;/assets/1251767462_431101de.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;大致步骤：
1.安装 RASPPPoE，设置 PPPoE 协议属性（本地连接-&gt;属性，PPPoE 属性），启用多个“线数（WAN 端点）”（虚拟设备），如4个。重新启动系统。
2.建立多个 PPPoE 拨号连接，每个都能拨成功，此时已获取多个IP地址。但是，这并没有任何用处，因为绝大部分软件作为客户端上网时，都不会指定绑定某个 IP 地址的，系统总是选择最后拨通的那个连接来访问。气死！
为了解决问题，就要使每个连接之前，自动轮番绑定所有可能的 IP。
3.注册 CoBind.dll （RegSvr32.exe CoBind.dll），按亮 ScrollLock，CoBind 在每个程序访问网络时会弹出对话框提示，按需选择即可（默认一般确定即可）。（按亮ScrollLock仅仅是允许CoBind弹出提示，设置好后，下次无论是否按亮，均可生效）
4.要卸载，请注销CoBind.dll（RegSvr32.exe /u CoBind.dll）。&lt;/p&gt;

&lt;p&gt;感谢 風の語 提供的方法，直接用Windows自带的PPPoE就拿拨通多个连接，方便多了。不用装 RasPPPoE 之类的:&lt;/p&gt;

&lt;p&gt;发现在windows 2003可以不用装RASPPPoE的方法，（xp估计也可以，没试过）修改注册表里HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\Class\4D36E972-E325-11CE-BFC1-08002bE10318\0004
下的WanEndpoints的数值，修改为99，就可以同时连接99个PPPOE拨号，不过这么多个连接CPU要顶得住
重新启动就可以在系统建立并连接多个PPPOE拨号了。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>HTC Touch Diamond 一站式 ROM OS</title>
      <link href="http://example.com/diamond-rom/"/>
      <updated>2009-08-14T15:59:59+08:00</updated>
      <id>http://example.com/diamond-rom</id>
      <content type="html">&lt;p&gt;欢迎使用 Yonsm.NET 定制的 HTC Touch Diamond 简体中文 ROM OS！它将一站式地帮您解决 PPC 中各种繁琐的初始化设置，带给您一个全新的完美体验。&lt;/p&gt;

&lt;p&gt;一、特性&lt;/p&gt;

&lt;p&gt; ◎ 最新稳定内核。&lt;br/&gt;
 ◎ 完美定制，细致周到。&lt;br/&gt;
 ◎ 配备各种必须的精选工具。&lt;br/&gt;
 ◎ 基于 CeleCmd，支持扩展和再定制。&lt;br/&gt;
 ◎ ROM OS 纯净清洁，扩展组件可选择性启用。&lt;br/&gt;
 ◎ 支持一键安装软件和游戏包，为 PPC 用户提供了大量精选的各种软件和游戏。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;二、使用&lt;/p&gt;

&lt;p&gt; 请按严格安装以下步骤操作：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;如果你的机器没有刷 HARD-SPL 解锁，请先刷 HARD-SPL 解锁（细节请参考网上资料）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 ActiveSync 连接您的 PPC 到电脑中，运行 RUU.exe 按提示操作即可。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;刷机硬启调整屏幕后，进入 ROM OS 可选设置屏幕，请稍等出现 CeleCmd 的设置界面，请自行选择需要的设置。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;建议普通用户下载一键安装软件包，里面提供了我使用的各种软件和游戏，都是破解或注册版本。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;三、更改细节&lt;/p&gt;

&lt;p&gt; ROM OS 基于 HuDA 的 ROM 模板，并在此基础上进行了方便细心的改进：&lt;/p&gt;

&lt;p&gt; ■ （详细细节请实际使用，此处省略）&lt;/p&gt;

&lt;p&gt;四、刷机失败解决方案&lt;/p&gt;

&lt;p&gt; 请参见网上的论坛。&lt;/p&gt;

&lt;p&gt;五、问答&lt;/p&gt;

&lt;p&gt; ■ 如何扩展定制此 ROM？&lt;/p&gt;

&lt;p&gt; 答：Yonsm.NET 将提供 ROMCMD for Diamond。解开 ROM 后，看以下几部分：批处理文件、InitFlashFiles、CeleSetup.ccs、CeleCmd 的帮助（附件-&gt;命令解释器-&gt;菜单-&gt;帮助）。&lt;/p&gt;

&lt;p&gt;六、致谢&lt;/p&gt;

&lt;p&gt; ◎ 感谢 Jane 陪我度过的欢快时光，这是专门为她使用这个手机而制作的 ROM：）&lt;br/&gt;
 ◎ 感谢各位作者提供的 ROM 定制工具。&lt;br/&gt;
 ◎ 感谢您的测试结果和建议报告（如果有的话）。&lt;br/&gt;
 ◎ 感谢您使用本 ROM（如果您使用的话）。&lt;/p&gt;

&lt;p&gt;七、许可&lt;/p&gt;

&lt;p&gt; ◎ 本人未持有 ROM 及其中的软件的版权，请以研究和学习为目的，合法使用。&lt;br/&gt;
 ◎ 如果您根据我提供的方法以及工具修改了 ROM，建议继续公开和分享您的工作成果。&lt;br/&gt;
 ◎ 本人特此申明对 ROM 之使用不提供任何保证，不对任何用户保证本 ROM 的适用性，不保证无故障产生；亦不对任何用户使用此 ROM 所遭遇到的任何理论上的或实际上的损失承担责任。&lt;br/&gt;
 ◎ 如果您使用本软件，即表示已经默认接受了此协议。&lt;/p&gt;

&lt;p&gt;八、历史&lt;/p&gt;

&lt;p&gt; ■ 2008.11.22&lt;/p&gt;

&lt;p&gt;  ◎ 第一个版本。&lt;/p&gt;

&lt;p&gt; ■ 2008.12.23&lt;/p&gt;

&lt;p&gt;  ◎ 第二个版本。使用全新的 ROM 核心，全新的定制方法。&lt;br/&gt;
  ◎ 此版本 ROM 模板将会公开提供下载。&lt;/p&gt;

&lt;p&gt; ■ 2008.12.28&lt;/p&gt;

&lt;p&gt;  ◎ 改进上一版本的一些小问题。&lt;/p&gt;

&lt;p&gt; ■ 2009.01.02&lt;/p&gt;

&lt;p&gt;  ◎  修改上个版本中 Outlook 联系人和日历无法打开等问题。&lt;br/&gt;
  ◎  升级 Manila 为 1.2。&lt;br/&gt;
  ◎  其它方便性修改。&lt;/p&gt;

&lt;p&gt; ■ 2009.01.12&lt;/p&gt;

&lt;p&gt;  ◎  更新 CeleCmd，解决联系人备份脚本的问题。&lt;br/&gt;
  ◎  替换记事本为 QuickPad，新鲜出炉。&lt;br/&gt;
  ◎  替换计算器为新发现的增强版本（支持科学模式和编程模式，但文件只有140K），感谢 Kavana 的的支持。&lt;br/&gt;
要获取更多信息，请访问 WWW.YONSM.NET&lt;/p&gt;

&lt;p&gt;■ 2009.08.13&lt;/p&gt;

&lt;p&gt;  ◎  更新为最新的、稳定的 2.09 OEM 驱动。&lt;br/&gt;
  ◎  更新为最新的 QuickPad 等软件。&lt;br/&gt;
  ◎  压缩包内含 Radio 1.13.25.24，非常稳定、省电、快速搜星的 Diamond Radio。&lt;br/&gt;
  ◎  其它小改进。&lt;br/&gt;
  ◎  在网上现在又及其多的 Diamond ROM OS，我刷了其中大部分网友顶的较多的。亦然发现我这个 ROM 是最稳定、最细致、最完美的。另外，现在的 WM6.5 基本上都是粗制滥造——从 Microsoft 粗制滥造 WM6.5 系统开始，到网友粗制滥造 ROM OS&lt;/p&gt;

&lt;p&gt;要获取更多信息，请访问 WWW.YONSM.NET&lt;/p&gt;

&lt;p&gt;Yonsm&lt;br/&gt;
Yonsm@163.com&lt;br/&gt;
WWW.Yonsm.NET&lt;br/&gt;
2009.01.12，杭州&lt;/p&gt;

&lt;p&gt;2009.08.13 ROM&lt;br/&gt;
&lt;a href=&quot;/assets/Diamond.Yonsm.2009.08.13.rar&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2009.08.13 模板&lt;br/&gt;
&lt;a href=&quot;/assets/Diamond.Kitchen.Yonsm.2009.08.13.zip&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PDAFANS 论坛讨论和反馈，感谢 scomper 开贴：&lt;br/&gt;
http://bbs.pdafans.com/viewthread.php?tid=652776&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/Diamond.Yonsm.png&quot;&gt;&lt;img src=&quot;/assets/Diamond.Yonsm.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>[转载]OpenMP 编程指南</title>
      <link href="http://example.com/openmp-programming-guide/"/>
      <updated>2009-07-30T08:25:10+08:00</updated>
      <id>http://example.com/openmp-programming-guide</id>
      <content type="html">&lt;p&gt;进入多核时代后，必须使用多线程编写程序才能让各个CPU核得到利用。在单核时代，通常使用操作系统提供的API来创建线程，然而，在多核系统中，情况发生了很大的变化， 如果仍然使用操作系统API来创建线程会遇到一些问题。&lt;!-- more --&gt;具体来说，有以下三个问题：&lt;/p&gt;

&lt;p&gt;1）CPU核数扩展性问题&lt;/p&gt;

&lt;p&gt;多核编程需要考虑程序性能随CPU核数的扩展性，即硬件升级到更多核后，能够不修改程序就让程序性能增长，这要求程序中创建的线程数量需要随CPU核数变化，不能创建固定数量的线程，否则在CPU核数超过线程数量上的机器上运行，将无法完全利用机器性能。虽然通过一定方法可以使用操作系统API创建可变化数量的线程，但是比较麻烦，不如OpenMP方便。&lt;/p&gt;

&lt;p&gt;2）方便性问题&lt;/p&gt;

&lt;p&gt;在多核编程时，要求计算均摊到各个CPU核上去，所有的程序都需要并行化执行，对计算的负载均衡有很高要求。这就要求在同一个函数内或同一个循环中，可能也需要将计算分摊到各个CPU核上，需要创建多个线程。操作系统API创建线程时，需要线程入口函数，很难满足这个需求，除非将一个函数内的代码手工拆成多个线程入口函数，这将大大增加程序员的工作量。使用OpenMP创建线程则不需要入口函数，非常方便，可以将同一函数内的代码分解成多个线程执行，也可以将一个for循环分解成多个线程执行。&lt;/p&gt;

&lt;p&gt;3）可移植性问题&lt;/p&gt;

&lt;p&gt;目前各个主流操作系统的线程API互不兼容，缺乏事实上的统一规范，要满足可移植性得自己写一些代码，将各种不同操作系统的api封装成一套统一的接口。OpenMP是标准规范，所有支持它的编译器都是执行同一套标准，不存在可移植性问题。&lt;/p&gt;

&lt;p&gt;综上所述，在多核编程中，使用OpenMP就很有必要，下面列出以前发表在我的CSDN博客中的OpenMP文章，供大家参考。&lt;/p&gt;

&lt;p&gt;1、OpenMP并行程序设计（一）&lt;/p&gt;

&lt;p&gt;介绍OpenMP程序在并行计算时的效率，在双核CPU上效率增加了整整一倍。 &lt;a href=&quot;http://blog.csdn.net/drzhouweiming/archive/2006/08/28/1131537.aspx&quot;&gt;阅读全文&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2、OpenMP并行程序设计（二）&lt;/p&gt;

&lt;p&gt;1、fork/join并行执行模式的概念 2、OpenMP指令和库函数介绍 3、parallel 指令的用法 4、for指令的使用方法 5 sections和section指令的用法。&lt;a href=&quot;http://blog.csdn.net/drzhouweiming/archive/2006/09/04/1175848.aspx&quot;&gt;阅读全文&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3、OpenMP中的数据处理子句&lt;/p&gt;

&lt;p&gt;本文主要介绍了OpenMP中的private、firstprivate、lastprivate、threadprivate、reduction、copyin、copyprivate等数据处理子句的用法。 &lt;a href=&quot;http://blog.csdn.net/drzhouweiming/archive/2008/01/10/2033276.aspx&quot;&gt;阅读全文&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4、OpenMP中的任务调度&lt;/p&gt;

&lt;p&gt;本文主要介绍了OpenMP中任务调度子句schedule的使用方法。&lt;a href=&quot;http://blog.csdn.net/drzhouweiming/archive/2007/10/26/1844762.aspx&quot;&gt;阅读全文&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5、OpenMP创建线程中的锁及原子操作性能比较&lt;/p&gt;

&lt;p&gt;主要比较了原子操作，Windows CriticalSection， OpenMP库带的锁在单任务运行情况下和多任务运行情况下的性能情况，在多核CPU上，多任务的锁竞争花费的时间是单任务时的锁运行花费时间的18倍。锁竞争带来的效率下降完全出乎意料之外，由此也可见多核编程和单核多线程编程是有很大区别的。 &lt;a href=&quot;http://blog.csdn.net/drzhouweiming/archive/2007/07/13/1689853.aspx&quot;&gt;阅读全文&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6、OpenMP程序设计的两个小技巧&lt;/p&gt;

&lt;p&gt;讲述了如何动态设置线程数量以适应硬件和软件的扩展性，如何将嵌套循环并行化的技巧。 &lt;a href=&quot;http://blog.csdn.net/drzhouweiming/archive/2008/05/23/2472454.aspxx&quot;&gt;阅读全文&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上面列出的这些OpenMP知识，属于初步的入门知识，如果需要进一步深入掌握OpenMP或者了解其实现原理，则需要看更多的参考文献。下面列出我写的《多核计算与程序设计》一书的第3章OpenMP程序设计中的参考文献，供需要深入掌握的人参考。其中的文献【2】讲解了OpenMP的实现原理。&lt;/p&gt;

&lt;p&gt;【1】           Ananth Grama, Anshul Gupta，“并行计算导论”，张武等译，机械工业出版社，2005.01&lt;/p&gt;

&lt;p&gt;【2】           Barbara Chapman， “How OpenMP is Compiled ”，http://cobweb.ecn.purdue.edu/ParaMount/iwomp2008/documents/chapman-underthehood&lt;/p&gt;

&lt;p&gt;【3】           Bruce McMillin等，“Parallel Algorithm Fundamentals and Analysis”，http://citeseer.ist.psu.edu/mcmillin93parallel.html&lt;/p&gt;

&lt;p&gt;【4】           Common Language Infrastructure (CLI) Partitions I to VI http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-335.pdf&lt;/p&gt;

&lt;p&gt;【5】           Introduction to OpenMP，A Directive-based API for Parallel Processing on Shared-memory Computers，http://scv.bu.edu/documentation/tutorials/OpenMP/&lt;/p&gt;

&lt;p&gt;【6】           Michael J. Quinn, “MPI与OpenMP并行程序设计”，陈文光等译，清华大学出版社，2004.10&lt;/p&gt;

&lt;p&gt;【7】           Mitsuhisa Sato, Shigehisa Satoh, Kazuhiro Kusano and Yoshio Tanaka, “Design of OpenMP Compiler for an SMP Cluster”,&lt;/p&gt;

&lt;p&gt;http://www.hpcs.is.tsukuba.ac.jp/~msato/pdplab/papers/ewomp99.pdf&lt;/p&gt;

&lt;p&gt;【8】           MSDN帮助材料&lt;/p&gt;

&lt;p&gt;ms-help://MS.VSCC.v80/MS.MSDN.v80/MS.VisualStudio.v80.chs/dv_vclang/html/652414c5-78ed-4b7f-8283-1a9fe4c5e78d.htm&lt;/p&gt;

&lt;p&gt;【9】           Omni OpenMP compiler, http://phase.hpcc.jp/omni/home.html.&lt;/p&gt;

&lt;p&gt;【10】       OpenMP2.0规范     http://www.openmp.org/&lt;/p&gt;

&lt;p&gt;【11】       OpenMP2.5规范     http://www.openmp.org/&lt;/p&gt;

&lt;p&gt;【12】       OpenMP: Simple, portable, scalable SMP Programming, http://www.OpenMP.org.&lt;/p&gt;

&lt;p&gt;【13】       Rudolf Eigenmann and Timothy G. mattson. “OpenMP tutorial, part 2: Advanced OpenMP.”， http://www.cise.ufl.edu/research/ParallelPatterns/sc01-omp-tut-advanced.ppt.&lt;/p&gt;

&lt;p&gt;【14】       Ruud van der Pas ，“An Introduction Into OpenMP”，http://www.nic.uoregon.edu/iwomp2005/iwomp2005_tutorial_openmp_rvdp.pdf&lt;/p&gt;

&lt;p&gt;【15】       Sanjiv Shah, Grant Haab, Paul Petersen, &amp;amp; Joe Throop，“Flexible Control Structures for Parallelism in OpenMP”，http://www.it.lth.se/ewomp99/papers/grant.pdf&lt;/p&gt;

&lt;p&gt;【16】       Shameem Akhter等，“多核程序设计技术－通过软件多线程提升性能”，电子工业出版社，2007.03&lt;/p&gt;

&lt;p&gt;【17】       Special issue on OpenMP and its applications. Scientific Programming, 11(2),2003.&lt;/p&gt;

&lt;p&gt;【18】       Y. Charlie Hu, Honghui Lu, Alan L. Cox, and Willy Zwaenepoel. “OpenMP for networks of SMPs”，In Proceedings of 13th International Parallel Processing Symposium and 10th Symposium on Parallel and Distributed Processing, page 302-310. IEEE Computer Society, 1999.&lt;/p&gt;

&lt;p&gt;转自：http://software.intel.com/zh-cn/blogs/2009/04/20/openmp-2/&lt;br/&gt;
作者：Zhouweiming 周伟明&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>终于搞定了 BlackBerry 9530 EVDO 上网（手机+电脑Modem）</title>
      <link href="http://example.com/blackberry-9530-evdo-modem/"/>
      <updated>2009-07-17T05:24:02+08:00</updated>
      <id>http://example.com/blackberry-9530-evdo-modem</id>
      <content type="html">&lt;p&gt;朋友弄了张430多块钱的电信CDMA上网账号，想在黑莓 9530 中上网，并用作电脑的Modem上网，几经折腾，终于搞定了。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;在此记录一下，有需要的人可以尝试。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 获取A-KEY、IMSI、ESN&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A-KEY：16位的HEX数字（如E886************），用于用户鉴权，只能从电信内部人士得到（网上都这样说，暂且就这样听吧）。&lt;/p&gt;

&lt;p&gt;ESN： 是16位的HEX数字（如80******），这个可以从UIM卡中读取（用CDMA Workshop 3.41，官方下载Dem版本）。或者……把在9530中拨打 ##000000 进入查看手机的ESN，给电信内部人士，叫他重新绑定你的手机ESN到IMSI（和A-KEY？）（我就是这种方法，因为我写入UIM卡的ESN到手机失败了——注意，初始情况下，手机的ESN不是UIM卡的ESN）。&lt;/p&gt;

&lt;p&gt;IMSI： 是15位的数字（如4600309********），手机号码的内部形式，这个应该可以从UIM卡中读取（不过我是另寻途径搞得）。同时IMSI也是EVDO的上网AN/AAA账号，其实可以打10000咨询服务人员。&lt;/p&gt;

&lt;p&gt;EVDO上网密码：打10000咨询，服务小姐可能啥也不知道，就问15位的账号（就是IMSI）和16位的密码。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 写入 A-KEY、IMSI、ESN 到 9530&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;IMSI：9530中拨打##000000，进入工程模式，在IMSI_S一栏输入 IMSI然后Save即可（需重启，请耐心等待）。&lt;/p&gt;

&lt;p&gt;A-KEY：上面的方法中，貌似也能写入A-KEY，但好像不会成功的。能成功的方法，见这里：http://bbs.maxpda.com/thread-196588-1-4.html。&lt;/p&gt;

&lt;p&gt;用到的工具 CDMA Workshop 3.4.1 Demo（注意：网上的其他版本的破解版有病毒）:&lt;br/&gt;
http://www.cdma-ware.com/workshop.html&lt;/p&gt;

&lt;p&gt;ESN：见这里：http://honeyhan.cn/200906/18_1023.html，但是，我尝试了无数次，失败了！只好另寻途径，把自己手机的ESN给电信“内部人士”，叫他帮忙用收集的ESN绑定一个新的IMSI（和A-KEY），所以我就没改变手机的ESN了。&lt;/p&gt;

&lt;p&gt;到此，应该能打电话了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 导入ServiceBook，支持手机上网&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;具体操作：http://bbs.pgcw.com.cn/dispbbs.asp?boardid=67&amp;id;=30495&amp;page;=0&amp;move;=next&lt;/p&gt;

&lt;p&gt;Service Book 我用的是这里的：http://www.52blackberry.com/viewthread.php?tid=252900&lt;/p&gt;

&lt;p&gt;WinLoader：http://chinawrc.blog.enorth.com.cn/article/242417.shtml&lt;/p&gt;

&lt;p&gt;这时候，用手机的浏览器能上网了，不过是 CDMA1X 的，速度比较慢。&lt;br/&gt;
我这里，依然有个问题：自带的浏览器上网，如果久了，会突然不能上网，Google 地图等其他软件均不能上网，拔电池重启又行了。不知何故（刷151OS之前手机 中国移动 EDGE 上网一直都很稳定的，不过Service Book 不一样）。不过下文的用作电脑的调制解调器方式，很稳定，很久都OK。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. 导入PRL，支持EVDO&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我用到的 PRL 文件从这里下载：http://www.52blackberry.com/viewthread.php?tid=252900&lt;/p&gt;

&lt;p&gt;操作方法：http://www.52blackberry.com/viewthread.php?tid=214199&lt;/p&gt;

&lt;p&gt;补充说明：上面的操作方法语焉不详，我补充一下，必须用QPST 2.7.264 或更新的版本，以下QPST操作在更改数据之前，请首先 Read From Phone 一下。&lt;br/&gt;
1) QPST Configuration 好端口后，在 Service Programming 中，ROAM页面，导入PRL文件，自动重启;&lt;br/&gt;
 2) PPP Config 页面，点击 Um，User Password 都填入“card”，并勾上Req PW enc，点“Write to Phone”（不确定这步骤可能不需要，就当有多不坏菜吧）&lt;br/&gt;
3) 在PPP Config 页面，点击AN，User 输入你的IMSI，密码输入EVDO的密码（前面说过的，拨打10000号可以问到，分别是15位和16为），并勾上Req PW enc，点“Write to Phone”（这部关键）。&lt;br/&gt;
4) 其他操作，看这里吧 http://www.52blackberry.com/viewthread.php?tid=214199。&lt;br/&gt;
5) Home SID 从这里查：http://bbs.pcpop.com/090114/4816107.html&lt;/p&gt;

&lt;p&gt;用到的工具 QPST 2.7.264 （注意：必须是这个版本或者更高版本，否则不能写入ROAM PRL和PPP的AN/AAA）：&lt;br/&gt;
http://www.shuaji.net/down/soft/dopod/2009/2-12/down09212973261.shtml&lt;/p&gt;

&lt;p&gt;这时候，手机亦应能EVDO上网了，确认方法（手机启动后，一直显示 1xev，上网后也不改变，如果又变成1x，说明账号密码不对）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. 设置拨号连接，支持用作电脑 Modem&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;把手机接上电脑中，控制面板调制解调器中，选择黑莓“标准调制解调器”，属性，调制解调器初始命令（作用是启用手机的调制解调器模式）：&lt;br/&gt;
AT+CGDCONT=1,&quot;ip&quot;,&quot;ctnet&quot;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;2) 新建拨号连接，设置如下（杭州的设置，其他地方应该也是这样？）：&lt;/p&gt;

&lt;p&gt;号码：#777&lt;br/&gt;
用户名：ctnet@mycdma.cn&lt;br/&gt;
密码：vnet.mobi&lt;/p&gt;

&lt;p&gt;然后拨号，可以看到手机顶部出现“调制解调器模式启用”的文字，小写的 1xev 也变成大写 1XEV 了。到电信网站上下载点东西看看，速度超级快（300KB/s），不过到其他网站上则可能慢一些（限速啦？）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. 评论&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;电脑上下载中国电信的东西，速度竟然能达到300KB/s，下载Yonsm.NET的东西稳定保持在150KB/s以上，电信的3G才是真正的3G！TD这种垃圾，继续爱国去吧！&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>iPhone 开发秘籍试读样章 CHM 版</title>
      <link href="http://example.com/iphone-development-secrets/"/>
      <updated>2009-07-09T04:23:42+08:00</updated>
      <id>http://example.com/iphone-development-secrets</id>
      <content type="html">&lt;p&gt;网上看到《iPhone 开发秘籍》即将要发行，看了一下出来的三个试读样章，都是比较有用的章节，赞一个。费了不少功夫去掉广告之类的，制作成CHM，需要的可以下载。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;下面有购买链接，顺便帮作者和译者（不认识）做个广告吧：）&lt;/p&gt;

&lt;p&gt;书名：iPhone 开发秘籍（试读样章）&lt;br/&gt;
制作：Yonsm（http://www.yonsm.net）&lt;br/&gt;
转自：http://book.51cto.com/art/200906/131195.htm&lt;br/&gt;
购买：http://www.china-pub.com/192624&amp;ref;=ps&lt;/p&gt;

&lt;p&gt;前言与目录 &lt;br/&gt;
iPhone开发秘籍 前言&lt;br/&gt;
iPhone开发秘籍 目录&lt;/p&gt;

&lt;p&gt;译者序 &lt;br/&gt;
iPhone开发秘籍 译者序&lt;/p&gt;

&lt;p&gt;第4章 警告用户 &lt;br/&gt;
4.1 通过警告直接与用户对话&lt;br/&gt;
4.1.1 记录结果&lt;/p&gt;

&lt;p&gt;4.1.2 构建警告&lt;br/&gt;
4.1.3 显示警告&lt;/p&gt;

&lt;p&gt;4.2　秘诀：创建多行按钮显示&lt;br/&gt;
4.3　秘诀：自动计时的无按钮警告&lt;/p&gt;

&lt;p&gt;4.4　秘诀：请求用户的文本输入&lt;br/&gt;
4.5　秘诀：显示简单菜单&lt;/p&gt;

&lt;p&gt;4.6　&quot;请稍候&quot;：向用户显示进度&lt;br/&gt;
4.7　秘诀：调用基本的文档中未记录的..&lt;/p&gt;

&lt;p&gt;4.8　秘诀：使用UIActivityIndicatorV..&lt;br/&gt;
4.9　秘诀：构建UIProgressView&lt;/p&gt;

&lt;p&gt;4.10　秘诀：添加自定义、可轻击的覆..&lt;br/&gt;
4.11　秘诀：构建下滑式警告&lt;/p&gt;

&lt;p&gt;4.12　秘诀：添加状态栏图像&lt;br/&gt;
4.13　添加应用程序标记&lt;/p&gt;

&lt;p&gt;4.14　秘诀：简单的音频警告&lt;br/&gt;
4.15　小结&lt;/p&gt;

&lt;p&gt;第8章 控件 &lt;br/&gt;
8.1 秘诀：构建简单的按钮&lt;br/&gt;
8.1.1 UIButton类&lt;/p&gt;

&lt;p&gt;8.1.2 构建自定义按钮&lt;br/&gt;
8.1.3 玻璃按钮（glass button）&lt;/p&gt;

&lt;p&gt;8.2 秘诀：向按钮添加动画元素&lt;br/&gt;
8.3 秘诀：为按钮响应制作动画效果&lt;/p&gt;

&lt;p&gt;8.4 秘诀：定制开关&lt;br/&gt;
8.4.1 定制UIAlertView按钮&lt;/p&gt;

&lt;p&gt;8.5 秘诀：添加自定义滑块缩略图&lt;br/&gt;
8.5.1 向滑块添加文本&lt;/p&gt;

&lt;p&gt;8.6 秘诀：关闭UITextField键盘&lt;br/&gt;
8.7 秘诀：关闭UITextView键盘&lt;/p&gt;

&lt;p&gt;8.8 秘诀：向文本视图添加一个撤销（..&lt;br/&gt;
8.9 秘诀：创建一个基于文本视图的HT..&lt;/p&gt;

&lt;p&gt;8.10 秘诀：构建一个交互搜索栏&lt;br/&gt;
8.11 秘诀：添加标注（callout）视图&lt;/p&gt;

&lt;p&gt;8.12 添加一个页面指示器控件&lt;br/&gt;
8.13 秘诀：定制工具栏&lt;/p&gt;

&lt;p&gt;8.14 小结&lt;/p&gt;

&lt;p&gt;第10章 连接服务 &lt;br/&gt;
10.1 秘诀：添加自定义设置束&lt;br/&gt;
10.2 秘诀：使应用程序支持自定义URL..&lt;/p&gt;

&lt;p&gt;10.3.1 测试网络状态&lt;br/&gt;
10.3.2 恢复本地IP地址&lt;/p&gt;

&lt;p&gt;10.3.3 查询站点的IP地址&lt;br/&gt;
10.3.4 检查站点可用性&lt;/p&gt;

&lt;p&gt;10.4 秘诀：与iPhone数据库交互&lt;br/&gt;
10.5 秘诀：将XML转换为树&lt;/p&gt;

&lt;p&gt;10.6 秘诀：存储和检索密钥链项&lt;br/&gt;
10.6.1 存储多个密钥链值&lt;/p&gt;

&lt;p&gt;10.6.2 密钥链持久化&lt;br/&gt;
10.7 发送和接收文件&lt;/p&gt;

&lt;p&gt;10.8 秘诀：构建一个简单的基于Web的..&lt;br/&gt;
10.8 秘诀：构建一个简单的基于Web的..&lt;/p&gt;

&lt;p&gt;10.9 通知推送&lt;br/&gt;
10.10 小结&lt;/p&gt;

&lt;p&gt;下载：&lt;br/&gt;
&lt;a href=&quot;/assets/iPhoneCookBook.chm&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>BlackBerry 9530 使用感受</title>
      <link href="http://example.com/blackberry-9530/"/>
      <updated>2009-07-06T05:05:14+08:00</updated>
      <id>http://example.com/blackberry-9530</id>
      <content type="html">&lt;p&gt;前段时间被人送了个 BlackBerry 9530，琢磨了两天，如果不是从最终用户的角度看的话，简直是个非常差的设计——Java系统永远是那么的轻浮（不知道Andriod表现是否如此）。&lt;!-- more --&gt;这是一个向运营商示好的系统设计——不是最终用户（iPhone？），也不是开发者的（WM？）。&lt;/p&gt;

&lt;p&gt;正好有朋友830电板不行了，于是又送了，实在没精力和兴趣去继续琢磨这个。&lt;/p&gt;

&lt;p&gt;下面呢……没了。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;分布式GPS终端位置收集（GMatrix+GCell） ，一个PPC（SP应该也行）GPS 位置收集的测试包，可以收集多个PPC GPS终端的位置，并输出为KML（在Google地球和Google地图中查看）。仅为验证用户，半成品，包含源代码。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/GMatrix.zip&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>我会 iPhone 开发啦……</title>
      <link href="http://example.com/my-iphone-development/"/>
      <updated>2009-06-27T00:39:24+08:00</updated>
      <id>http://example.com/my-iphone-development</id>
      <content type="html">&lt;p&gt;纪念一下，终于重回小学生学习的历程，目前到了初中快毕业的水平了。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;青年不再，杰出依然——就是脑子似乎没那么好使了：（&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>浙西大峡谷，第一次露营</title>
      <link href="http://example.com/my-first-camp-at-west-zhejiang-canyon/"/>
      <updated>2009-06-03T02:58:56+08:00</updated>
      <id>http://example.com/my-first-camp-at-west-zhejiang-canyon</id>
      <content type="html">&lt;p&gt;　　一大早就在半睡的状态下被LG强行拉起，就这样迷迷糊糊的准备出发了......&lt;/p&gt;

&lt;p&gt;　　接上朋友Yicho，再与老四、WJ、村长他们的车会合后，一行六个“浩浩荡荡”地出发了，目的地——浙西大峡谷，我们来了！路上行程很简单，从市区转到留下上杭徽高速，在浙西大峡谷（龙岗收费站）的出口下去，走S102瞬间到达龙岗镇后转到S209就可直达售票口。如果你也像我家LG一样“无GPS寸步难行”的话，那一路就更简单了，根据指示一路到底就OK了。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ditu.google.cn/maps?f=d&amp;amp;source=embed&amp;amp;saddr=30.265591,120.101509&amp;amp;daddr=%EF%BC%90%EF%BC%92%E7%9C%81%E9%81%93+to:%E6%B5%99%E6%B1%9F%E7%9C%81%E6%9D%AD%E5%B7%9E%E5%B8%82%E4%B8%B4%E5%AE%89%E5%B8%82%E5%A4%A7%E5%B3%A1%E8%B0%B7%E9%95%87+to:%E6%9C%AA%E7%9F%A5%E8%B7%AF%E6%AE%B5&amp;amp;geocode=%3BFRJDzAEdFAUaBw%3B%3BFYQ7zgEd0KAZBw&amp;amp;hl=zh-CN&amp;amp;mra=dme&amp;amp;mrcr=0&amp;amp;mrsp=0&amp;amp;sz=14&amp;amp;sll=30.271966,120.118332&amp;amp;sspn=0.057226,0.11158&amp;amp;ie=UTF8&amp;amp;brcurrent=3,0x344b62ffb0972b01:0x4705b4b7a5248c75%3B5,0&amp;amp;ll=30.207158,119.108105&amp;amp;spn=0.126099,0.085831&amp;amp;z=13&quot;&gt;查看大图&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;　　先买票，票价（联票）110/人（后来想想似乎没必要，所谓也不咋的“景点”都没去玩），20/车（可开车入内，别看官方网站说的不能开车），因为“响应ZF号召”，我们带了杭州的旅游消费券（在杭州的话可以到19楼申请，每人可申请200元），所以略有节省，最终包括停车费为90/人。一路沿着山脚前行，道路比较窄，两车交汇或者让行都有点紧张，在我的唠叨下LG一路小心翼翼。因为时间还早，决定先到白马崖景点看看之后再吃午饭。沿着山一路盘旋而上，在没有GPS的帮助下，我们终于找到了传说中大峡谷“最好的景点”（当地人语）。&lt;/p&gt;

&lt;p&gt;　　进入白马崖，我们顺着景区道路一路向上爬，不过整体感觉不是很吃力，毕竟地方比较小。说到景色，个人觉得没有大家形容的那样好，只能说一般吧，不过这里的水还是比较让人喜欢，非常清澈，非常干净，冰凉冰凉的，相比起其它这个还是比较难见的。山上很多卖小吃的点，有一串串的笋，土豆，豆腐干，都尝了一遍，感觉还是不错滴:)（总体感觉当地人还算比较厚道）。下山的路上有点小小的惊喜，就是在瑶池，顺着瀑布下来的方向，有个很浅的小池子，我们脱了鞋子就下水了，被LG强迫拉到水中间拍合影，水没过了膝盖，大热天都觉得水有点刺骨的冷。&lt;/p&gt;

&lt;p&gt;　　出了景区我们就开始找着觅食的地方。在镇上找到了之前联系过的一家店，或许大家都饿了，感觉菜的味道都还不错，具体就不推荐了，反正所谓的招牌菜大部分都有吃到了吧。&lt;/p&gt;

&lt;p&gt;　　下午，我们直奔向预备的露营地——天池（这个点是不包括在联票里面的）。一路上我见识到了头文字D里的山路，不过人家是在晚上没车的时候开，我们可是在白天有车相会的情况下开。危险和难度系数更高，至于技术，LG还是跟电影的人有区别的O(∩_∩)O~不过还是建议技术和勇气都不够自信得人（比如我）还是不要走这段路，毕竟也有16公里。一路曲曲折折，终于折腾到了山顶的天池。午饭时候得知票价是38元，饭店人员说可以8折帮我们买票。不过幸亏我们没图这点便宜，因为天池还没有完工，所以实际票价是20元。我们先进去踩点，整个绕了天池一周，整体感觉是和一般水库大小差不多，周围全在施工，大坝都还没造好，没什么游人，钓鱼的倒是有几个。当时物色了一个点，但是并没有达到期望值。最后决定还是先下山，找其它更好的地方。&lt;/p&gt;

&lt;p&gt;　　一路又心惊胆跳的下山了，大家凭着一点记忆，稍微问了下路人，在大峡谷里折腾了几个来回，这样的好处就是对大峡谷的整个环境道路有了更进一步的熟悉。可是，最重要的露营地还是没着落。这时已经快6点了，天色在渐渐暗了，最后不得不做出了一个艰难的决定，再返回天池。于是，在镇上买了足够的水和食物，我们又一路杀回天池，或许因为有了之前对道路的熟悉，也或许因为实在时间很紧张，到达时间比预期提前了些（从大峡谷镇到天池，16公里22分钟，盘山路上一直能保持40码，算是快的了——赶得上杭州70码啦？）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ditu.google.cn/maps?f=d&amp;amp;source=embed&amp;amp;saddr=%EF%BC%91%EF%BC%98%E7%9C%81%E9%81%93&amp;amp;daddr=30.294646,119.120593&amp;amp;geocode=FdSkzQEdl_AYBw%3B&amp;amp;hl=zh-CN&amp;amp;mra=dme&amp;amp;mrcr=0&amp;amp;mrsp=1&amp;amp;sz=15&amp;amp;sll=30.285049,119.109092&amp;amp;sspn=0.028609,0.05579&amp;amp;ie=UTF8&amp;amp;t=h&amp;amp;brcurrent=3,0x344a8d9783bcf977:0xdab99947dd493db1%3B5,0&amp;amp;ll=30.275821,119.099178&amp;amp;spn=0.081537,0.085831&amp;amp;z=13&quot;&gt;查看大图&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;　　我们每人拿着东西就往露营地走去，之前物色的点被人占用了已经，我们只能旁边再勉强占了块地（正好还有了一帮邻居）。我们四个留下搭帐篷，另外两个去找柴火，山上还是比较冷的晚上，何况我们还在水边。在天完全黑下来的时候我们晚上睡觉的窝终于有了着落（见下图A点位置）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ditu.google.cn/maps?f=q&amp;amp;source=embed&amp;amp;hl=zh-CN&amp;amp;q=30.301205,+119.124434&amp;amp;sll=30.302557,119.125249&amp;amp;sspn=0.014302,0.027895&amp;amp;dirflg=w&amp;amp;ie=UTF8&amp;amp;geocode=FRVczgEd0rEZBw&amp;amp;split=0&amp;amp;t=h&amp;amp;brcurrent=3,0x344a8d9783bcf977:0xdab99947dd493db1%3B5,0&amp;amp;ll=30.300649,119.12276&amp;amp;spn=0.011116,0.010729&amp;amp;z=16&amp;amp;iwloc=A&quot;&gt;查看大图&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;　　晚上，熊熊的篝火（名副其实）升起来了，周围一片静谧，除了隔壁邻居的歌声，还是非常难得的惬意。我们吃的竹筒饭，粽子（正是端午节），零食
，他们还喝着啤酒，几个人聊天，真的很难得轻松。虽然没有尽善尽美，但是有遗憾也是一种残缺美（篝火8点烧到11点多，没带红薯和土鸡来烧烤，真是有点遗憾）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/album/%E6%B5%99%E8%A5%BF%E5%A4%A7%E5%B3%A1%E8%B0%B7/%E6%B9%96%E5%BF%83%E5%B2%9B.jpg&quot;&gt;&lt;img src=&quot;/album/%E6%B5%99%E8%A5%BF%E5%A4%A7%E5%B3%A1%E8%B0%B7/%E6%B9%96%E5%BF%83%E5%B2%9B.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;　 伴着风声睡在帐篷里，虽然有点害怕，因为景区人员一直告诉我们这里有野猪和梅花鹿晚上会出来。不过我们一觉睡到天亮倒也相安无事。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/album/%E6%B5%99%E8%A5%BF%E5%A4%A7%E5%B3%A1%E8%B0%B7/%E5%B8%90%E7%AF%B7.jpg&quot;&gt;&lt;img src=&quot;/album/%E6%B5%99%E8%A5%BF%E5%A4%A7%E5%B3%A1%E8%B0%B7/%E5%B8%90%E7%AF%B7.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;　　总体来说，这是一回非常难得经历，下回露营，还想去！&lt;/p&gt;

&lt;p&gt;　　流水账式记录结束......&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>解决 Windows 7 开始菜单和任务栏图标错误地方法</title>
      <link href="http://example.com/resolve-windows-7-start-menu-and-taskbar-icon-error/"/>
      <updated>2009-05-05T01:57:31+08:00</updated>
      <id>http://example.com/resolve-windows-7-start-menu-and-taskbar-icon-error</id>
      <content type="html">&lt;p&gt;如果安装或运行一个第三方软件（如飞信之类的，系统默认会自动刷新桌面图标），这时我们新建的开始菜单和任务栏快捷方式的图标很容易变成错误的了。Windows 7 Build 7000 到 7100 似乎一直存在这样的问题。&lt;/p&gt;

&lt;p&gt;解决办法是用一些系统维护软件重建图标缓存，或者手动操作：&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;先把这个文件删除，然后手工：新建文本文件，改名成iconcache.db，属性改为：只读。或者执行如下命令：&lt;/p&gt;

&lt;p&gt;CD /D %USERPROFILE%\AppData\Local\&lt;br/&gt;
ATTRIB -s -r -h IconCache.db&lt;br/&gt;
COPY /Y NUL IconCache.db&lt;br/&gt;
ATTRIB +r IconCache.db&lt;/p&gt;

&lt;p&gt;重启电脑，进入桌面后，再把这个文件只读属性去掉！（如果不去掉只读属性，无法缓存图标）&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>把 Opera 做成完全绿色免安装版</title>
      <link href="http://example.com/make-opera-green/"/>
      <updated>2009-05-03T19:48:31+08:00</updated>
      <id>http://example.com/make-opera-green</id>
      <content type="html">&lt;p&gt;发现 Opera 在网页浏览方面还是很有优势的，一直以来都因为这个鸟软件不能绿色安装（特指放在任意目录那种）一直没用。趁着前两天改 Google Maps 的精神，今天又操刀了一下：&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;零、首先提剪切 Application Data 下面的 Opera （可能是 Opera 9.51 Beta 之类的名称）目录到 Opera 程序文件所在目录，我们的目的是使它能绿色正常运行。&lt;/p&gt;

&lt;p&gt;一、查找 SHGetSpecialFolderPath(...0x1A...) 这个地方是获取 Application Data路径的。找到后改为：&lt;/p&gt;

&lt;p&gt;IDA ARM Code:&lt;/p&gt;

&lt;p&gt;.text:00569FB4 sub_569FB4                              ; CODE XREF: sub_71B08+24 p&lt;br/&gt;
.text:00569FB4                 STR     LR, [SP,#-4]!&lt;br/&gt;
.text:00569FB8                 LDR     R1, =unk_6448A0&lt;br/&gt;
.text:00569FBC                 MOV     R2, #0x104&lt;br/&gt;
.text:00569FC0                 MOV     R0, #0&lt;br/&gt;
.text:00569FC4                 BL      GetModuleFileNameW&lt;br/&gt;
.text:00569FC8                 MOV     R2, #0&lt;br/&gt;
.text:00569FCC                 LDR     R3, =unk_6448A0&lt;br/&gt;
.text:00569FD0                 ADD     R3, R3, R0,LSL#1&lt;br/&gt;
.text:00569FD4                 STRH    R2, [R3,#-0x16]&lt;br/&gt;
.text:00569FD8                 MOV     R0, #1&lt;br/&gt;
.text:00569FDC                 LDR     R1, =unk_63A32C&lt;br/&gt;
.text:00569FE0                 LDR     R0, =unk_6448A0&lt;br/&gt;
.text:00569FE4                 LDR     LR, [SP],#4&lt;br/&gt;
.text:00569FE8                 B       loc_569F6C&lt;br/&gt;
.text:00569FE8 ; End of function sub_569FB4&lt;/p&gt;

&lt;p&gt;下面的VC ARM Code可作参考:&lt;/p&gt;

&lt;p&gt;; 6    :   TCHAR tzPath[MAX_PATH];&lt;br/&gt;
; 7    :   UINT nLen = GetModuleFileName(NULL, tzPath, MAX_PATH);&lt;/p&gt;

&lt;p&gt; 00008  e3a02f41   mov         r2, #0x41, 30&lt;br/&gt;
 0000c  e28d1000   add         r1, sp, #0&lt;br/&gt;
 00010  e3a00000   mov         r0, #0&lt;br/&gt;
 00014  eb000000   bl          GetModuleFileNameW&lt;/p&gt;

&lt;p&gt;; 8    :   tzPath[nLen - 11] = 0;&lt;/p&gt;

&lt;p&gt; 00018  e28d3000   add         r3, sp, #0&lt;br/&gt;
 0001c  e0833080   add         r3, r3, r0, lsl #1&lt;br/&gt;
 00020  e3a02000   mov         r2, #0&lt;br/&gt;
 00024  e14321b6   strh        r2, [r3, #-0x16]&lt;/p&gt;

&lt;p&gt;; 9    :   return 1;&lt;/p&gt;

&lt;p&gt; 00028  e3a00001   mov         r0, #1&lt;/p&gt;

&lt;p&gt;二、另外，该死的Opera团队，乱七八糟的版本多不说，程序中我竟然还有很多硬编码，Opera的老大还有脸说UCWeb技术没有他们好，靠！Win95 时期菜鸟程序员的垃圾风格。我们还需要把一处 rdata.xxxxxxx 中的 \Application Data 硬编码字符串的引用指向上面的 unk_6448A0。&lt;/p&gt;

&lt;p&gt;三、经过上面两步，Opera 已经能够运行了，继续完美它。opera.ini 中帮助文件路径改成你所希望的路径。&lt;/p&gt;

&lt;p&gt;[User Prefs]&lt;br/&gt;
Default URL=http://www.google.com/&lt;br/&gt;
Home URL=http://www.google.com/&lt;br/&gt;
Help URL=\Application Data\Opera 9.5 Beta\help\en-&gt;\Application Data  改成你的Opera目录&lt;/p&gt;

&lt;p&gt;四、注册表项目需要导入到注册表中&lt;/p&gt;

&lt;p&gt;[HKEY_LOCAL_MACHINE\Software\Opera\Info]&lt;br/&gt;
&quot;SplashscreenWgtManPortrait Generic&quot;=&quot;\Storage Card\Tools\Opera\splash_wgtman_225x150.bmp\&quot;&lt;br/&gt;
&quot;SplashProgressFPS Generic&quot;=dword:0000000a&lt;br/&gt;
&quot;SplashWgtProgressImage Generic&quot;=&quot;\Storage Card\Tools\Opera\line.png&quot;&lt;br/&gt;
&quot;SplashProgressHeight Generic&quot;=dword:00000008&lt;br/&gt;
&quot;SplashscreenPortrait Generic&quot;=&quot;\Storage Card\Tools\Opera\splash_225x150.bmp&quot;&lt;br/&gt;
&quot;SplashProgressImage Generic&quot;=&quot;\Storage Card\Tools\Opera\line.png&quot;&lt;br/&gt;
&quot;SplashscreenWgtManLandscape Generic&quot;=&quot;\Storage Card\Tools\Opera\splash_wgtman_225x150.bmp\&quot;&lt;br/&gt;
&quot;SplashscreenLandscape Generic&quot;=&quot;\Storage Card\Tools\Opera\splash_225x150.bmp&quot;&lt;/p&gt;

&lt;p&gt;五、设置的地址也是硬编码的，需要改过来，否则无法进入设置了：用十六进制编辑器查找：&lt;/p&gt;

&lt;p&gt;file://localhost/Application Data/Opera 9.5 Beta/Settings/settings.htm&lt;/p&gt;

&lt;p&gt;替换成你的实际路径（如果长度不够了，改成文件系统的路径，比如我改成：&lt;/p&gt;

&lt;p&gt;\Storage Card\Tools\Opera\Opera 9.5 Beta\Settings\settings.htm&lt;/p&gt;

&lt;p&gt;六、最后，皮肤选择，如果是QVGA，默认则可。如果是VGA，建议使用 standard_skin_VGA.zip，改名成 standard_skin.zip&lt;/p&gt;

&lt;p&gt;还有，opera.ini 中看一下，还需要把缩放参数变一下，具体自己看。VGA和QVGA的缩放参数不一样。&lt;/p&gt;

&lt;p&gt;[Adaptive Zoom]&lt;/p&gt;

&lt;p&gt;;For VGA&lt;br/&gt;
;Maximum Zoom=190&lt;br/&gt;
;Minimum Zoom=190&lt;/p&gt;

&lt;p&gt;Maximum Zoom=100&lt;br/&gt;
Minimum Zoom=70&lt;/p&gt;

&lt;p&gt;也可以输入 opera:config 可以进入详细设置（在User Pref下面），自己慢慢体会，可以开启 Turbo 方式，似乎可以翻墙了。&lt;/p&gt;

&lt;p&gt;好麻烦啊，还不如安装版？以后再弄个CeleSetup的自动脚本就方便了。&lt;/p&gt;

&lt;p&gt;OK，完成收工，好麻烦。上面只是给出一个可行的方法。顺便放上 Opera 9.51 Beta IOICN 清凉汉化版的修改版作为成果，支持 PPC5/6 VGA/QVGA，需要的请下载。其中第三、四、五步如果和我不一样的目录，请自己替换。（以后我会整合和 一键安装软件包 中）&lt;/p&gt;

&lt;p&gt;By Yonsm 2009.05.03 4:29 AM, My LP is sleeping soundly:)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/Opera.zip&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Windows Mobile SP/PPC 中 Menu Bar 使用完美方案</title>
      <link href="http://example.com/perfect-menu-bar-solution-for-windows-mobile/"/>
      <updated>2009-04-26T03:15:22+08:00</updated>
      <id>http://example.com/perfect-menu-bar-solution-for-windows-mobile</id>
      <content type="html">&lt;p&gt;在SP/PPC写过MenuBar代码的人可能都知道，AygShell 中 Menu Bar 的设计真是无话说，各种系统（SP、PPC、2003、5.0）功能差异不一致，导致编程特别不方便。比如 SP2003 中不能使用 SHCMBF_HMENU 标记，PPC 5.0/6.0 终不能使用 SHCMBM_GETMENU，SP/PPC 2003中不能使用 TBIF_BYINDEX 来操作按钮，等等。&lt;/p&gt;

&lt;p&gt;在别扭与愤懑中，用着MenuBar都过了4年了。终于整理出了一套相对比较完美的方案。先做一些假定：&lt;!-- more --&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;如果我们的代码用 SP2003 SDK 编译，则必须支持 SP/PPC 2003/5 (这里5.0的意思包含5.0和之后的版本，因为5以后都比较完美统一)。&lt;/li&gt;
&lt;li&gt;用 PPC2003 SDK 编译的话，必须要支持 PPC 2003/5.0。&lt;/li&gt;
&lt;li&gt;用 SP5 SDK编译的话，支持SP5/PPC5。&lt;/li&gt;
&lt;li&gt;用 PPC 5 编译的话，只支持 PPC5。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;基于以下假定，我整理了一个小的CeleMenuBar类，在使用的时候，只要：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在资源中定义 IDC_LSK 和 IDC_RSK （=IDC_LSK+1），用于定义左右按钮的命令ID。&lt;/li&gt;
&lt;li&gt;在资源中添加一个菜单，如果不是Popup按钮，则用 IDC_LSK 或 IDC_RSK作为命令。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果你的代码需要支持 2003，则请在资源中定义 MenuBar 的 RCDATA；如果只需要支持5.0，则不需要。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在代码中，使用 CeleMenuBar，操作所有的MenuBar按钮都不用管命令ID，只需要指明是左按钮还是右按钮。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;在代码中，如果需要响应按钮命令，请使用 IDC_LSK 和 IDC_RSK；如果是弹出菜单，无视 。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;基于以上几个规则，代码写起来就简单多了。&lt;/p&gt;

&lt;p&gt;// CeleMenuBar&lt;/p&gt;

&lt;h1&gt;ifndef IDC_LSK&lt;/h1&gt;

&lt;h1&gt;ifndef TBIF_BYINDEX&lt;/h1&gt;

&lt;h1&gt;pragma message(&quot;CeleMenuBar: IDC_LSK is not defined. You should use IDOK &amp;amp; IDCANCEL as soft key command.&quot;)&lt;/h1&gt;

&lt;h1&gt;endif&lt;/h1&gt;

&lt;h1&gt;define IDC_LSK         IDOK&lt;/h1&gt;

&lt;h1&gt;define IDC_RSK         IDCANCEL&lt;/h1&gt;

&lt;h1&gt;endif&lt;/h1&gt;

&lt;h1&gt;if TBIF_BYINDEX&lt;/h1&gt;

&lt;h1&gt;define _MBIF(x)        ((x) | TBIF_BYINDEX)&lt;/h1&gt;

&lt;h1&gt;define _MBID(x)        (x)&lt;/h1&gt;

&lt;h1&gt;else&lt;/h1&gt;

&lt;h1&gt;define _MBIF(x)        (x)&lt;/h1&gt;

&lt;h1&gt;define _MBID(x)        (IDC_LSK + (x))&lt;/h1&gt;

&lt;h1&gt;endif&lt;/h1&gt;

&lt;p&gt;class CeleMenuBar&lt;br/&gt;
{&lt;br/&gt;
protected:&lt;br/&gt;
   HWND m_hMenuBar;&lt;/p&gt;

&lt;p&gt;public:&lt;br/&gt;
   CeleMenuBar(HWND hMenuBar = NULL)&lt;br/&gt;
   {&lt;br/&gt;
       m_hMenuBar = hMenuBar;&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   operator HWND()&lt;br/&gt;
   {&lt;br/&gt;
       return m_hMenuBar;&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   HWND operator =(HWND hMenuBar)&lt;br/&gt;
   {&lt;br/&gt;
       return m_hMenuBar = hMenuBar;&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   // 创建菜单条&lt;br/&gt;
   HWND Create(HWND hParent, UINT uBarRes = 0, DWORD dwFlags = 0)&lt;br/&gt;
   {&lt;br/&gt;
       SHMENUBARINFO mb = {0};&lt;br/&gt;
       mb.cbSize = sizeof(SHMENUBARINFO);&lt;br/&gt;
       mb.hwndParent = hParent;&lt;br/&gt;
       mb.hInstRes = g_hInst;&lt;br/&gt;
       mb.nToolBarId = uBarRes;&lt;br/&gt;
       if (uBarRes)&lt;br/&gt;
       {&lt;/p&gt;

&lt;h1&gt;ifdef TBIF_BYINDEX&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;       mb.dwFlags = dwFlags | SHCMBF_HMENU;  
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;else&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;       mb.dwFlags = dwFlags;  
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;endif&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;   }  
   else  
   {  
       mb.dwFlags = SHCMBF_EMPTYBAR;  
   }  
   SHCreateMenuBar(&amp;amp;mb;);  
   _Assert(mb.hwndMB);  
   return m_hMenuBar = mb.hwndMB;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;   }&lt;/p&gt;

&lt;p&gt;   // 获取弹出菜单&lt;br/&gt;
   HMENU GetMenu(BOOL bRight = TRUE)&lt;br/&gt;
   {&lt;/p&gt;

&lt;h1&gt;ifdef TBIF_BYINDEX&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;   TBBUTTON tb;  
   tb.dwData = NULL;  
   SendMessage(m_hMenuBar, TB_GETBUTTON, _MBID(bRight), (LPARAM) &amp;amp;tb;);  
   return (HMENU) tb.dwData;  
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;else&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;   return (HMENU) SendMessage(m_hMenuBar, SHCMBM_GETSUBMENU, 0, _MBID(bRight));  
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;endif&lt;/h1&gt;

&lt;p&gt;   }&lt;/p&gt;

&lt;p&gt;   // 重载按键&lt;br/&gt;
   DWORD OverrideKey(WPARAM wParam = VK_TBACK)&lt;br/&gt;
   {&lt;br/&gt;
       return SendMessage(m_hMenuBar, SHCMBM_OVERRIDEKEY, wParam, MAKELPARAM(SHMBOF_NODEFAULT | SHMBOF_NOTIFY, SHMBOF_NODEFAULT | SHMBOF_NOTIFY));&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   // 获取按钮文字&lt;br/&gt;
   BOOL GetButtonText(PTSTR ptzStr, BOOL bRight = TRUE)&lt;br/&gt;
   {&lt;br/&gt;
       TBBUTTONINFO tb;&lt;br/&gt;
       tb.cbSize = sizeof(TBBUTTONINFO);&lt;br/&gt;
       tb.dwMask = &lt;em&gt;MBIF(TBIF_TEXT);&lt;br/&gt;
       tb.pszText = ptzStr;&lt;br/&gt;
       tb.cchText = MAX_PATH;&lt;br/&gt;
       return SendMessage(m_hMenuBar, TB_GETBUTTONINFO, &lt;/em&gt;MBID(bRight), (LPARAM) &amp;tb;);&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   // 设置按钮文字&lt;br/&gt;
   BOOL SetButtonText(PCTSTR ptzStr, BOOL bRight = TRUE)&lt;br/&gt;
   {&lt;br/&gt;
       TBBUTTONINFO tb;&lt;br/&gt;
       tb.cbSize = sizeof(TBBUTTONINFO);&lt;br/&gt;
       tb.dwMask = &lt;em&gt;MBIF(TBIF_TEXT);&lt;br/&gt;
       tb.pszText = (PTSTR) ptzStr;&lt;br/&gt;
       return SendMessage(m_hMenuBar, TB_SETBUTTONINFO, &lt;/em&gt;MBID(bRight), (LPARAM) &amp;tb;);&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   // 获取按钮状态&lt;br/&gt;
   BYTE GetButtonState(BOOL bRight = TRUE)&lt;br/&gt;
   {&lt;br/&gt;
       TBBUTTONINFO tb;&lt;br/&gt;
       tb.cbSize = sizeof(TBBUTTONINFO);&lt;br/&gt;
       tb.dwMask = &lt;em&gt;MBIF(TBIF_STATE);&lt;br/&gt;
       SendMessage(m_hMenuBar, TB_GETBUTTONINFO, &lt;/em&gt;MBID(bRight), (LPARAM) &amp;tb;);&lt;br/&gt;
       return tb.fsState;&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   // 设置按钮状态&lt;br/&gt;
   BOOL SetButtonState(BYTE bState = TBSTATE_ENABLED, BOOL bRight = TRUE)&lt;br/&gt;
   {&lt;br/&gt;
       TBBUTTONINFO tb;&lt;br/&gt;
       tb.cbSize = sizeof(TBBUTTONINFO);&lt;br/&gt;
       tb.dwMask = &lt;em&gt;MBIF(TBIF_STATE);&lt;br/&gt;
       tb.fsState = bState;&lt;br/&gt;
       return SendMessage(m_hMenuBar, TB_SETBUTTONINFO, &lt;/em&gt;MBID(bRight), (LPARAM) &amp;tb;);&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   // 启用或禁用按钮&lt;br/&gt;
   BOOL EnableButton(BOOL bEnable = TRUE, BOOL bRight = TRUE)&lt;br/&gt;
   {&lt;br/&gt;
       return SetButtonState(bEnable ? TBSTATE_ENABLED : 0, bRight);&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   // 显示或隐藏按钮&lt;br/&gt;
   BOOL HideButton(BOOL bHide = TRUE, BOOL bRight = TRUE)&lt;br/&gt;
   {&lt;br/&gt;
       return SetButtonState(bHide ? TBSTATE_HIDDEN : 0, bRight);&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   // 弹出菜单，用于需要动态切换弹出菜单的情况&lt;br/&gt;
   BOOL PopupMenu(HMENU hMenu, BOOL bRight = TRUE)&lt;br/&gt;
   {&lt;br/&gt;
       BYTE bState = GetButtonState(bRight);&lt;br/&gt;
       if (bState &amp;amp; TBSTATE_PRESSED)&lt;br/&gt;
       {&lt;br/&gt;
           keybd_event(VK_ESCAPE, 0, KEYEVENTF_SILENT, 0);&lt;br/&gt;
           keybd_event(VK_ESCAPE, 0, KEYEVENTF_SILENT | KEYEVENTF_KEYUP, 0);&lt;br/&gt;
       }&lt;br/&gt;
       else&lt;br/&gt;
       {&lt;br/&gt;
           RECT rt;&lt;br/&gt;
           GetWindowRect(m_hMenuBar, &amp;rt;);&lt;br/&gt;
           SetButtonState(bState | TBSTATE_PRESSED, bRight);&lt;br/&gt;
           TrackPopupMenuEx(hMenu, bRight ? (TPM_RIGHTALIGN | TPM_BOTTOMALIGN) : (TPM_LEFTALIGN | TPM_BOTTOMALIGN), &lt;br/&gt;
               bRight ? rt.right : rt.left, rt.top, GetParent(m_hMenuBar), NULL);&lt;br/&gt;
       }&lt;br/&gt;
       return SetButtonState(bState &amp;amp; ~TBSTATE_PRESSED, bRight);&lt;br/&gt;
   }&lt;br/&gt;
};&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>PPC 中打开通话记录</title>
      <link href="http://example.com/open-call-log-in-ppc/"/>
      <updated>2009-04-03T13:41:28+08:00</updated>
      <id>http://example.com/open-call-log-in-ppc</id>
      <content type="html">&lt;p&gt;SP 中有一个exe用来打开通话记录，万恶的WM竟然弄得PPC上不一样。经分析找到一个简洁的方法，可以在PPC中打开通话记录界面，代码如下：&lt;/p&gt;

&lt;p&gt;if (HWND hWnd = FindWindow(TEXT(&quot;MSCProg&quot;), NULL))&lt;br/&gt;
{&lt;br/&gt;
 PostMessage(hWnd, 0x801A, 0, 0);&lt;br/&gt;
}&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;又他妈的是私有的消息，做出这么垃圾的系统垃圾的设计，WM 的设计者真该去S!&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>换用杭州联通宽带快一个月了</title>
      <link href="http://example.com/using-china-unicom-network-for-a-month/"/>
      <updated>2009-04-02T13:58:15+08:00</updated>
      <id>http://example.com/using-china-unicom-network-for-a-month</id>
      <content type="html">&lt;p&gt;以前用电信ADSL将近7年了，一直听说“网通”没电信的ADSL好。今年过了年来了之后，本想继续包2年ADSL，到要确认的时候竟然又出霸王条款，无语的细节就不说了&lt;!-- more --&gt;（TIA! 有些事情想不通的时候，想想这时天朝 ，就想通了——This Is China!）&lt;/p&gt;

&lt;p&gt;一不小心看到小区内的广告，“原中国网通”“现联通宽带”促销云云，打电话到10010竟然说可能是下面搞得活动，不清楚。后来谨慎确认了一下，确有其事，于是装了，980 元 = 2M ADSL 14个月+ 150购物卡 + 送一个联通的卡（可用一年不用充值，但没对我没啥用反正）。火星了一把的是，杭州网通竟然不是常规意义上的“网通”，跟中国网通不搭噶的东西，还好中国网通现在也并入联通了，以后就说联通宽带吧。&lt;/p&gt;

&lt;p&gt;换用杭州联通宽带快一个月了，基本感觉满意。下载速度基本能保证180-200K（迅雷，修在MS网站上的东西速度220K），就是访问一些电信的网站好不到哪里去，到某些电信服务器的响应速度比较慢，据说游戏的也会有点卡的，反正不玩游戏，下载速度才是王道。&lt;/p&gt;

&lt;p&gt;另外，从服务来说，联通也够乱的，就这情形，估计就是给了WCDMA的牌照，也好不到哪里去。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>PPC 中向其它进程中插入DLL的方法及通用代码</title>
      <link href="http://example.com/insert-a-dll-into-another-process-in-ppc/"/>
      <updated>2009-03-24T11:43:29+08:00</updated>
      <id>http://example.com/insert-a-dll-into-another-process-in-ppc</id>
      <content type="html">&lt;p&gt;大家都知道 PC 中写破解补丁的其中一个方法是 Loader，通常的做法是CreateProcess后用CreateRemoteThread来Load我们的DLL。但这个方法在WM中显然不可行（压根没这个API）。&lt;/p&gt;

&lt;p&gt;WM中要在指定的进程中执行我们的代码，可以用一个未公开的 PerformCallBack4 API。利用这个API，可以在目标进程中执行我们的代码。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;首先声明：这个方法仅对于SP2003及所有PPC有效，对于SP5及其以上系统非常可能失效，因为SP的权限要求比PPC高。为了在SP5/6中具备同样的功能，需要做一系列非常复杂的操作，我也已经琢磨出相关的方案可通用的代码，说起来比较啰嗦，暂且按下不表，以后再叙吧。&lt;/p&gt;

&lt;p&gt;废话不多说，直接看代码：&lt;br/&gt;
 STATIC HMODULE RemoteLoadLibrary(HANDLE hProcess, PCTSTR ptzPath)&lt;br/&gt;
 {&lt;br/&gt;
   BOOL bMode = SetKMode(TRUE);&lt;br/&gt;
   DWORD dwPerm = SetProcPermissions(0xFFFFFFFF);&lt;/p&gt;

&lt;p&gt;   CALLBACKINFO ci;&lt;br/&gt;
   ci.hProc= hProcess;&lt;br/&gt;
   ci.pFunc = (FARPROC) MapPtrToProcess(GetProcAddress(GetModuleHandle(TEXT(&quot;COREDLL&quot;)), TEXT(&quot;LoadLibraryW&quot;)), hProcess);;&lt;br/&gt;
   ci.pvArg0 = MapPtrToProcess((PVOID) ptzPath, GetCurrentProcess());&lt;br/&gt;
   HMODULE hModule = (HMODULE) PerformCallBack4(&amp;ci;, 0, 0, 0);&lt;/p&gt;

&lt;p&gt;   SetKMode(bMode);&lt;br/&gt;
   SetProcPermissions(dwPerm);&lt;br/&gt;
   return hModule;&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;上面的函数中，首先设置权限，然后映射LoadLibraryW的地址到目标进程，然后在目标进程中执行LoadLibraryW装载我们的DLL。OK，既然我们的DLL都被Load到目标进城了，要干什么，请随意（一般来说，DllMain函数中创建一个线程后，立即返回。在线程中做你想做的事）。&lt;/p&gt;

&lt;p&gt;使用例子（执行一个目标进程并运行直接运行一个EXE（如果没运行，运行了则直接操作）并运行我们的DLL）：&lt;/p&gt;

&lt;p&gt; HMODULE hModule = CCodeInj::RemoteLoadLibrary(TEXT(&quot;cprog.exe&quot;), tzDllPath);&lt;br/&gt;
 if (hModule == NULL)&lt;br/&gt;
 {&lt;br/&gt;
   Sleep(500);&lt;br/&gt;
   PROCESS_INFORMATION pi;&lt;br/&gt;
   if (CreateProcess(TEXT(&quot;cprog.exe&quot;),, NULL, NULL, NULL, FALSE, 0, NULL, NULL, NULL, π))&lt;br/&gt;
   {&lt;br/&gt;
     Sleep(2000);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; hModule = CCodeInj::RemoteLoadLibrary(pi.hProcess, tzDllPath);  

 CloseHandle(pi.hThread);  
 CloseHandle(pi.hProcess);  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;   }&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;为了更好地使用，我提供了更多的功能，请参看附件。&lt;/p&gt;

&lt;p&gt;下载附件请到：http://bbs.pediy.com/showthread.php?p=595544#post595544&lt;br/&gt;
或者来信至 Yonsm@msn.cm&lt;/p&gt;

&lt;p&gt;1.你得准备一个 DLL，假设是 MyHook.dll&lt;br/&gt;
2 另有一个代码执行的空间（无论是EXE还是DLL，也可以在 MyHook.dll），然后在这个代码空间执行：RemoteLoadLibrary&lt;br/&gt;
  指定远程进程（比如 cprog.exe，就是你要插入的进程），和DLL路径（就是MyHook.dll的路径）&lt;br/&gt;
3. 那么，RemoteLoadLibrary就会让 crpog.exe 来 LoadLibrary(MyHook.dll)，你在MyHook.dll里面就可以做你想做的事。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>服务器惊魂……</title>
      <link href="http://example.com/frightened-the-server/"/>
      <updated>2009-03-19T12:30:39+08:00</updated>
      <id>http://example.com/frightened-the-server</id>
      <content type="html">&lt;p&gt;好久没写过日志或做点东西了，最近忙了很多事情，按下不表……&lt;/p&gt;

&lt;p&gt;今天为了尝试一下VPN，在服务器上尝试装了好几个VPN软件，气壮SoftEther配置Internet共享的时候，服务器竟然挂掉了。晕死！&lt;/p&gt;

&lt;p&gt;赶紧找Yicho恢复，辗转N久，终于恢复正常了。谨慎作风忘了，大胆胡乱操作，该S！&lt;/p&gt;

&lt;p&gt;宕机日志，仅以此文以记之……&lt;/p&gt;

&lt;p&gt;其实……Windows 本身的 VPN 就很好用。也可以改端口。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>CeleCmd 2.0 - 功能强大、灵活易用的 WM 批处理解释引擎</title>
      <link href="http://example.com/celecmd/"/>
      <updated>2009-01-01T16:05:20+08:00</updated>
      <id>http://example.com/celecmd</id>
      <content type="html">&lt;p&gt;欢迎使用功能强大、灵活方便的 CeleCmd 命令解释引擎。您只要编写简单的 CeleCmd 命令文件，就能在 Windows Mobile 中实现灵活强大的批处理功能。&lt;/p&gt;

&lt;p&gt;1.更新为 2.0.670 修正 RAR 解压和 MULTI-SZ REG 的问题等。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;2.绝大部分命令兼容老版本的 CCS 文件，其中一个 LOAD 除外， 请参看帮助说明。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;命令更改：&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;LOAD：不再支持通配符，如果需要递归搜索和通配符，请使用省略命令的形式，如“!\Storage Card\CeleSet&lt;em&gt;.&lt;/em&gt;”，表示用 CeleCmd 打开Storage Card及其子目录中的所有 CeleSet 开头的文件（包括 REG/EXE/DLL/CCS/PROVXML 都会被加载）。&lt;br/&gt;
REGX：功能增强，支持判断键值是否已经是特定值。&lt;br/&gt;
DLGX：功能已经大大增强，可以非常方便地定制注册表 Tweak 的对话框，支持PPC滚动条和SP焦点导航。&lt;br/&gt;
FILE：DELETE和MOVE交给系统做，Copy File 自己完全实现，支持文件夹，支持递归，支持通配符；复制支持覆盖ROM文件。&lt;br/&gt;
CCUI ：支持参数，填写命令道编辑框。&lt;br/&gt;
HELP：支持参数，支持显示自定义的 HTML 内容给用户。&lt;br/&gt;
其它：小更改未列出。&lt;/p&gt;

&lt;p&gt;4.新增命令：&lt;br/&gt;
RARX：支持RAR 解压缩（如果存在 UnRAR.dll）。（如果需要支持TGZX，请使用 CeleCmdTGZX.exe）。&lt;br/&gt;
DISP：旋转屏幕。&lt;br/&gt;
POST：发送消息。&lt;/p&gt;

&lt;p&gt;2.0 下载：&lt;br/&gt;
&lt;a href=&quot;/assets/CeleCmd.rar&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.0.686 源代码下载（请遵循许可协议）：&lt;br/&gt;
&lt;a href=&quot;/assets/CeleCmd.2.0.686.zip&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载 (1.6，支持TGZ 解压)：&lt;br/&gt;
&lt;a href=&quot;/assets/CeleCmd.1.6.360.zip&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;论坛讨论：&lt;br/&gt;
http://www.ioicn.com.cn/forum/viewthread.php?tid=311207&lt;/p&gt;

&lt;p&gt;网友zxlch的修改增强版本（本人未验证使用）：&lt;br/&gt;
http://www.ppcsoft.net/html/354.html&lt;br/&gt;
http://hi.baidu.com/zxlch/blog/item/2184f6cb7a880cf052664fdb.html&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/CeleCmd.htm&quot;&gt;使用说明&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>调用 UnRAR.dll 解压缩RAR文件</title>
      <link href="http://example.com/call-unrar-dll-to-extract-file/"/>
      <updated>2008-12-28T16:35:39+08:00</updated>
      <id>http://example.com/call-unrar-dll-to-extract-file</id>
      <content type="html">&lt;p&gt;CeleCmd 中把 TGZ 的解压缩功能用 RAR 解压缩替换了，发现RAR解压缩的代码非常简单。&lt;!-- more --&gt;&lt;/p&gt;

&lt;h1&gt;include &quot;UnRAR.h&quot;&lt;/h1&gt;

&lt;h1&gt;ifdef _UNICODE&lt;/h1&gt;

&lt;h1&gt;define _ArcName ArcNameW&lt;/h1&gt;

&lt;h1&gt;define STR_RARProcessFile TEXT(&quot;RARProcessFileW&quot;)&lt;/h1&gt;

&lt;h1&gt;else&lt;/h1&gt;

&lt;h1&gt;define _ArcName ArcName&lt;/h1&gt;

&lt;h1&gt;define STR_RARProcessFile TEXT(&quot;RARProcessFile&quot;)&lt;/h1&gt;

&lt;h1&gt;endif&lt;/h1&gt;

&lt;p&gt;typedef HANDLE (PASCAL &lt;em&gt;PRAROpenArchiveEx)(struct RAROpenArchiveDataEx &lt;/em&gt;ArchiveData);&lt;br/&gt;
typedef INT (PASCAL &lt;em&gt;PRARReadHeader)(HANDLE hArc, struct RARHeaderData &lt;/em&gt;HeaderData);&lt;br/&gt;
typedef INT (PASCAL &lt;em&gt;PRARProcessFile)(HANDLE hArc, INT iOperation, PTSTR pwzDestPath, PTSTR pwzDestName);&lt;br/&gt;
typedef INT (PASCAL &lt;/em&gt;PRARCloseArchive)(HANDLE hArc);&lt;br/&gt;
HRESULT RARX(PTSTR ptzSrcFile, PTSTR ptzDstDir)&lt;br/&gt;
{&lt;br/&gt;
   HMODULE hLib = LoadLibrary(TEXT(&quot;UnRAR&quot;));&lt;br/&gt;
   if (hLib == NULL)&lt;br/&gt;
   {&lt;br/&gt;
       return ERROR_DLL_NOT_FOUND;&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   PRAROpenArchiveEx pRAROpenArchiveEx = (PRAROpenArchiveEx) GetProcAddress(hLib, TEXT(&quot;RAROpenArchiveEx&quot;));&lt;br/&gt;
   PRARReadHeader pRARReadHeader = (PRARReadHeader) GetProcAddress(hLib, TEXT(&quot;RARReadHeader&quot;));&lt;br/&gt;
   PRARProcessFile pRARProcessFile = (PRARProcessFile) GetProcAddress(hLib, STR_RARProcessFile);&lt;br/&gt;
   PRARCloseArchive pRARCloseArchive = (PRARCloseArchive) GetProcAddress(hLib, TEXT(&quot;RARCloseArchive&quot;));&lt;br/&gt;
   if (!pRAROpenArchiveEx || !pRARReadHeader || !pRARProcessFile || !pRARCloseArchive)&lt;br/&gt;
   {&lt;br/&gt;
       FreeLibrary(hLib);&lt;br/&gt;
       return E_NOINTERFACE;&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   struct RAROpenArchiveDataEx od = {0};&lt;br/&gt;
   od._ArcName = ptzSrcFile;&lt;br/&gt;
   od.CmtBufSize = 16384;&lt;br/&gt;
   od.CmtBuf = (PSTR) UMemAlloc(od.CmtBufSize);&lt;br/&gt;
   if (od.CmtBuf == NULL)&lt;br/&gt;
   {&lt;br/&gt;
     FreeLibrary(hLib);&lt;br/&gt;
     return E_OUTOFMEMORY;&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   od.OpenMode = RAR_OM_EXTRACT;&lt;br/&gt;
   HANDLE hArc = pRAROpenArchiveEx(&amp;od;);&lt;br/&gt;
   if (od.OpenResult == S_OK)&lt;br/&gt;
   {&lt;br/&gt;
       struct RARHeaderData hd = {0};&lt;br/&gt;
       while ((od.OpenResult = pRARReadHeader(hArc, &amp;hd;)) == S_OK)&lt;br/&gt;
       {&lt;br/&gt;
           od.OpenResult = pRARProcessFile(hArc, RAR_EXTRACT, ptzDstDir, NULL);&lt;br/&gt;
           if (od.OpenResult != S_OK)&lt;br/&gt;
           {&lt;br/&gt;
               break;&lt;br/&gt;
           }&lt;br/&gt;
       }&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   pRARCloseArchive(hArc);&lt;br/&gt;
   UMemFree(od.CmtBuf);&lt;br/&gt;
   FreeLibrary(hLib);&lt;br/&gt;
   return od.OpenResult;&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;以上代码 WM、PC 中通用，应该是通用。&lt;/p&gt;

&lt;p&gt;要注意的一点是 16384 的 CmtBuf，在官方的Example中是局部变量，如果在 PPC 调用，且你已经用了不少的话，很可能溢出（VS2008建立的工程，默认STACK才64K，调大一点也OK）。我找了好久才找到原因。改成 Heap 内存就OK了。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>MSVC 中的几个非标准特殊关键字</title>
      <link href="http://example.com/several-non-standard-special-keywords-in-msvc/"/>
      <updated>2008-12-18T07:43:14+08:00</updated>
      <id>http://example.com/several-non-standard-special-keywords-in-msvc</id>
      <content type="html">&lt;p&gt;MSVC 中的有些非标准的关键字，有些时候特别有用。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;if_exist() 和 &lt;/strong&gt;if_not_exist()&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;用途：判断一个变量是否存在，（在编译期）以便选择相应的代码。&lt;br/&gt;
举例：以下代码，无论 g_hInst 是否声明，都不会编译出错。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;if_exist (g_hInst)&lt;br/&gt;
{&lt;br/&gt;
   LoadString(g_hInst, ...)&lt;br/&gt;
}&lt;br/&gt;
&lt;/strong&gt;if_not_exist (g_hInst)&lt;br/&gt;
{&lt;br/&gt;
  LoadString(NULL ...)&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;2.__declspec(selectany)&lt;/p&gt;

&lt;p&gt;用途：指明变量或函数实体在连接是只选择其中一个实体拷贝。&lt;!-- more --&gt;&lt;br/&gt;
举例：在头文件中声明一个变量，即使很多CPP文件包含它，连接期间也只会选择其中一个，从而避免错误。&lt;/p&gt;

&lt;p&gt;__declspec(selectany) HINSTANCE g_hInst;&lt;/p&gt;

&lt;p&gt;这样就不必在.cpp中定义变量，在.h中声明变量了（直接在.h中定义，多余的副本会被连接器抛弃）。&lt;/p&gt;

&lt;p&gt;3.以前介绍过的#pragma、naked等等，参考以前的文档......&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>刷新PPC今日使插件更改生效</title>
      <link href="http://example.com/refresh-the-ppc-today-plugin/"/>
      <updated>2008-12-11T06:02:51+08:00</updated>
      <id>http://example.com/refresh-the-ppc-today-plugin</id>
      <content type="html">&lt;p&gt;更改PPC今日插件项目后，并没有公开的文档说明如何使更改生效，经过分析 cplmain.cpl，找到一个未公开的方法（后来发现网上已经人说过了）：&lt;/p&gt;

&lt;p&gt;PostMessage(HWND_BROADCAST, WM_SETTINGCHANGE, 0xF2, 0)。&lt;/p&gt;

&lt;p&gt;注意，在Today插件中调用的话，可能造成死锁。&lt;/p&gt;

&lt;p&gt;如果要在 CeleCmd 中刷新今日插件的更改，执行如下命令即可：&lt;/p&gt;

&lt;p&gt;CDLL %W\CoreDLL.dll,PostMessageW,#0xFFFF,#0x1A,#0xF2,#0&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>主动打开目标计算机的远程协助</title>
      <link href="http://example.com/open-msra-automatically/"/>
      <updated>2008-12-01T10:13:30+08:00</updated>
      <id>http://example.com/open-msra-automatically</id>
      <content type="html">&lt;p&gt;Windows XP/Vista 提供的“远程协助”是通过共享桌面提供远程协助的好方法。但是“远程桌面”必须在目标机器的用户配合的情况下才能做到。实际上，Microsoft Windows 语焉不详的帮助说可以输入目标计算机名称或IP地址来主动访问目标机器。但实际上这是空话——根本就不可以（据说在同一个Domain中才行，但我测试好像也不行）。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;另外，用远程桌面客户端 mstsc 登录目标机器，无法做到共享桌面（即使加上/console参数也只能登录到控制台，而不能共享）。&lt;/p&gt;

&lt;p&gt;一般来说，如果目标机器有问题（用户想同时了解如何解决的情况下），叫目标机器上的用户打开远程协助是一个很费劲的事情（菜鸟太多啦！）。经过捉摸，终于找到了方便的方法，主动打开目标机器上的远程协助——用PSEXEC在远程机器的指定用户桌面上执行一个带命令行参数的MSRA程序。&lt;/p&gt;

&lt;p&gt;PSEXEC \SH6 -u Jane -p ****** -i msra.exe /saveasfile D:\Yonsm 123456&lt;br/&gt;
MSRA /openfile \SH6\D$\Yonsm&lt;/p&gt;

&lt;p&gt;询问密码输入后即可自动开启&lt;/p&gt;

&lt;p&gt;详细情况如下：&lt;/p&gt;

&lt;p&gt;E:\Tools\SYSINT&gt;psexec&lt;/p&gt;

&lt;p&gt;PsExec v1.94 - Execute processes remotely&lt;br/&gt;
Copyright (C) 2001-2008 Mark Russinovich&lt;br/&gt;
Sysinternals - www.sysinternals.com&lt;/p&gt;

&lt;p&gt;PsExec executes a program on a remote system, where remotely executed console&lt;br/&gt;
applications execute interactively.&lt;/p&gt;

&lt;p&gt;Usage: psexec [\computer[,computer2[,...] | @file][-u user [-p psswd]][-n s][-l&lt;br/&gt;
][-s|-e][-x][-i [session]][-c [-f|-v]][-w directory][-d][-][-a n,n,...&lt;br/&gt;
] cmd [arguments]&lt;br/&gt;
    -a         Separate processors on which the application can run with&lt;br/&gt;
               commas where 1 is the lowest numbered CPU. For example,&lt;br/&gt;
               to run the application on CPU 2 and CPU 4, enter:&lt;br/&gt;
               &quot;-a 2,4&quot;&lt;br/&gt;
    -c         Copy the specified program to the remote system for&lt;br/&gt;
               execution. If you omit this option the application&lt;br/&gt;
               must be in the system path on the remote system.&lt;br/&gt;
    -d         Don&#39;t wait for process to terminate (non-interactive).&lt;br/&gt;
    -e         Does not load the specified account&#39;s profile.&lt;br/&gt;
    -f         Copy the specified program even if the file already&lt;br/&gt;
               exists on the remote system.&lt;br/&gt;
    -i         Run the program so that it interacts with the desktop of the&lt;br/&gt;
               specified session on the remote system. If no session is&lt;br/&gt;
               specified the process runs in the console session.&lt;br/&gt;
    -l         Run process as limited user (strips the Administrators group&lt;br/&gt;
               and allows only privileges assigned to the Users group).&lt;br/&gt;
               On Windows Vista the process runs with Low Integrity.&lt;br/&gt;
    -n         Specifies timeout in seconds connecting to remote computers.&lt;br/&gt;
    -p         Specifies optional password for user name. If you omit this&lt;br/&gt;
               you will be prompted to enter a hidden password.&lt;br/&gt;
    -s         Run the remote process in the System account.&lt;br/&gt;
    -u         Specifies optional user name for login to remote&lt;br/&gt;
               computer.&lt;br/&gt;
    -v         Copy the specified file only if it has a higher version number&lt;br/&gt;
               or is newer on than the one on the remote system.&lt;br/&gt;
    -w         Set the working directory of the process (relative to&lt;br/&gt;
               remote computer).&lt;br/&gt;
    -x         Display the UI on the Winlogon secure desktop (local system&lt;br/&gt;
               only).&lt;br/&gt;
    -priority  Specifies -low, -belownormal, -abovenormal, -high or&lt;br/&gt;
               -realtime to run the process at a different priority. Use&lt;br/&gt;
               -background to run at low memory and I/O priority on Vista.&lt;br/&gt;
    computer   Direct PsExec to run the application on the remote&lt;br/&gt;
               computer or computers specified. If you omit the computer&lt;br/&gt;
               name PsExec runs the application on the local system,&lt;br/&gt;
               and if you specify a wildcard (\*), PsExec runs the&lt;br/&gt;
               command on all computers in the current domain.&lt;br/&gt;
    @file      PsExec will execute the command on each of the computers listed&lt;br/&gt;
               in the file.&lt;br/&gt;
    program    Name of application to execute.&lt;br/&gt;
    arguments  Arguments to pass (note that file paths must be&lt;br/&gt;
               absolute paths on the target system).&lt;/p&gt;

&lt;p&gt;You can enclose applications that have spaces in their name with&lt;br/&gt;
quotation marks e.g. psexec \marklap &quot;c:\long name app.exe&quot;.&lt;br/&gt;
Input is only passed to the remote system when you press the enter&lt;br/&gt;
key, and typing Ctrl-C terminates the remote process.&lt;/p&gt;

&lt;p&gt;If you omit a user name the process will run in the context of your&lt;br/&gt;
account on the remote system, but will not have access to network&lt;br/&gt;
resources (because it is impersonating). Specify a valid user name&lt;br/&gt;
in the Domain\User syntax if the remote process requires access&lt;br/&gt;
to network resources or to run in a different account. Note that&lt;br/&gt;
the password is transmitted in clear text to the remote system.&lt;/p&gt;

&lt;p&gt;Error codes returned by PsExec are specific to the applications you&lt;br/&gt;
execute, not PsExec.&lt;/p&gt;

&lt;p&gt;E:\Tools\SYSINT&gt;psexec \SH -u Jane -p ****** -i msra.exe /saveasfile D:\Y&lt;br/&gt;
onsm 123456&lt;/p&gt;

&lt;p&gt;PsExec v1.94 - Execute processes remotely&lt;br/&gt;
Copyright (C) 2001-2008 Mark Russinovich&lt;br/&gt;
Sysinternals - www.sysinternals.com&lt;br/&gt;
……&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>CeleLib：UniBase, CeleReg, CeleUtil, CeleCtrl 等基础函数库</title>
      <link href="http://example.com/celelib/"/>
      <updated>2008-11-28T13:53:25+08:00</updated>
      <id>http://example.com/celelib</id>
      <content type="html">&lt;p&gt;把新近整理的基础代码整理一下，欢迎评估使用。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;一、简要说明&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;CoStyle.doc 是代码风格文档。请参考 SourceStyler C++ 的 MFC 风格（部分规则已过期，未及时更新）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UniLib.doc 是 UniBase 的说明文档，尚未更新到最新版本，请酌情参考。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CeleLib\UniBase.h 是统一接口的平台库，这里提供的是 Windows 和 Windows Mobile 上的实现（请参看开头的编译注释）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CeleLib\CeleReg.h 是 Windows 和 Windows Mobile 上通用注册表操作类。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CeleLib\CeleUtil.h 是 Windows Mobile 中使用的基础使用函数库。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CeleLib\CeleCtrl.h 是 Windows Mobile 上的实用控件库，包括部分轻量级的控件、打开文件对话框和其它界面相关的类。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CeleLib\CeleCfg.h 是基于 UniBase 的 INI 操作类（不支持 Section，这应该是最高效的 INI 操作类了）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AppDef.h 是一个应用程序的基本宏定义。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Resource.h/Resource.rc 是资源文件框架。请使用 -n 命令编译。如果需要 Manifest，请定义好相应的 &lt;em&gt;M_IX86 或 &lt;/em&gt;M_X64 宏。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;二、许可&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Yonsm 保留这些代码的版权。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;任何人可以无偿使用这些代码。如果你使用了这写代码，请在软件界面、发布文档或者软件网站中写明“使用 Yonsm.NET 提供的部分代码”。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;任何人可以修改代码以供自己使用或重新发布。如果修改代码后重新发布，请在代码或者说明文档中提及“Yonsm.NET”。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Yonsm 不提供任何明示或隐含的担保。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;欢迎经常访问 WWW.Yonsm.NET 或许更新版本。&lt;/p&gt;

&lt;p&gt;Yonsm&lt;br/&gt;
2009.04.25&lt;br/&gt;
杭州&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/CeleLib.rar&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>提高PPC输入法切换速度</title>
      <link href="http://example.com/increase-the-speed-on-switching-input-method-for-ppc/"/>
      <updated>2008-11-06T13:17:36+08:00</updated>
      <id>http://example.com/increase-the-speed-on-switching-input-method-for-ppc</id>
      <content type="html">&lt;p&gt;关于 PPC 输入法切换速度慢的问题分析，很久以前我写过一篇日志（http://www.yonsm.net/read.php?265），从CE源代码中找出了原因，但一直没有解决方案。&lt;/p&gt;

&lt;p&gt;今天从论坛中一不小心看到一帖子（http://bbs.pdafans.com/thread-306707-1-1.html），说把 HKEY_CLASSS_ROOT\CLSID 导出然后重新导入，即可大大提高输入法切换速度。咋一看以为不太可能，试了一下之后发现，确实如此。&lt;/p&gt;

&lt;p&gt;初步猜测，可能的原因是，注册表的hive保存在ROM的原因导致了速度慢，重新导入后则把更改的部分导入到了内置存储中（可写Storage部分）。&lt;/p&gt;

&lt;p&gt;感谢 wwx1987 的发现。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>终于闲下来了……</title>
      <link href="http://example.com/finally-free/"/>
      <updated>2008-10-21T13:16:35+08:00</updated>
      <id>http://example.com/finally-free</id>
      <content type="html">&lt;p&gt;国庆节又长途奔袭了&lt;!-- more --&gt;，这次带MM一起回去的，玩的还比较开心。国庆后爸妈也来杭州玩了，昨天刚回去。&lt;/p&gt;

&lt;p&gt;又闲过来了，可以做点事。&lt;/p&gt;

&lt;p&gt;但，前天有人发脾气了。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>买了 HTC DIAMOND</title>
      <link href="http://example.com/buy-a-htc-diamond/"/>
      <updated>2008-09-13T00:47:08+08:00</updated>
      <id>http://example.com/buy-a-htc-diamond</id>
      <content type="html">&lt;p&gt;快一周了，HTC 3G 版，感觉尚可&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://i2.sinaimg.cn/IT/mobile/models/U513P2T136D7533F3244DT20080512152843.jpg&quot;&gt;&lt;img src=&quot;http://i2.sinaimg.cn/IT/mobile/models/U513P2T136D7533F3244DT20080512152843.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;感谢 撮撮鸭 （http://store.taobao.com/shop/view_shop-904eb809dde54cad4ef0b2e230eeccc1.htm）提供的货源和尚可接受的价格（http://auction1.taobao.com/auction/trade_detail.htm?trade_id=1062110880&amp;item;&lt;em&gt;id=1532509120&amp;x;&lt;/em&gt;id=online）&lt;/p&gt;

&lt;p&gt;有空会整点东西出来给 DIAMOND。P527 继续使用中……&lt;/p&gt;

&lt;p&gt;[注]Yonsm.NET 文章内容中提供的外部链接仅用于信息参考，不代表 Yonsm.NET 验证或保证其正确性和可靠性。请自行判外部链接所提供内容的风险，Yonsm.NET 不提供担保责任。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>ResBorn - 及其精妙的多语言引擎和附加工具</title>
      <link href="http://example.com/resborn/"/>
      <updated>2008-09-10T11:08:03+08:00</updated>
      <id>http://example.com/resborn</id>
      <content type="html">&lt;p&gt;又要马儿跑，又要马儿不吃草：）&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/ResBorn.png&quot;&gt;&lt;img src=&quot;/assets/ResBorn.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;程序多语言支持一般来说有以下两种方式：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;传统 INI 文件多语言支持：程序中动态加载INI内容，查找并替换界面中的语言相关字符串。&lt;br/&gt;
优点：无需编程知识，普通用户而已自己定制语言文件。且升级语言文件非常方便（不涉及语言字符串之外的东西）。&lt;br/&gt;
缺点：每次运行都耗费额外的工作量在解析语言文件和动态更新界面字符串上，有性能损失，且有些程序不通用。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MUI 方式的多语言支持：基于 Windows 提供的 MUI 支持，每个语言编译一个DLL。&lt;br/&gt;
优点：运行高效，无任何性能损失。&lt;br/&gt;
缺点：只有开发者才能做到多语言支持。每添加一种语言都要新建一个DLL/MUI。并且界面的改动，很可能导致 MUI 需要更新。费劲！&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;ResBorn 是一种高效方便的多语言引擎，它结合了上述两种方式的优点，但没有上述两种方式的缺点。它的工作模式如下：&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;1.导出字符串： 枚举指定PE文件（可以是当前进程的EXE文件）中的所有资源，把其中语言相关的字符串（对话框、菜单、字符表）导出为 LNG 格式的语言字符串列表（UNICODE带BOM的文本文件），用户可以使用任何文本编辑器编辑它。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;导入字符串：枚举指定PE文件（可以是当前进程的EXE文件，有自动退出更新机制）中的所有资源，根据1中所述的LNG文件，把特定的字符串更改结果回写到资源中，完成一个多语言版本的重构工作。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;其中，步骤一可省略，开发者可以提供原始的语言文件。步骤二仅在切换语言时调用，正常运行时不需要耗费任何的性能损失（根本不用干活），和MUI方式一样。&lt;/p&gt;

&lt;p&gt;简而言之，ResBorn 是一个 Win32 PE 资源专用解析引擎！&lt;/p&gt;

&lt;p&gt;下面是 ResBorn Engine （源代码）的相关内容：&lt;br/&gt;
1. ResBorn Engine 支持Windows各种版本，包括 Windows Mobile SP/PPC；&lt;br/&gt;
2. 支持 UNICODE 和 ASCII 编译（废话，我的代码一直如此）。&lt;br/&gt;
3. 加入完整的 ResBorn Engine 到 Pocket  PC 程序中会导致程序增大 11KB （够小）。PC 上不超过 20K&lt;br/&gt;
4. 全局 LANG 支持，例如，LNG 中加入一行“LANG=2052”，可以把所有的资源语言更改为中文。&lt;br/&gt;
5. 如有需要，稍后可能会 Release 源代码。&lt;/p&gt;

&lt;p&gt;更进一步地，你可以根本不用考虑多语言引擎，因为 ResBorn 本身提供了一个使用 ResBorn Engine 的工具（名字就叫 ResBorn），可以认为是一个专用资源汉化工具（或者英化？等）。使用 ResBorn 工具，可以INI格式的语言字符列表，修改后回写到EXE/DLL文件中，即可得到一个新语言版本的程序。（理论上针对任何PE有效，不需要在程序中做什么工作，即，对任何第三方程序可用）&lt;/p&gt;

&lt;p&gt;2008.09.11 更新为 ResBorn 1.2.150（包含源代码）：&lt;br/&gt;
&lt;a href=&quot;/assets/1221104625_6755d934.rar&quot;&gt;ResBorn.1.2.150.rar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;注意：第4个版本，已经比较完善了，代码支持在PC/PPC/SP中编译运行。使用前请自行备份要操作的EXE文件。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>[转载]CeleDial：小软件大智慧</title>
      <link href="http://example.com/celedial-small-software-wisdom/"/>
      <updated>2008-09-09T11:42:22+08:00</updated>
      <id>http://example.com/celedial-small-software-wisdom</id>
      <content type="html">&lt;p&gt;介绍如何使用 CeleDial 的文章，介绍挺详细的。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;   老实说， PPC 在传统手机电话功能方面做的确实不咋滴。特别是智能查找联系人、智能拨号，说它很智能可能有点牵强。&lt;/p&gt;

&lt;p&gt;   进入联系人，快捷查找只能用首字母查找，这个首字母可是货真价实的首字母：联系人条目第一个字的首字母，而不是姓和名字的多个首字母。如果手机联系人比较多，这样的搜查结果显然不能让人满意。当然你也可以在查找栏输入拼音或者汉字定位具体联系人，如果你觉得这样有趣的话。&lt;/p&gt;

&lt;p&gt;   拨号时查找号码最智能就只能用拼音全拼，&quot;快速拨号&quot;亦有局限性。查找 SIM 卡上的通讯录倒有一个所有手机都具有的&quot;按条目序号&quot;查找功能，就是输入联系人在 SIM 卡上的存储位置序号后按 # 号。例如我知道&quot;苳儿&quot;号码的存储位置序号是 161, 那我拨&quot; 161# &quot;就会显示联系人电话号码和拨号提示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bible.younet.com/images/2008/06/25/6423b6c9d2.jpg&quot; alt=&quot;1.jpg  按此在新窗口浏览图片！&quot; /&gt;&lt;/p&gt;

&lt;p&gt;   不过要记忆的条目多的话，那比记忆联系人电话号码好不到哪儿去！&lt;/p&gt;

&lt;p&gt;   这时候我们需要更智能的方法，智能拨号软件就能帮助我们。我就介绍一下我正在 i-mate PDAL 上使用的智能拨号软件： CeleDial 。&lt;/p&gt;

&lt;p&gt;   宝典里没看到 CeleDial 的使用介绍。之前在论坛老看到很多人说安装了不知道怎么使用，我就笑。现在我倒觉得自己很好笑，&quot;很傻很天真&quot;！因为要完全弄懂弄透它还真得花点功夫。&lt;/p&gt;

&lt;p&gt;   CeleDial 是一个只有 100 多 k 的小软件，有 cab 安装版和 exe 绿色版两种，我用的是 cab 安装版。安装以后在 Program Files 里生成的 CeleDial 安装目录中，只有一个动态连接库文件和一个网页文件。它会无缝集成到拨号界面，使用电话程序中的屏幕键盘。设置、使用可以很简单，也可以很复杂。&lt;/p&gt;

&lt;p&gt;   怎么这样说话呢我？----跟我来……&lt;/p&gt;

&lt;p&gt;   在拨号界面的&quot;菜单&quot;-&gt;&quot; CeleDial 设置&quot;里进去进行设置。----另，设置以后在拨号面板上的 CeleDial 窗口长按，亦可进入设置。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bible.younet.com/images/2008/06/25/f532df886b.jpg&quot; alt=&quot;2.jpg  按此在新窗口浏览图片！&quot; /&gt;&lt;img src=&quot;http://bible.younet.com/images/2008/06/25/73fa763538.jpg&quot; alt=&quot;3.jpg  按此在新窗口浏览图片！&quot; /&gt;&lt;/p&gt;

&lt;p&gt;   说 CeleDial 的设置、使用可以很简单，就是在&quot;选项&quot;里勾选所有项目，就可以使用 CeleDial 的所有智能拨号功能了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bible.younet.com/images/2008/06/25/1cfe7ce589.jpg&quot; alt=&quot;4.jpg  按此在新窗口浏览图片！&quot; /&gt;&lt;/p&gt;

&lt;p&gt;   若陛下不想知道多一点的话，那就先退朝吧！臣接着往下说。&lt;/p&gt;

&lt;p&gt;   在&quot;选项&quot;里的项目几乎都很容易理解，挑几个说一下。&lt;/p&gt;

&lt;p&gt;----&quot;启用智能拨号&quot;当然要选，那是我们安装 CeleDial 的目的。这个复选项是让你暂时不想用它的时候多一个选择而已。&lt;/p&gt;

&lt;p&gt;----&quot;拦截拨号按键&quot;主要就是关联拨号 ( 硬 ) 键，让拨号键拨出的是 CeleDial 电话条目。举个例，我在拨号面板随便输入&quot; 3664 &quot;这几个数字， CeleDial 选定的电话条目是&quot;东江豆腐&quot;，如果勾选了&quot;拦截拨号按键&quot;，那按下手机拨号键 , 拨出&quot;东江豆腐&quot;的电话，按&quot;通话&quot;触键，拨出的是&quot; 3664 &quot;这几个号码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bible.younet.com/images/2008/06/25/03cd67a60b.jpg&quot; alt=&quot;5.jpg  按此在新窗口浏览图片！&quot; /&gt;&lt;/p&gt;

&lt;p&gt;   如果没有选取&quot;拦截拨号按键&quot;，按&quot;通话&quot;触键和拨号键都会拨出&quot; 3664 &quot;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bible.younet.com/images/2008/06/25/319d248c47.jpg&quot; alt=&quot;6.jpg  按此在新窗口浏览图片！&quot; /&gt;&lt;img src=&quot;http://bible.younet.com/images/2008/06/25/7da5419b45.jpg&quot; alt=&quot;7.jpg  按此在新窗口浏览图片！&quot; /&gt;&lt;/p&gt;

&lt;p&gt;----&quot;匹配姓名拼音、匹配姓名简拼、匹配电话号码&quot;就是全拼、简拼、电话号码智能查找，我都能理解你们当然就没问题啦。&quot;任意拼音、任意简拼、任意号码&quot;这三项，选择，则匹配联系人条目任意位置的全拼、简拼、号码查找。例如查找&quot;水禾田秀芳&quot;，不必非从&quot;水&quot;字开始，只输入&quot;禾田秀芳&quot;简拼 htxf 所在键的数字&quot; 4893 &quot;即可找到目标。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bible.younet.com/images/2008/06/25/0882791254.jpg&quot; alt=&quot;8.jpg  按此在新窗口浏览图片！&quot; /&gt;&lt;/p&gt;

&lt;p&gt;   不选择这三项，则查找时必须按联系人条目的先后顺序，分别从联系人条目全拼、简拼、号码的第一个字符开始匹配。如下图，在不选择这三项的情况下，我同样输入&quot;禾田秀芳&quot;简拼 htxf 所在键的数字&quot; 4893 &quot;，就无法找到匹配项目。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bible.younet.com/images/2008/06/25/8a882a40a1.jpg&quot; alt=&quot;9.jpg  按此在新窗口浏览图片！&quot; /&gt;&lt;img src=&quot;http://bible.younet.com/images/2008/06/25/90172fe77f.jpg&quot; alt=&quot;10.jpg  按此在新窗口浏览图片！&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  &quot;选项&quot;卡里的其他项目就不再赘述了，默认即可。&lt;/p&gt;

&lt;p&gt;   下面来看&quot;命令&quot;。----这个拨号命令扩展功能是系统拨号做不到的，就是在找出联系人后在号码前添加前缀呼出。&lt;/p&gt;

&lt;p&gt;   先设置拨号命令扩展，即添加拨号前缀命令。在&quot;命令&quot;选项卡，编辑或添加你所需的命令，双击命令条目即可进行编辑。在这里还可以上下移动命令项目进行排序。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bible.younet.com/images/2008/06/25/bde54454a8.jpg&quot; alt=&quot;11.jpg  按此在新窗口浏览图片！&quot; /&gt;&lt;/p&gt;

&lt;p&gt;   （我是电脑白痴，不懂&quot;宏&quot;，不懂提示，我参照其原有的命令 来添加命令条目）。 例如，添加&quot;联通 IP &quot;：点击&quot;添加&quot;按钮-&gt;-&gt;&quot;出现&quot;框选&quot; 1 &quot;（ 0 为不显示）-&gt;-&gt;&quot;名称&quot;框填入&quot;联通 IP （空格） %p &quot;-&gt;-&gt;&quot;命令&quot;框填入&quot; 17911 &quot; ( 正确的 IP 前缀 ) -&gt;-&gt;&quot; ok &quot;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bible.younet.com/images/2008/06/25/3c542b82ef.jpg&quot; alt=&quot;12.jpg  按此在新窗口浏览图片！&quot; /&gt;&lt;/p&gt;

&lt;p&gt;   在拨号面板找到目标联系人后，在右键（长按）弹出菜单中，选择你事先设定的前缀 ( 命令 ) ，即可拨出加了前缀的该联系人号码。如我点击下图中的&quot;联通 IP &quot;，即可拨出加了前缀的&quot;栋师傅&quot;号码---- 1791161936424 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bible.younet.com/images/2008/06/25/72f3ddafaf.jpg&quot; alt=&quot;13.jpg  按此在新窗口浏览图片！&quot; /&gt;&lt;/p&gt;

&lt;p&gt;   CeleDial 电话条目跟系统的联系人条目在拨号面板显示的最大区别，就是系统拨号联系人条目前面的是图标，且不显示电话号码；而 CeleDial 电话条目前面的是序号，就算没有选择&quot;选项&quot;卡里的&quot;显示条目序号&quot;， CeleDial 电话条目前面也不会出现任何图标。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bible.younet.com/images/2008/06/25/068e093222.jpg&quot; alt=&quot;14.jpg  按此在新窗口浏览图片！&quot; /&gt;&lt;img src=&quot;http://bible.younet.com/images/2008/06/25/f10239dfc4.jpg&quot; alt=&quot;15.jpg  按此在新窗口浏览图片！&quot; /&gt;&lt;/p&gt;

&lt;p&gt;   &quot;隐藏键盘&quot;以后，所显示的条目肯定是系统联系人条目，在系统联系人条目上是不能应用 CeleDial 命令的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bible.younet.com/images/2008/06/25/b1ec63cacf.jpg&quot; alt=&quot;16.jpg  按此在新窗口浏览图片！&quot; /&gt;&lt;/p&gt;

&lt;p&gt;   前辈说，删除 CeleDial 前最好先执行&quot;退出&quot;，这样才能保证卸载干净。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bible.younet.com/images/2008/06/25/415397a24d.jpg&quot; alt=&quot;17.jpg  按此在新窗口浏览图片！&quot; /&gt;&lt;/p&gt;

&lt;p&gt;   如有疑问就寻求&quot;帮助&quot;----在&quot; CeleDial 设置&quot;里有&quot;帮助&quot;项，很祥细，用词精辟专业，有些我看不懂，嘿嘿！我没什么文化而且很小气，希望各位看官能看得 明白我写的，而且 不要笑话我，否则我会生气滴！&lt;/p&gt;

&lt;p&gt;来自：http://bible.younet.com/files/2008/06/25/393927.shtml &lt;br/&gt;
或者：http://www.google.cn/search?client=aff-os-worldbrowser&amp;amp;forid=1&amp;amp;ie=utf-8&amp;amp;oe=UTF-8&amp;amp;hl=zh-CN&amp;amp;q=CeleDial%EF%BC%9A%E5%B0%8F%E8%BD%AF%E4%BB%B6%E5%A4%A7%E6%99%BA%E6%85%A7&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>IME Support for RichInk</title>
      <link href="http://example.com/ime-support-for-richink/"/>
      <updated>2008-09-05T03:23:30+08:00</updated>
      <id>http://example.com/ime-support-for-richink</id>
      <content type="html">&lt;p&gt;一般来说，PPC 下有两种输入法，一种是 SIP （如梅花输入法） 一种是 IME（如A4的数字硬键盘输入法）。&lt;/p&gt;

&lt;p&gt;最近把 RichInk 移植到 SP 中，发现不能激活 IME 输入。IME 是 IMM 管理的，，经过分析发现 RichInk 在PPC下也不支持 IME 的，仅支持 SIP输入。但SP下的输入法没有 SIP 的，一般都是IME的&lt;!-- more --&gt;（少量不正规的输入法也不是IME的，是乱来的，比如以前很炮火的无敌快手，但现在估计没人用了）。&lt;/p&gt;

&lt;p&gt;我在 WM6下看到一个 Shell函数 SHSetImeMode。于是尝试SubClass RichInk，发现只有在WM_IIME_SETCONTEXT的时候调用 SHSetImeMode，才能搞定。&lt;/p&gt;

&lt;p&gt;终于有点眉目，但是 WM5/2003都没有这个函数。于是我又反汇编看了一下这个函数在 Aygshell.dll 中的实现，得出代码如下：&lt;/p&gt;

&lt;p&gt; HIMC hImc = ImmGetContext(m_hRichInk);&lt;br/&gt;
 if (hImc)&lt;br/&gt;
 {&lt;br/&gt;
   if (!ImmGetOpenStatus(hImc))&lt;br/&gt;
   {&lt;br/&gt;
     ImmSetOpenStatus(hImc, TRUE);&lt;br/&gt;
     ImmEscape(NULL, hImc, IME_ESC_PRIVATE_FIRST, NULL);&lt;br/&gt;
   }&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt;就这样搞定了，关键是ImmEscape（...IME_ESC_PRIVATE_FIRST...），一个私有的系统标识，要这个才能把输入法指示图标显示出&lt;/p&gt;

&lt;p&gt;以前我也尝试过 ImmSetOpenStatus，其实已经打开输入法了，但就是不能现实 IME 的图标，所以根本就没察觉。我倒！&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>关于 Yonsm.NET 的统计概况</title>
      <link href="http://example.com/statistics-for-yonsm-net/"/>
      <updated>2008-08-29T01:21:11+08:00</updated>
      <id>http://example.com/statistics-for-yonsm-net</id>
      <content type="html">&lt;p&gt;网站名称 Yonsm.NET
网站网址 http://www.yonsm.net
网站介绍 SHARE YONSM&#39;S IDEAS&lt;/p&gt;

&lt;p&gt;—————— ———-&lt;/p&gt;

&lt;p&gt;当天PV 575&lt;br/&gt;
当天独立访客 175&lt;br/&gt;
当天IP数 188&lt;/p&gt;

&lt;p&gt;—————— ———-&lt;/p&gt;

&lt;p&gt;昨日PV 3335&lt;br/&gt;
昨日独立访客 1106&lt;br/&gt;
昨日IP数 1126&lt;br/&gt;
平均每人访问页数 2.96&lt;/p&gt;

&lt;p&gt;—————— ———-&lt;/p&gt;

&lt;p&gt;历史最高PV 12583 (2007-08-06)&lt;br/&gt;
历史最高IP 2415 (2007-10-24)&lt;br/&gt;
历史最高独立访客 2339 (2007-10-24)&lt;/p&gt;

&lt;p&gt;—————— ———-&lt;/p&gt;

&lt;p&gt;平均PV值 2610
Cnzz排名 22893
累计总PV 2279071&lt;br/&gt;
累计独立访客 785819&lt;br/&gt;
累计总IP 814870&lt;br/&gt;
平均每人访问页数 2.80&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>离开GF的日子……</title>
      <link href="http://example.com/days-without-gf/"/>
      <updated>2008-08-25T08:23:42+08:00</updated>
      <id>http://example.com/days-without-gf</id>
      <content type="html">&lt;p&gt;似乎以前很快流逝的时间瞬间变得很漫长、无趣和无聊，而在这之前的之前，经常沉浸在自我陶醉般的“玩”各种东西是我的最大爱好，现在似乎又要暂时恢复到这种状态一段时间了……&lt;/p&gt;

&lt;p&gt;“只好”继续“玩”……&lt;/p&gt;

&lt;p&gt;TODO:&lt;br/&gt;
Resco Explorer 2008 &lt;br/&gt;
GPS Utilities Pack&lt;br/&gt;
P527 ROM Reload&lt;br/&gt;
CeleTask Refresh&lt;br/&gt;
New Products?&lt;/p&gt;

&lt;p&gt;一个月太久，只争朝夕……&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>[转载]多普达Touch Diamond评测! 钻石机王 智能巅峰</title>
      <link href="http://example.com/using-touch-diamond/"/>
      <updated>2008-07-09T07:58:38+08:00</updated>
      <id>http://example.com/using-touch-diamond</id>
      <content type="html">&lt;p&gt;&lt;a href=&quot;http://comm.ccidnet.com/col/attachment/2008/5/1485493.jpg&quot;&gt;&lt;img src=&quot;http://comm.ccidnet.com/col/attachment/2008/5/1485493.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原文：http://mobile.pconline.com.cn/review/0806/1325149.html&lt;/p&gt;

&lt;p&gt;这个机器上市价格比较厚道，现在4300左右可以拿到 HTC 版本。相对以前很多HTC高端机器的杀人价格相比，这个机器算是很厚道了。&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;另外，做了个Diamond 可用的 PSShutXP，支持真正关机：http://bbs.pdafans.com/viewthread.php?tid=585113&amp;amp;extra=page%3D1%26amp%3Bfilter%3Dtype%26amp%3Btypeid%3D221%26area%3D&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>CeleScript - 方便实用、居家旅行、莫名其妙的批处理脚本解释引擎</title>
      <link href="http://example.com/celescript/"/>
      <updated>2008-04-27T14:24:44+08:00</updated>
      <id>http://example.com/celescript</id>
      <content type="html">&lt;p&gt;CeleScript 是一个从 PE 的 XCMD 和为 Windows Mobile 上的 CeleCmd 演变而来的一个东西，我自己用了很久了，语法比较莫名其妙，但用起来比较方便实用。主要用来做一些安装软件、系统设置等自动化操作。基本上的代码都是以前为 Windows Mobile 写的 CeleCmd 转换而来，没有花太多精力，基本上属副产品：）&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;下载：&lt;a href=&quot;/assets/CeleScript.3.0.820.zip&quot;&gt;CeleScript 3.0.820&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2009.1.11 更新&lt;br/&gt;
PC 上的一键安装工具包：&lt;br/&gt;
工具包（常用工具）：http://yonsm.net/up/CeleTools.exe &lt;br/&gt;
扩展工具包（调试分析工具）：http://yonsm.net/up/CeleTools+.exe&lt;br/&gt;
软件包（普通用户通用工具）：http://yonsm.net/up/CeleUtilities.exe&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;CeleScript 使用说明&lt;br/&gt;
注意：此帮助文件未经仔细校对，可能有部分命令解释有误。若有谬错之处，敬请指正。&lt;/p&gt;

&lt;p&gt;[简介] [特点] [安装] [使用] [菜单] [命令] [问答] [许可] [致谢]&lt;/p&gt;

&lt;p&gt;一、简介&lt;br/&gt;
欢迎使用功能强大、灵活方便的 CeleScript 命令解释引擎。您只要编写简单的 CeleScript 命令文件，就能在 Windows 中实现灵活强大的批处理功能。&lt;br/&gt;
[目录]&lt;/p&gt;

&lt;p&gt;二、特点&lt;br/&gt;
性能高效：命令解释引擎精巧构思，短小精干，运行迅速。&lt;br/&gt;
　 &lt;br/&gt;
功能强大：内置支持多种命令，使用这些命令可以编写出功能强大的批处理脚本。&lt;br/&gt;
　 &lt;br/&gt;
扩展支持：支持调用外部 EXE 和 DLL 函数。&lt;br/&gt;
　 &lt;br/&gt;
使用灵活：支持格式统一的命令行参数和命令文件，可以在命令行、命令文件和程序界面中，调用 CeleScript 的各种功能。&lt;br/&gt;
　 &lt;br/&gt;
其它功能：支持导入标准的和扩展的 Windows 注册表脚本脚本。&lt;br/&gt;
　 &lt;br/&gt;
方便调试：在程序界面中执行命令或命令文件，可以在日志窗口中跟踪脚本执行的流程和结果，方面发现命令脚本的问题。&lt;br/&gt;
　 &lt;br/&gt;
广泛支持：一个可执行文件，同时支持 Windows 2000/XP/2003/Vista，并且适用于 Windows XPE 中作为登录解释脚本引擎。&lt;br/&gt;
　 &lt;br/&gt;
源码公开：源代码公开，方便更改定制和功能增强，且在源代码中增加扩展命令支持非常容易。 &lt;br/&gt;
[目录]&lt;/p&gt;

&lt;p&gt;三、安装&lt;br/&gt;
安装：绿色软件，直接运行 CeleScript.exe 即可使用。如果要关联 .csc 命令文件，可以在在程序中双击 CeleScript 的图标。&lt;br/&gt;
　 &lt;br/&gt;
卸载：CeleScript 是“绿色”软件，删除 CeleScript.exe 即可卸载。如果选择了关联 .csc 命令文件，请在程序中再次双击 CeleScript 的图标取消文件关联。 &lt;br/&gt;
[目录]&lt;/p&gt;

&lt;p&gt;四、使用&lt;br/&gt;
使用方式&lt;br/&gt;
　&lt;br/&gt;
直接执行本程序，将显示允许输入命令和现实执行结果的对话框，您可以直接在程序界面上执行各种操作。&lt;br/&gt;
　 &lt;br/&gt;
在命令行参数中使用，例如，要创建快捷方式，执行“CeleScript.exe LINK %M\程序\测试程序.lnk,%W\Test.exe”即可。&lt;br/&gt;
　 &lt;br/&gt;
在命令文件中使用，例如，“CeleScript.exe LOAD C:\Test*.csc”。&lt;br/&gt;
　 &lt;br/&gt;
如果省略命令关键字，将自动判断参数，且支持通配符和子目录递归查找匹配文件（前导“!”）。如 CeleScript.exe %C*.csc。CeleScript 将按以下规则解析执行：&lt;/p&gt;

&lt;p&gt;.inf：安装 INF 文件。 &lt;br/&gt;
.csc、.reg：执行 CeleScript 的 LOAD 命令。 &lt;br/&gt;
.dll、.ocx、.ax：执行 CeleScript 的 CDLL 命令。 &lt;br/&gt;
.exe、.com、bat、cmd：运行可执行文件和批处理文件。&lt;/p&gt;

&lt;p&gt;命令格式&lt;/p&gt;

&lt;p&gt;CeleScript 的命令是一行字符串，以大写的四字符关键字开始，紧跟着的是空格或制表符，后面是命令的参数。&lt;br/&gt;
　 &lt;br/&gt;
参数之间用逗号“,”分隔，如果在参数中要使用逗号本身，则需要使用“%,”的转义字符。&lt;br/&gt;
　 &lt;br/&gt;
不同的命令的参数格式不一致，详细请参考 命令。&lt;br/&gt;
　 &lt;br/&gt;
变量与宏&lt;/p&gt;

&lt;p&gt;CeleScript 读取一条个命令文件后，首先展开其中用“%”号前导的宏：&lt;br/&gt;
　&lt;br/&gt;
E    当前脚本的完整路径 &lt;br/&gt;
C    当前脚本的目录 &lt;br/&gt;
T    当前时间 &lt;br/&gt;
D    当前日期 &lt;br/&gt;
X    最后一条命令的返回值，十六进制格式，如 0XFFFFFFFF &lt;br/&gt;
x    最后一条命令的返回值，十进制格式，如 -1 &lt;br/&gt;
0-9  用户变量值，用户可以通过 EVAL 命令设置变量 0 到 9 的内容 &lt;br/&gt;
A    可能是 \Application Data &lt;br/&gt;
Y    可能是 \My Documents &lt;br/&gt;
S    可能是 \Windows\Startup &lt;br/&gt;
W    可能是 \Windows &lt;br/&gt;
P    可能是 \Windows\“开始”菜单\程序 &lt;br/&gt;
M    可能是 \Windows\“开始”菜单 &lt;br/&gt;
F    可能是 \Program Files &lt;br/&gt;
O    可能是 [User Name]\SendTo &lt;br/&gt;
R    回车字符 &lt;br/&gt;
N    换行字符&lt;/p&gt;

&lt;h1&gt;十六进制字符，后面紧跟这四个十六进制字符，如“%#FEFF”&lt;/h1&gt;

&lt;p&gt;%    由于“%”用于宏转义，如果需要在参数中确实需要使用“%”本身，则需要用两个“%”代替，如“%1”要写成“%%1”。 &lt;br/&gt;
,    CeleScript 把“,”作为参数分隔符，与“%”类似，如果在参数中需要使用“,”本身，则需要使用“%,”的形式。&lt;br/&gt;
　 &lt;br/&gt;
命令文件&lt;/p&gt;

&lt;p&gt;CeleScript 的命令文件是由 CeleScript 命令组成的命令集合。&lt;br/&gt;
　&lt;br/&gt;
每条命令单独一行。 &lt;br/&gt;
命令文件中可以使用注释，注释必须单独一行，以“;”作为注释行开始。 &lt;br/&gt;
命令文件支持 UNICODE 格式和 ASCII 格式，为了更高的执行效率，推荐使用 UNICODE 格式。 &lt;br/&gt;
命令文件中可以杂合 Windows Registry Script 内容，CeleScript 会把 Registry Script 导入到注册表。但是使用这种方式必须十分小心，因为执行过程中，Registry Script 部分会被修改（仅在内存中），可能导致 CALL 和 GOTO 无法正常使用（使用原则：最新会被执行到的 Registry Script 放在文件最后的子过程中，这样就能避免问题）。 &lt;br/&gt;
[目录]&lt;/p&gt;

&lt;p&gt;五、界面&lt;br/&gt;
执行：执行命令。&lt;br/&gt;
　 &lt;br/&gt;
关于：显示程序版本、版权和作者信息。&lt;br/&gt;
　 &lt;br/&gt;
退出：退出 CeleScript 程序。&lt;br/&gt;
　 &lt;br/&gt;
清除日志：单击 CeleScript 图标。&lt;br/&gt;
　 &lt;br/&gt;
文件关联：双击 CeleScript 图标。 &lt;br/&gt;
[目录]&lt;/p&gt;

&lt;p&gt;六、命令&lt;br/&gt;
[LOAD] [BATC] [IFEX] [ELSE] [CALL] [GOTO] [PROC] [ENDP] [PLAY] [BEEP] [MSGX] [DLGX] [LINK] [FILE] [REGX] [ENVI] [SEND] [WAIT] [KILL] [SHUT] [EXEC] [CDLL] [EVAL] [ASOC] [CCUI]&lt;/p&gt;

&lt;p&gt;具体使用方法请参看附件中的 Resource\CeleScript.htm，或者在 CeleScript 中点击标题栏右上角的问号按钮&lt;/p&gt;

&lt;p&gt;七、问答&lt;br/&gt;
在 XPE 中，如何使用 CeleScript 作为登录解释引擎？&lt;/p&gt;

&lt;p&gt;我也不知道。 &lt;br/&gt;
[目录]&lt;/p&gt;

&lt;p&gt;八、许可&lt;br/&gt;
本程序及其源代码是可以免费获取的。&lt;br/&gt;
　 &lt;br/&gt;
如果您使用或修改了其中任何的源代码，则必须把使用这些源代码的项目以及项目内的所有源代码和文档公开。否则禁止使用本程序源代码的任何部分。&lt;br/&gt;
　 &lt;br/&gt;
您可以复制、分发和传播无限制数量的软件产品，但您必须保证每一份复制、分发和传播都必须是完整和真实的，包括所有有关本软件产品的软件、电子文档，版权和商标宣言。&lt;br/&gt;
　 &lt;br/&gt;
作者特此申明对本软件产品之使用不提供任何保证，不对任何用户保证本软件产品的适用性，不保证无故障产生；亦不对任何用户使用此软件所遭遇到的任何理论上的或&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Windows Mobile 中开关 WIFI 的“通用”代码</title>
      <link href="http://example.com/windows-mobile-wifi-switch-code/"/>
      <updated>2008-04-25T14:39:23+08:00</updated>
      <id>http://example.com/windows-mobile-wifi-switch-code</id>
      <content type="html">&lt;p&gt;从网上看到用SetDevicePower可以开关WIFI，但郁闷的是不同的OEM厂商，甚至不同型号的手机，WIFI设备名称都可能不一样。&lt;/p&gt;

&lt;p&gt;不过我想了想，还是搞定了 Windows Mobile 中开关 WIFI 的&quot;通用&quot;代码，基本上在各种WM手机中都能正常工作。&lt;/p&gt;

&lt;p&gt;看下面的代码，主要是枚举所有的通讯设备，如果设备显示名称中包含特定字符串（如Wi-Fi，802.11等）就认为是WIFI设备，接下来的问题迎刃而解，OK，&quot;完美&quot;收工：）&lt;!-- more --&gt;&lt;/p&gt;

&lt;h1&gt;pragma once&lt;/h1&gt;

&lt;h1&gt;include &quot;UniBase.h&quot;&lt;/h1&gt;

&lt;h1&gt;include &quot;Reg.h&quot;&lt;/h1&gt;

&lt;h1&gt;include &amp;lt;PM.h&gt;&lt;/h1&gt;

&lt;p&gt;class CWiFiHelper&lt;br/&gt;
{&lt;br/&gt;
private:&lt;br/&gt;
   TCHAR m_tzDevice[MAX_NAME];&lt;/p&gt;

&lt;p&gt;public:&lt;br/&gt;
   CWiFiHelper()&lt;br/&gt;
   {&lt;br/&gt;
       TCHAR tzKey[MAX_PATH];&lt;br/&gt;
       CReg reg(HKEY_LOCAL_MACHINE, TEXT(&quot;Comm&quot;));&lt;br/&gt;
       for (UINT i = 0; reg.EnumKey(i, tzKey) == S_OK; i++)&lt;br/&gt;
       {&lt;br/&gt;
           if (tzKey[UStrLen(tzKey) - 1] == &#39;1&#39;)&lt;br/&gt;
           {&lt;br/&gt;
               CReg dev(reg, tzKey);&lt;br/&gt;
               TCHAR tzDisplayName[MAX_PATH];&lt;br/&gt;
               if (dev.GetStr(TEXT(&quot;DisplayName&quot;), tzDisplayName))&lt;br/&gt;
               {&lt;br/&gt;
                   if (UStrStrI(tzDisplayName, TEXT(&quot;WiFi&quot;)) || &lt;br/&gt;
                       UStrStrI(tzDisplayName, TEXT(&quot;Wi-Fi&quot;)) || &lt;br/&gt;
                       UStrStrI(tzDisplayName, TEXT(&quot;Wireless&quot;)) || &lt;br/&gt;
                       UStrStr(tzDisplayName, TEXT(&quot;802.11&quot;)))&lt;br/&gt;
                   {&lt;br/&gt;
                       UStrPrint(m_tzDevice, PMCLASS_NDIS_MINIPORT TEXT(&quot;&lt;a href=&quot;file://%25s/&quot;&gt;\%s&lt;/a&gt;&quot;), tzKey);&lt;br/&gt;
                       //MessageBox(NULL, m_tzDevice, STR_AppName, MB_ICONINFORMATION);&lt;br/&gt;
                       return;&lt;br/&gt;
                   }&lt;br/&gt;
               }&lt;br/&gt;
           }&lt;br/&gt;
       }&lt;br/&gt;
       m_tzDevice[0] = 0;&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   BOOL IsEnabled()&lt;br/&gt;
   {&lt;br/&gt;
       CEDEVICE_POWER_STATE s = D4;&lt;br/&gt;
       if (m_tzDevice [0])&lt;br/&gt;
       {&lt;br/&gt;
           GetDevicePower(m_tzDevice, POWER_NAME, &amp;amp;s);&lt;br/&gt;
       }&lt;br/&gt;
       return s == D0;&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   HRESULT Enable(BOOL bEnable = TRUE)&lt;br/&gt;
   {&lt;br/&gt;
       if (m_tzDevice [0])&lt;br/&gt;
       {&lt;br/&gt;
           return SetDevicePower(m_tzDevice, POWER_NAME, bEnable ? D0 : D4);&lt;br/&gt;
       }&lt;br/&gt;
       else&lt;br/&gt;
       {&lt;br/&gt;
           return ERROR_DEVICE_NOT_AVAILABLE;&lt;br/&gt;
       }&lt;br/&gt;
   }&lt;br/&gt;
};&lt;/p&gt;

&lt;p&gt;附件是一个小程序，无参数执行自动切换 WIFI 开关SP/PPC通用。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>在 ASUS A8Sc 中安装 Mac OSX Leopard 10.5.2</title>
      <link href="http://example.com/intall-mac-os-x-leopard-on-asus-a8sc-notebook/"/>
      <updated>2008-04-14T02:31:07+08:00</updated>
      <id>http://example.com/intall-mac-os-x-leopard-on-asus-a8sc-notebook</id>
      <content type="html">&lt;p&gt;突发奇想想在我的 A8Sc 笔记本上装个 Mac OSX Leopard 玩玩。本来以为是很简单的事情，在MM面前夸口说没有做不到滴，还叫她一起看安装进度，结果竟然装不上，RP差点崩溃了：)&lt;/p&gt;

&lt;p&gt;回来后一番琢磨，终于搞定了。基本上做到了完美的状态，除了无线网卡和读卡器不能工作之外（网卡可以工作，无线网络可用可不用）。&lt;/p&gt;

&lt;p&gt;前期绕了很多弯路，现在想想其实不复杂----关键是需要刷特定的 BIOS。如果你也有兴趣，不妨看看我的安装步骤：）&lt;!-- more --&gt;&lt;br/&gt;
&lt;strong&gt;&lt;br/&gt;
一、准备&lt;br/&gt;
&lt;/strong&gt;&lt;br/&gt;
&lt;strong&gt;1. 刷 BIOS：&lt;br/&gt;
&lt;/strong&gt;&lt;br/&gt;
看帖子，在帖子中找找你的笔记本的BIOS，Kalyl 的修改版，看看有没有，没有的话可以请求他做个最新版本的修改：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://forum.insanelymac.com/index.php?showtopic=90505&amp;amp;st=20&quot;&gt;http://forum.insanelymac.com/index.php?showtopic=90505&amp;amp;st=20&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;对于 ASUS A8Sc，BIOS 下载地址是：&lt;br/&gt;
&lt;a href=&quot;http://rapidshare.com/files/96376069/A8SEAS.301_mod.zip.html&quot;&gt;http://rapidshare.com/files/96376069/A8SEAS.301_mod.zip.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 下载Mac OSX Leopard 10.5.2 安装盘，用Kalyway的版本：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://thepiratebay.org/tor/4122511/Kalyway_Leopard_10.5.2_DVD_Intel_Amd&quot;&gt;http://thepiratebay.org/tor/4122511/Kalyway_Leopard_10.5.2_DVD_Intel_Amd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.因为Kalyway精简掉了中文支持，所以还必须修在中文支持包：&lt;br/&gt;
&lt;/strong&gt;&lt;br/&gt;
1).简体中文:&lt;br/&gt;
下载地址1:&lt;a href=&quot;http://www.mediafire.com/?xkmmkmoer7z&quot;&gt;http://www.mediafire.com/?xkmmkmoer7z&lt;/a&gt;&lt;br/&gt;
下载地址2:http://www.fs2you.com/files/051ec987-f5cf-11dc-93ac-0014221b798a/&lt;/p&gt;

&lt;p&gt;2).繁体中文:&lt;br/&gt;
下载地址:http://www.fs2you.com/files/1e8f6b8c-081e-11dd-a48a-0014221b798a/&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.因为在 Vista 或者 XP 共存的，所以建议用 TBOOT 或者 CHAIN0 来引导，你还需要修在 TBOOT 和 CHAIN0：&lt;br/&gt;
&lt;/strong&gt;&lt;br/&gt;
TBOOT: &lt;a href=&quot;http://www.weiphone.com/thread-1918-1-1.html&quot;&gt;http://www.weiphone.com/thread-1918-1-1.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;**5. nVIDIA 8400 M或者其他 nVIDIA 的显卡，请下载驱动包：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.horay.cn/download/10.5.2_NV8600GT_kexts.rar&quot;&gt;http://www.horay.cn/download/10.5.2_NV8600GT_kexts.rar&lt;/a&gt;&lt;br/&gt;
&lt;strong&gt;&lt;br/&gt;
&lt;/strong&gt;6.建议下载Fun Input Toy 输入法：&lt;/p&gt;

&lt;p&gt;**&lt;a href=&quot;http://fit.coollittlethings.com/?page_id=3&quot;&gt;http://fit.coollittlethings.com/?page_id=3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7.重要！请准备一张WinPE启动盘，里面要有可以激活分区的工具，比如PM7。或者可以启动并激活分区的引导盘&lt;br/&gt;
均可。否则安装后系统将无法引导。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二、安装&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.准备 Mac OSX 分区：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我实在磁盘最后预留了一个 Mac 主分区来安装 OSX 的，不过据说用TBOOT引导的话，逻辑分区也是可以滴。准备分区的过程，请参见：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://benyouhui.it168.com/thread-367135-1-2.html&quot;&gt;http://benyouhui.it168.com/thread-367135-1-2.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.安装 Mac OSX：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;用Mac安装盘启动，一路回车，不用任何参数，进入安装环境后，用磁盘工具把刚才的分区&quot;抹除&quot;掉(记得设置卷标名称，假定为OSX)，这样才能安装到那里去。另外自己选择创下组件，然后正常安装即可。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.修复 XP/Vista 引导：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;安装后，XP/Vista 主分区被设为非激活状态，不能引导系统了，此时用引导盘启动，把第一个主分区设为激活，重新启动即可。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.设置 CHAIN0 或者 TBOOT 引导：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;接上步，重新启动进入 XP 或者 Vista 后，在 XP NT Loader 或者 Vista Boot Manager 中加入引导项（以TBOOT举例，CHAIN0也一样）：&lt;/p&gt;

&lt;p&gt;1).XP：在 BOOT.INI 最后加入一行即可：&lt;/p&gt;

&lt;p&gt;C:\TBOOT=&quot;Mac OSX Leopard&quot;&lt;/p&gt;

&lt;p&gt;2)Vista：请看命令（哈哈，这么久了，我终于对BCDEdit很熟悉了）：&lt;/p&gt;

&lt;p&gt;BCDEdit /create /d &quot;Mac OSX Leopard&quot; /application bootsector&lt;br/&gt;
BCDEDIT /set {XXXX-XXXX...} device boot&lt;br/&gt;
BCDEDIT /set {XXXX-XXXX...} path \TBOOT&lt;br/&gt;
BCDEDIT /displayorder {XXXX-XXXX...} /addlast&lt;br/&gt;
BCDEDIT /timeout 5&lt;/p&gt;

&lt;p&gt;（执行第一条命令后，记下 GUID，假设为：{XXXX-XXXX...}）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.完成安装&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;启动后选择 Mac OSX，然后进入到 Mac OS X引导提示（默认5秒超时），此时必须按F8，选择OSX分区启动，否则又进入到XP中去了。这点以后每次启动 Mac OSX 都必须这样做，挺不完美的，不知道哪里可以更改Mac OSX Darwin引导的默认启动项。然后即可进入设置向导，完成后即进入到 Mac OSX 桌面。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.安装中文支持：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;点击 SimplifiedChinese.pkg 安装中文支持包，完成安装后，自动注销。然后重新进入，在系统设置中，把简体中文拖动到最上面，重新注销在登陆就是完整的中文界面了。&lt;/p&gt;

&lt;p&gt;顺便安装个好用的输入法，默认 Alt+Space 激活。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.安装显卡驱动和其他驱动&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;很简单安装玩重新启动即可。关键是有些驱动比较难找，呵呵：）&lt;/p&gt;

&lt;p&gt;A8Sc 验证成功。到此，装好了准备给MM用一下，先行体会一下 Leopard，其实很好用啦，慢慢享用吧……&lt;/p&gt;

&lt;p&gt;**三、有用的链接&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bbs.pcbeta.com/viewthread.php?tid=257912&amp;amp;page=1&amp;amp;fromuid=449332#pid5448849&quot;&gt;http://bbs.pcbeta.com/viewthread.php?tid=257912&amp;amp;page=1&amp;amp;fromuid=449332#pid5448849&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://benyouhui.it168.com/thread-663049-1-1.html&quot;&gt;http://benyouhui.it168.com/thread-663049-1-1.html&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://bbs.pcbeta.com/thread-257678-1-2.html&quot;&gt;http://bbs.pcbeta.com/thread-257678-1-2.html&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://www.weiphone.com/thread-1918-1-1.html&quot;&gt;http://www.weiphone.com/thread-1918-1-1.html&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://bbs.think-different.cn/thread-121-1-1.html?sid=JcV4ny&quot;&gt;http://bbs.think-different.cn/thread-121-1-1.html?sid=JcV4ny&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://forum.insanelymac.com/index.php?showtopic=90505&amp;amp;st=20&quot;&gt;http://forum.insanelymac.com/index.php?showtopic=90505&amp;amp;st=20&lt;/a&gt;**&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>[转载]千呼万唤始出来的 Visual C++ 2008 Feature Pack 介绍</title>
      <link href="http://example.com/introduction-of-vc2008-feature-pack/"/>
      <updated>2008-02-22T03:03:41+08:00</updated>
      <id>http://example.com/introduction-of-vc2008-feature-pack</id>
      <content type="html">&lt;p&gt;&lt;strong&gt;缘起：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;自Visual C++ 5.0 6.0 以来一直遭人诟病的是什么？ 过于简单的界面控件！&lt;br/&gt;
作为一个以Visual C++ 作为开发工具的程序员，遇到最郁闷的事情是什么？ 开发一个具有漂亮界面的程序！！&lt;br/&gt;
Visual C++ 不是真正意义上的RAD(Rapidly Application Development)工具的主要原因是什么？ 还是因为没有丰富的界面控件！！！&lt;/p&gt;

&lt;p&gt;无数的Visual C++程序员为了那几个单调、简单Visual C++的控件苦恼着；而无数的Visual C++程序员由因为这个界面问题而大发其财。BCG Library、Magic Skin 这些专门为解决程序界面问题的库顺势而生。想必绝大多数用Visual C++写成的程序在商业化之前都会经过这些界面库的修饰。使用标准的MFC，想给菜单项加个图标都得通过自己派生一个类来做的情况下，你还指望自己能包揽程序的界面开发么？说老实话，measure这个单词就是那时候记住的。(MeasureItem 和 DrawItem 这两个可重载的函数是MFC给程序员预留的扩展界面的接口。)&lt;/p&gt;

&lt;p&gt;自Visual C++ 6.0 以后，一直强调用户体验的Microsoft 也坐不住了。Visual Studio 2002 、2003的平面风格，给大家耳目一新的感觉，引领了时代潮流。而后的 Office 2003 界面一时间也是独领风骚。可是这些界面库都是MS自己留着用，从没想到拿出来。终于，终于在Visual Studio 2005 里面，.NET 程序员可以毫不费力的使用Office 2003 风格的界面控件了。TextBox控件也衍生出了很多小弟弟，限制某些字符的输入，也不用去响应TextChanged、KeyDown等事件了。但是Visual C++程序员肯定是再一次的失望了。在这几个版本的Visual Studio 中我没有看到MFC的本质的提升(添加CImage 类不能算是大幅度改进。其实对于图像操作，VC程序员们早就自力更生自己解决了。)&lt;/p&gt;

&lt;p&gt;2008年01月07日，MS总算是没有忘记这些使用Visual C++的老朋友。推出了 Visual C++ Feature Pack Beta 下载。这次的Feature Pack 是专门针对VC 库的一个扩充。扩充分为两方面，一方面是MFC 的界面控件库；另一方面是对ISO C++ Standard 2003 标准的扩充。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;部署：&lt;br/&gt;
&lt;/strong&gt;&lt;br/&gt;
部署这个东东可是有点不容易哦！部署这个东东首先需要的是耐心，其次还是耐心，最后给自己找本书看吧，不然你呆呆的盯着电脑一下午可能会疯掉。&lt;br/&gt;
首先需要到微软的&lt;a href=&quot;http://www.microsoft.com/downloads&quot;&gt;下载中心&lt;/a&gt; 下载 &lt;a href=&quot;http://www.microsoft.com/Downloads/details.aspx?familyid=D466226B-8DAB-445F-A7B4-448B326C48E7&amp;amp;displaylang=en&quot;&gt;Visual C++ Feature Pack Beta&lt;/a&gt; 下载这个303M的大家伙一定得挑个黄道吉日，沐浴净身，！@#￥%……&lt;br/&gt;
而后，你需要在机器上安装了英文版的Visual Studio 2008。别的语种Feature Pack不支持，看样子也装不上。2005？ Visual C++ 开发组的某个人在Blog上说可以(引用原文* Older versions of VC (e.g. VC8).)，可是下载中心上没这么说。自己看着办吧。 VS_Setup.exe 运行以后生成那个安装脚本的时间，相比大家心里有数吧？大家应该在安装 VS2005 的时候就领教过了。&lt;/p&gt;

&lt;p&gt;接着，接着就该安装这个Feature Pack 了吧？错！你以为安装了Visual Studio 2008 就没事儿啦？一定要完全安装才可以！完全安装VS2008哦！就连SQL Sever 2005 Express 和 水晶报表的基本组件也不能少！ 偶就是吃了这个亏，结果导致Feature Pack 安装到一半的时候出现错误回滚。错误如下：&lt;/p&gt;

&lt;p&gt;Returning IDOK. INSTALLMESSAGE_ERROR [Error [1].An installation package for the product [2] cannot be found. Try the installation again using a valid copy of the installation package &#39;[3]&#39;.: 1706Microsoft Visual Studio Team System 2008 Team Suite - ENU]&lt;br/&gt;
[1/15/2008, 7:38:27] (HotIron::CMspExternalUiHandler::UiHandler) Returning IDOK. INSTALLMESSAGE_ACTIONSTART [Action 15:38:27: Rollback. Rolling back action:]&lt;br/&gt;
[1/15/2008, 7:39:12] (HotIron::MspInstallerT &gt; &gt; &gt; &gt;::PerformMsiOperation&gt;Patch (VS90-VCFeaturePack-Beta-KB945273-x86x64-ENU.msp) install failed on product (Microsoft Visual Studio Team System 2008 Team Suite - ENU). Msi Log: &lt;a href=&quot;file:///C:/Users/Michael%20Lee.Michael-Lee/AppData/Local/Temp/Visual%20C++%202008%20Beta%20Feature%20Pack%20-%20KB945273_20080115_073311988-Msi0.txt&quot;&gt;Visual C++ 2008 Beta Feature Pack - KB945273_20080115_073311988-Msi0.txt&lt;/a&gt;&lt;br/&gt;
[1/15/2008, 7:39:12] (HotIron::MspInstallerT &gt; &gt; &gt; &gt;::PerformMsiOperation&gt;MsiApplyMultiplePatches returned 0x643&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;file:///C:/Users/Michael%20Lee.Michael-Lee/AppData/Local/Temp/Visual%20C++%202008%20Beta%20Feature%20Pack%20-%20KB945273_20080115_073311988.html#&quot;&gt;[1/15/2008, 7:39:12] Entering Function: HotIron::MspInstallerT &gt; &gt; &gt; &gt;::Rollback...&lt;br/&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;当时试了几次都这样。结果在偶彻底晕之前想起了Google，还不错，MSDN论坛上有个伙计说，VS2008必须得完全安装。My God，偶把以前没装的VC for IA64装上了，再试，失败。 我把没装的Visual Basic 装上了，再试，还是失败。直到我彻底缴枪把SQL Server 2005 Express 和水晶报表基本组件也选上了，才确保无恙。My God!，更新和拷贝几个VC文件夹下的文件干啥还要水晶报表？在这装装卸卸期间，您手上的书就派上用场了。啊？想上网？ Visual Studio 在更新、安装、卸载期间IE是不能使用的，还是看书吧。&lt;/p&gt;

&lt;p&gt;各位记住！想安装Visual C++ Feature Pack Beta 一定要完完全全的安装VS 2008，一点儿都不能少！&lt;/p&gt;

&lt;p&gt;确认之后，就可以运行Feature Pack的安装包了，请注意，如果您是Vista，千万别忘了&quot;Run as Administrator&quot;。运行后，HotfixInstaller服务将启动，并安装Feature Pack更新。安装过程顺利的话大概也要20分钟以上的时间，您还得勤盯着点儿，HotfixInstaller服务有可能没有原因的挂在那里长时间不动(不是Not Responding状态)。不用害怕，只要直接在Task Manager中结束掉进程，并重新运行安装包就可以了。(上帝保佑，阿弥陀佛@#￥%……)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;初探：&lt;br/&gt;
&lt;/strong&gt;终于搞定了，看看效果吧。唉，天色已晚，不打算自己写程序了。从下载中心找到了 &lt;a href=&quot;http://www.microsoft.com/Downloads/details.aspx?familyid=01AE159F-08CD-495B-8BF4-A48CC395AD7B&amp;amp;displaylang=en&quot;&gt;Visual C++ 2008 Sample Library&lt;/a&gt; 这个快，5M，下载，安装。&lt;/p&gt;

&lt;p&gt;在\Microsoft Visual Studio 9.0\Samples\1033 下找到AllVCLanguageSamples.zip 展开，找到Feature Pack 文件夹，打开里面的工程编译。终于看到Feature Pack 支持后界面了！下图是基于Feature Pack 库开发的仿Outlook界面：&lt;br/&gt;
&lt;img src=&quot;http://www.cnblogs.com/images/cnblogs_com/michaellee/OutlookDemo2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;漂亮吧？ 这可不是用非微软提供的函数库实现的哦！在Feature Pack例子里面有一个叫做New Control的工程。编译后，您可以看到所有Feature Pack已经实现好的界面控件。&lt;/p&gt;

&lt;p&gt;先是按钮控件组：&lt;br/&gt;
&lt;img src=&quot;http://www.cnblogs.com/images/cnblogs_com/michaellee/NewControl_Buttons.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;类型非常丰富，比CButtonST毫不逊色，赞一个！&lt;br/&gt;
接着是颜色选&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>[转载]M8最新消息：外观/配置/功能</title>
      <link href="http://example.com/m8-appearance-and-configuration/"/>
      <updated>2008-02-20T18:46:39+08:00</updated>
      <id>http://example.com/m8-appearance-and-configuration</id>
      <content type="html">&lt;p&gt;以前是用不锈钢边&lt;/p&gt;

&lt;p&gt;现在用铝合金边，铝合金边可以做成灰色，银色，黑色等等&lt;/p&gt;

&lt;p&gt;先上灰色边加黑色外壳，其他颜色以后再说&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.meizu.com/bbs/UploadFile/2007-10/2007101919335192058.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;M8音乐界面&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.meizu.com/bbs/UploadFile/2007-10/20071019027318178.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;http://www.meizu.com/bbs/UploadFile/2007-10/20071019027388354.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;http://www.meizu.com/bbs/UploadFile/2007-10/20071019027325635.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.meizu.com/bbs/UploadFile/2007-10/200710190274277344.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;http://www.meizu.com/bbs/UploadFile/2007-10/200710190274269887.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;http://www.meizu.com/bbs/UploadFile/2007-10/200710190274250063.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.meizu.com/bbs/UploadFile/2007-10/200710190274225670.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;http://www.meizu.com/bbs/UploadFile/2007-10/20071019027333923.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;http://www.meizu.com/bbs/UploadFile/2007-10/20071019027480767.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;M8电话界面&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.meizu.com/bbs/UploadFile/2007-10/200710190251316195.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;http://www.meizu.com/bbs/UploadFile/2007-10/200710190251323652.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.meizu.com/bbs/UploadFile/2007-10/200710190251354260.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;http://www.meizu.com/bbs/UploadFile/2007-10/200710190251386371.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;M8短信界面&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.meizu.com/bbs/UploadFile/2007-10/200710190232657375.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;http://www.meizu.com/bbs/UploadFile/2007-10/200710190212891937.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;http://www.meizu.com/bbs/UploadFile/2007-10/200710190212884479.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.meizu.com/bbs/UploadFile/2007-10/200710190212823556.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;http://www.meizu.com/bbs/UploadFile/2007-10/200710190221672061.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;http://www.meizu.com/bbs/UploadFile/2007-10/200710190221680354.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.meizu.com/bbs/UploadFile/2007-10/200710190212894694.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;http://www.meizu.com/bbs/UploadFile/2007-10/200710190212840262.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;http://www.meizu.com/bbs/UploadFile/2007-10/200710190221664604.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;横向的软键盘是按照标准qwerty排列的,竖向我们把第一排的iop和第二牌的kl另外放一行,并命名为iop键盘,同时这样的排列我们注册了专利,iop键盘的好处就是每个按键比qwerty大了很多,并且把人们使用qwerty键盘的习惯影响到最小.&lt;/p&gt;

&lt;p&gt;屏幕锁定的状态界面：&lt;/p&gt;

&lt;p&gt;点按钮并滑动到半透明区外开锁或直接打开拨号/短信/音乐功能。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.meizu.com/bbs/UploadFile/2007-11/2007112820595745370.jpg&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;http://www.meizu.com/bbs/UploadFile/2007-11/2007112910533864081.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;待机和桌面的背景可自定义，另外可以将程序里面的图标设置到桌面，也可以将桌面的图标设置拖回程序文件夹里面。&lt;/p&gt;

&lt;p&gt;桌面图标也可以自定义,用户可以换自己更喜欢的图标上去。&lt;/p&gt;

&lt;p&gt;外形尺寸:&lt;/p&gt;

&lt;p&gt;59&lt;em&gt;107&lt;/em&gt;11.9mm&lt;/p&gt;

&lt;p&gt;配置：&lt;/p&gt;

&lt;p&gt;CPU：ARM11 667MHZ+视频解码/编码器 video CODEC&lt;/p&gt;

&lt;p&gt;内存：内置128MB DDR SDRAM缓存&lt;/p&gt;

&lt;p&gt;制式：GSM+EDGE(2.75G )&lt;/p&gt;

&lt;p&gt;操作系统：基于WIN CE6.0内核,MEIZU 自主开发的OS&lt;/p&gt;

&lt;p&gt;屏幕：3.4英寸 TFT VGA+（720*480）1600万色 触摸屏 全视角&lt;/p&gt;

&lt;p&gt;摄像头：300W像素（自动对焦，无闪光灯）&lt;/p&gt;

&lt;p&gt;电池：1400mAH左右&lt;/p&gt;

&lt;p&gt;其他：WIFI，蓝牙2.0,TV OUT\LINE OUT,USB HOST/OTG&lt;/p&gt;

&lt;p&gt;功能：基本通讯功能、音频文件播放、视频文件播放（720*480 30桢/S H263/264 MPEG2 MPEG4 WMV等主流视频格式，包括rm，rmvb）、30桢/S的视频录制、WIFI无线上网、光控（根据光线强弱自动调节屏幕亮度），方向及加速感应器（能感应手持状态自动调节屏幕显示方向)&lt;/p&gt;

&lt;p&gt;估计价格: 4GB/8GB/16GB 1990/2390/2990元&lt;/p&gt;

&lt;p&gt;转自：&lt;a href=&quot;http://www.meizu.com/bbs/dispbbs.asp?boardID=22&amp;amp;ID=505281&amp;amp;page=1&quot;&gt;http://www.meizu.com/bbs/dispbbs.asp?boardID=22&amp;amp;ID=505281&amp;amp;page=1&lt;/a&gt;&lt;br/&gt;
评论：优点，俩字&quot;厚道&quot;（价格厚道、功能厚道）；缺点，仨字&quot;不厚道&quot;（设计概念抄袭不太厚道，可接受；N早就在炒作，不太厚道，可理解）。&lt;/p&gt;

&lt;p&gt;欢迎点评：）&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>败入一个ASUS P527</title>
      <link href="http://example.com/buy-an-asus-p527/"/>
      <updated>2008-01-23T01:25:52+08:00</updated>
      <id>http://example.com/buy-an-asus-p527</id>
      <content type="html">&lt;p&gt;买了个新上市不久的 ASUS P527，总的来说还行，但不超频速度比较慢，暂时还是繁体中文的ROM，用起来不太习惯。&lt;/p&gt;

&lt;p&gt;感谢老猫（&lt;a href=&quot;http://www.pdaclan.com/&quot;&gt;www.pdaclan.com&lt;/a&gt;）和TNG（淘宝网店&lt;!-- more --&gt;：&lt;a href=&quot;http://store.taobao.com/shop/view_shop.htm?user_id=764c31f50fbd4014b8298b76bdfc1d2f&quot;&gt;http://store.taobao.com/shop/view_shop.htm?user_id=764c31f50fbd4014b8298b76bdfc1d2f&lt;/a&gt;）。TNG是值得信任的卖家，如果大家有需要可以在他这里购买智能手机和相关物品（不算是广告：）。&lt;/p&gt;

&lt;p&gt;过段时间空闲且可行的话将会尝试 P527 的ROM，一定会是最好用的一个：）&lt;/p&gt;

&lt;p&gt;不再更新 830 的ROM了，2007.10.28 将是最后一个 WM5 ROM，抱歉一直没有出新的 WM6 ROM，确实是个人空闲时间和精力有限。&lt;/p&gt;

&lt;p&gt;2008.1.25 加注：目前强烈不推荐大家购买 ASUS P527，及其不稳定，各方面都有很多BUG，WIFI、GPS、电话功能等等都有很多不稳定的地方，过段时间再看。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>长途奔袭，千里归家</title>
      <link href="http://example.com/long-distance-driving/"/>
      <updated>2008-01-02T14:38:16+08:00</updated>
      <id>http://example.com/long-distance-driving</id>
      <content type="html">&lt;p&gt;昨天从杭州回老家&lt;!-- more --&gt;赣州定南（江西最南边的一个县），距离杭州1050公里，全程高速。第一次开车走这么远，很多老司机都说新手不要走这么久的长途，于是我决定如果累了就在中途南昌睡一晚第二天再走。总的下来感觉还行，还是年轻有体力，中途休息站多次休息，基本上没有什么疲劳感，总共耗时12个小时整，行程1060公里，路费120+300=420，油费400元左右应该能走下来（我的小毛驴高尔1.6，油有剩余，估计不完全准确）。这几天比较忙，6号回杭州后再整理一下此次来回行程的总结……待续——感谢“美帝”的GPS，还是特别非常以及很有用的……&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>[调查]你的手机是什么系统，在 CeleDial 吗?</title>
      <link href="http://example.com/investigation-for-celedial/"/>
      <updated>2007-11-02T17:10:52+08:00</updated>
      <id>http://example.com/investigation-for-celedial</id>
      <content type="html">&lt;p&gt;调查已结束，下面是结果：&lt;/p&gt;

&lt;p&gt;■ WM6PPC，使用 CeleDial: 175&lt;br/&gt;
■ WM6PPC，不用 CeleDial: 72&lt;br/&gt;
■ WM5PPC，使用 CeleDial: 146&lt;br/&gt;
■ WM5PPC，不用 CeleDial: 69&lt;br/&gt;
■ PPC2003，使用 CeleDial: 73&lt;br/&gt;
■ PPC2003，不用 CeleDial: 49&lt;br/&gt;
■ 我是 Smartphone 用户: 109&lt;br/&gt;
■ 我不是 WinMobile 用户: 52&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;客观说，WM 5.0 PPC/PPC 2003 中文用户，强烈推荐使用 CeleDial，必备杀手应用程序：）&lt;br/&gt;
客观说，WM6.0 PPC 请自行决定。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>CeleTask 2.2.2500 - Smartphone日常必备任务管理工具</title>
      <link href="http://example.com/celetask/"/>
      <updated>2007-10-24T16:41:49+08:00</updated>
      <id>http://example.com/celetask</id>
      <content type="html">&lt;p&gt;本程序适用于 Windows Mobile Smartphone/PocketPC 2003/5.0/6.0。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/CeleTask.gif&quot;&gt;&lt;img src=&quot;/assets/CeleTask.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最新更新：&lt;br/&gt;
1.完全解决列出任务假死的问题。&lt;br/&gt;
2.完全解决进程无法列出的问题。&lt;br/&gt;
3.修正一个 BUG：显示序号勾选无法取消。&lt;!-- more --&gt;&lt;br/&gt;
4.增加一个Trick（不是针对普通用户，请忽略），可以在启动CT后检测长按事件，从而启动另外的程序。如果需要，在CT 注册表中增加以下键值：&lt;br/&gt;
 HoldKey=按键代码（默认0xC3，即830机器的相机键）&lt;br/&gt;
 HoldRun=要启动的程序（默认Camera.exe，即相机程序）&lt;br/&gt;
 通过这个小功能可以在设定某个按键关联启动 CeleTask 的时候，短按启动CT，长按则启动另外的程序。&lt;/p&gt;

&lt;p&gt;另外，旋转屏幕功能仅针对 PPC 有效。蓝牙音频仅针对部分设备有效。&lt;/p&gt;

&lt;p&gt;这是 CeleTask 2.2 的最后一个版本，近期会升级到 CeleTask 2.4，请关注 WWW.Yonsm.NET 获取最新信息。&lt;/p&gt;

&lt;p&gt;此此次更新暂时只提供中文版，繁体中文用户如果需要请留言。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/CeleTask.2.2.rar&quot;&gt;下载&lt;/a&gt;（2007.10.27 更新）
&lt;a href=&quot;/assets/CeleTask.htm&quot;&gt;使用说明&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;IOICN 讨论贴：http://www.ioicn.com.cn/forum/thread-238302-1-1.html&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>枚举窗口假死和枚举进程失败的解决方案</title>
      <link href="http://example.com/solution-for-enumeration-windows/"/>
      <updated>2007-10-24T12:05:28+08:00</updated>
      <id>http://example.com/solution-for-enumeration-windows</id>
      <content type="html">&lt;p&gt;CeleTask 枚举任务窗口时，如果其他程序停止响应，可能会出现假死状态。枚举进程的部分如果内存过少（或者某些程序开着），会出现无法成功的情况。今天经过仔细分析，终于找到了终极解决方案。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;枚举窗口没有问题，问题出在获取窗口标题上，WM_GETTEXT/GetWindowText 均会造成程序等待，如果其他进程窗口假死，则CeleTask也等着。解决方法是使用以下方法获取标题，经试验完美解决：&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;SendMessageTimeout(hWnd, WM_GETTEXT, MAX_NAME, (LPARAM) &amp;tzStr;, 0, 100, &amp;dwRet;);&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;进程枚举失败的部分，经过反汇编分析 SKTools 的代码，发现一个 Undocumented 的 Flag: 0x40000000，把这个 标记设置在 CreateToolhelpSnapshot 上，就可以了。经查确认，此标志无文档支持，但经测试以完美解决。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;市面上所有的窗口枚举和进程枚举软件均存在此问题（SKTools的进程功能除外），包括QuickMenu等。现已解决，分享在此。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;基于以上结论， CeleTask 将在近期更新版本 2.4 ，除了解决上述问题，还将加入其他功能（导入注册表文件等）。Smartphone 用户可留意本 BLOG 的更新信息。&lt;/p&gt;

&lt;p&gt;2007.10.27 更新：声明如下未公开的函数，代替GetWindowText使用，效果最佳，无阻赛问题，速度快，P/PPC 2003/5.0/6.0 均适用：&lt;/p&gt;

&lt;p&gt;extern &quot;C&quot; INT WINAPI GetWindowTextWDirect(HWND hWnd, PWSTR pwzStr, INT nMaxCount);&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>CeleWhere - 最精巧快速的来电号码归属查询工具</title>
      <link href="http://example.com/celewhere/"/>
      <updated>2007-10-22T07:34:11+08:00</updated>
      <id>http://example.com/celewhere</id>
      <content type="html">&lt;p&gt;CeleWare 1.0.70&lt;/p&gt;

&lt;p&gt;一、简介&lt;/p&gt;

&lt;p&gt;CeleWhere 是一个简单、快速、高效的电话号码归属地查询工具，它可以运行在 Windows Mobile 2003/5.0/6.0 PocketPC/Smartphone 中（2003 中有部分功能限制）。&lt;/p&gt;

&lt;p&gt;二、特性&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;您可以通过 CeleWhere 快速地找到电话或手机号码的归属地和类型信息，并且可以自己添加或导入数据条目（每行中分别是号码、归属、类型数据，用制表符分隔）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果设置为“来电时显示”归属地信息，系统在接收到来电时，会自动加载 CeleWhere（平时 CeleWhere 无需运行，不占用任何内存），并在系统的来电消息框中加入来电号码的归属地信息。（PPC/SP 2003 中暂时不支持此功能）&lt;!-- more --&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;目前 CeleWhere 已经内置超过 12 万条数据，采用高效快速的存储和搜索算法，来电时无需载入所有的归属数据即可快速地找到匹配的联系人。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持自定义号码模板功能，只有匹配的电话号码部分才会被自动识别。执行 菜单-&gt;号码模板 可显示或编辑，如果要保存，请在此执行 菜单-&gt;号码模板。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;三、致谢&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;感谢 nanling 兄分享的 QCellCore 归属数据和对我的多次帮助。&lt;/li&gt;
&lt;li&gt;感谢 MrPotter 的 CallerLoc，CeleWhere 借鉴了这个非常有新意的来电显示模式（无需常驻内存）。&lt;/li&gt;
&lt;li&gt;感谢 Kavana 的热心支持，CeleWhere 的图标是他一手操刀的。&lt;/li&gt;
&lt;li&gt;感谢所有的用户，如果有问题或建议，欢迎到反馈到 WWW.Yonsm.NET。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;四、后话&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;和 CeleDial 一样，CeleWhere 是计划中 CeleFone Suite 的一部分。后续的版本中可能会支持通话记录和短信列表中显示归属地址、去电归属显示、通话接通提醒等功能，也会加入对 2003 系统的支持。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;相应地，PC 中有个叫 CodeArea 的小工具，和 CeleWhere 有类似的功能。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CeleWhere 是一个免费软件，你可以无偿地使用它。请自行承担使用该软件带来的任何后果。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Powered Yonsm&lt;br/&gt;
Yonsm@163.com&lt;br/&gt;
WWW.Yonsm.NET&lt;br/&gt;
2007.10.23 深夜&lt;br/&gt;
版权所有 (C) Yonsm.NET，保留所有权利。&lt;/p&gt;

&lt;p&gt;2007.10.23 更新为 1.0.70&lt;br/&gt;
1. 支持号码模板自定义功能。&lt;br/&gt;
2. 支持标题栏显示来电信息。&lt;br/&gt;
3. 支持显示来电号码类型。&lt;/p&gt;

&lt;p&gt;程序只有 36 KB，这是你能找到的最精巧好用的来电号码归属地查询工具。&lt;/p&gt;

&lt;p&gt;上图：&lt;br/&gt;
&lt;a href=&quot;/assets/CeleWhere.png&quot;&gt;&lt;img src=&quot;/assets/CeleWhere.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载 CeleWhere（1.0.70）&lt;br/&gt;
&lt;a href=&quot;/assets/CeleWhere.zip&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;/assets/CodeArea.png&quot;&gt;&lt;img src=&quot;/assets/CodeArea.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载 CodeArea（PC 上的来电归属查询工具）&lt;br/&gt;
&lt;a href=&quot;/assets/CodeArea.zip&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Thunk  Window Class Demo</title>
      <link href="http://example.com/window-thunk/"/>
      <updated>2007-09-11T15:41:23+08:00</updated>
      <id>http://example.com/window-thunk</id>
      <content type="html">&lt;p&gt;Generates __thiscall thunk to convert static funtion to member function.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/p&gt;

&lt;h1&gt;include&lt;/h1&gt;

&lt;h1&gt;if defined(_M_IX86)&lt;/h1&gt;

&lt;p&gt;template  class CThunk&lt;br/&gt;
{&lt;br/&gt;
private:&lt;/p&gt;

&lt;h1&gt;pragma pack(push, 1)&lt;/h1&gt;

&lt;p&gt;   BYTE m_bPopEcx; // POP EAX&lt;br/&gt;
   BYTE m_bPush;   // PUSH pThis&lt;br/&gt;
   PVOID m_pThis;  // &lt;br/&gt;
   BYTE m_bPushEcx;// PUSH EAX&lt;/p&gt;

&lt;p&gt;   //BYTE m_bJmp;  // JMP pProc&lt;br/&gt;
   //INT m_iOffset;&lt;/p&gt;

&lt;p&gt;   BYTE m_bMovEax; // MOV EAX, tProc&lt;br/&gt;
   T m_tProc;&lt;br/&gt;
   WORD m_wJmpEax; // JMP EAX&lt;/p&gt;

&lt;h1&gt;pragma pack(pop)&lt;/h1&gt;

&lt;p&gt;public:&lt;br/&gt;
   PROC Init(PVOID pThis, T tProc)&lt;br/&gt;
   {&lt;br/&gt;
       m_bPopEcx = 0x58;&lt;br/&gt;
       m_bPush = 0x68;&lt;br/&gt;
       m_pThis = pThis;&lt;br/&gt;
       m_bPushEcx = 0x50;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   //m_bJmp = 0xE9;  
   //m_iOffset = (INT) ((INT_PTR) pProc - ((INT_PTR) &amp;amp;m;_iOffset + sizeof(m_iOffset)));  

   m_bMovEax = 0xB8;  
   m_tProc = tProc;  
   m_wJmpEax = 0xE0FF;  

   return (PROC) this;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;   }&lt;br/&gt;
};&lt;/p&gt;

&lt;h1&gt;else&lt;/h1&gt;

&lt;h1&gt;error CThunk does not support this platform!&lt;/h1&gt;

&lt;h1&gt;endif&lt;/h1&gt;

&lt;p&gt;class CMyWnd&lt;br/&gt;
{&lt;br/&gt;
public:&lt;br/&gt;
   HWND m_hWnd;&lt;/p&gt;

&lt;p&gt;   typedef LRESULT (CALLBACK CMyWnd::*PWNDPROC)(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);&lt;br/&gt;
   CThunk m_tProc;&lt;/p&gt;

&lt;p&gt;public:&lt;br/&gt;
   CMyWnd()&lt;br/&gt;
   {&lt;br/&gt;
       WNDCLASSEX wceClass = {0};&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   // Generate thunk data/code  
   wceClass.lpfnWndProc = (WNDPROC) m_tProc.Init(this, &amp;amp;CMyWnd;::WindowProc);  

   wceClass.cbSize = sizeof(WNDCLASSEX);  
   wceClass.style = CS_VREDRAW | CS_HREDRAW;  
   wceClass.hInstance = GetModuleHandle(NULL);  
   wceClass.hIcon = LoadIcon(NULL, MAKEINTRESOURCE(IDI_APPLICATION));  
   wceClass.hCursor = LoadCursor(NULL, IDC_ARROW);  
   wceClass.hbrBackground = (HBRUSH) COLOR_BTNSHADOW;  
   wceClass.lpszClassName = TEXT(&quot;ThThunk&quot;);  
   wceClass.hIconSm = NULL;  
   RegisterClassEx(&amp;amp;wceClass;);  

   CreateWindowEx(WS_EX_ACCEPTFILES | WS_EX_APPWINDOW, TEXT(&quot;ThThunk&quot;), TEXT(&quot;ThThunk&quot;), WS_OVERLAPPEDWINDOW,  
       CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, NULL, NULL, GetModuleHandle(NULL), 0);  

   ShowWindow(m_hWnd, SW_SHOW);  
   UpdateWindow(m_hWnd);  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;   }&lt;/p&gt;

&lt;p&gt;   LRESULT CALLBACK WindowProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)&lt;br/&gt;
   {&lt;br/&gt;
       switch (uMsg)&lt;br/&gt;
       {&lt;br/&gt;
       case WM_NCCREATE:&lt;br/&gt;
           m_hWnd = hWnd;&lt;br/&gt;
           break;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   case WM_LBUTTONDOWN:  
       {  
           TCHAR tzText[MAX_PATH];  
           GetWindowText(m_hWnd, tzText, MAX_PATH);  
           MessageBox(hWnd, tzText, tzText, MB_ICONINFORMATION);  
       }  
       break;  

   case WM_DESTROY:  
       PostQuitMessage(0);  
       break;  

   default:  
       break;  
   }  
   return DefWindowProc(hWnd, uMsg, wParam, lParam);  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;   }&lt;br/&gt;
};&lt;/p&gt;

&lt;p&gt;INT APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)&lt;br/&gt;
{&lt;br/&gt;
   CMyWnd w;&lt;/p&gt;

&lt;p&gt;   MSG msg;&lt;br/&gt;
   while (GetMessage(&amp;msg;, NULL, 0, 0))&lt;br/&gt;
   {&lt;br/&gt;
       TranslateMessage(&amp;msg;);&lt;br/&gt;
       DispatchMessage(&amp;msg;);&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   return 0;&lt;br/&gt;
}&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>CeleASM - ARM 汇编助理，查询ARM指令的好帮手</title>
      <link href="http://example.com/celeasm/"/>
      <updated>2007-09-08T16:45:39+08:00</updated>
      <id>http://example.com/celeasm</id>
      <content type="html">&lt;p&gt;看图，仅用于某些特殊用户计算 ARM 汇编指令的目标代码值。&lt;br/&gt;
&lt;a href=&quot;/assets/CeleASM.png&quot;&gt;&lt;img src=&quot;/assets/CeleASM.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;
&lt;a href=&quot;/assets/CeleASM.rar&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;盗用了 CNBeta 的一个漂亮图标，如有异议，请联系 Yonsm@msn.com。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>SortReg - 排序注册表脚本的小工具</title>
      <link href="http://example.com/sortreg/"/>
      <updated>2007-09-04T17:08:26+08:00</updated>
      <id>http://example.com/sortreg</id>
      <content type="html">&lt;p&gt;排序后的注册表可以方便地用各种文本比较工具（强烈推荐BeyondCompare）快速比较，当然也可以用 RegistryWorkshop 来打开（未排序的注册表文件，Registry Workshop 将会处理出错）。&lt;/p&gt;

&lt;p&gt;希望 RegistryWorkshop 能加入注册表脚本自动排序载入功能，如果需要可以Publish源代码——虽然理论简单，但实现应麻烦的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/SortReg.png&quot; alt=&quot; &quot; /&gt;&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;a href=&quot;/assets/SortReg.rar&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>修改 CorePlayer 配置保存路径</title>
      <link href="http://example.com/analysis-for-coreplayer/"/>
      <updated>2007-09-03T13:51:29+08:00</updated>
      <id>http://example.com/analysis-for-coreplayer</id>
      <content type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;首先 UPX Unpack Coplayer 的主程序。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用 IDA 反汇编。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;首先 Application Data 是 CLSID_APPDATA 目录 ID，一般是 ShGetSpecialLocationPath 获取的。首先看有没有导入这个函数，看 Import View，没有，失望。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;还是按上一步的思路，查 SDK 知道 CLSID_APPDATA 这个值是 0x10。在 IDA 中查找这个立即数。定位到：&lt;!-- more --&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;.text:00053750                 MOV     R2, #0x1A&lt;/p&gt;

&lt;p&gt;  可以知道 CorePlayer 配置文件目录就是在这附近得到和创建的。另外，可以通过 CreateDirectory 来定位关键代码的位置，根据 Import 找到这里：&lt;/p&gt;

&lt;p&gt;.text:00053748                 MOV     R4, R3&lt;br/&gt;
.text:0005374C                 MOV     R3, #1&lt;br/&gt;
.text:00053750                 MOV     R2, #0x1A 》》看这里，立即数&lt;/p&gt;

&lt;p&gt;……&lt;/p&gt;

&lt;p&gt;.text:00053768 loc_53768                               ; CODE XREF: sub_536F8+4C j&lt;br/&gt;
.text:00053768                 CMP     R2, #0  》》比较是有 Application Data 目录&lt;br/&gt;
.text:0005376C                 BNE     loc_537B4  》》根据后面的分析，这里是关键转跳！！&lt;br/&gt;
.text:0005376C&lt;br/&gt;
.text:00053770 ; ---------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;……&lt;/p&gt;

&lt;p&gt;.text:00053780&lt;br/&gt;
.text:00053784                 MOV     R1, #0          ; lpSecurityAttributes&lt;br/&gt;
.text:00053788                 ADD     R0, SP, #4      ; lpPathName&lt;br/&gt;
.text:0005378C                 BL      CreateDirectoryW  》》有 Application Data 目录则创建它下面的 CorePlayer 子目录&lt;/p&gt;

&lt;p&gt;……&lt;/p&gt;

&lt;p&gt;.text:000537B0                 LDMFD   SP!, {R4-R8,PC}&lt;br/&gt;
.text:000537B0&lt;br/&gt;
.text:000537B4 ; ---------------------------------------------------------------------------&lt;br/&gt;
.text:000537B4&lt;br/&gt;
.text:000537B4 loc_537B4                               ; CODE XREF: sub_536F8+74 j  》》没有 Application Data 目录则转跳到这里&lt;br/&gt;
.text:000537B4                 MOV     R0, #0&lt;br/&gt;
.text:000537B8                 BL      sub_140C0&lt;br/&gt;
.text:000537B8&lt;br/&gt;
.text:000537BC                 MOV     R2, R6          ; nSize&lt;br/&gt;
.text:000537C0                 MOV     R1, R5          ; lpFilename&lt;br/&gt;
.text:000537C4                 BL      GetModuleFileNameW  》》一看，哈哈，没有 Application Data 则使用 EXE 文件所在的目录，所以，只要把上面的判断强行的转跳强行到这里就 OK 了&lt;/p&gt;

&lt;p&gt;……&lt;/p&gt;

&lt;p&gt;.text:000537F8                 LDMFD   SP!, {R4-R8,PC}&lt;br/&gt;
.text:000537F8&lt;br/&gt;
.text:000537F8 ; End of function sub_536F8&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;根据上面的分析，只要把 .text:0005376C                 BNE     loc_537B4 改成 B     loc_537B4 就好&lt;br/&gt;
了&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;转到 HEX View 把 上面指令附近的 Hex 值复制，用 UltraEdit 打开 EXE，查找这 HEX，定位到这里。吧指令改一下就 OK 了。顺便说一句，B 转调的指令操作码是 0xEA，也就是说：&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;结论：&lt;/p&gt;

&lt;p&gt;搜索：04 F0 A0 E1 B4 20 DD E1  00 00 52 E3 10 00 00 0A&lt;br/&gt;
改成：04 F0 A0 E1 B4 20 DD E1  00 00 52 E3 10 00 00 EA&lt;/p&gt;

&lt;p&gt;改一个字节即可。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>[转载]用 CuteFoto 批量扫描证件照</title>
      <link href="http://example.com/san-with-cutefoto/"/>
      <updated>2007-09-02T14:52:15+08:00</updated>
      <id>http://example.com/san-with-cutefoto</id>
      <content type="html">&lt;p&gt;发现一个比较详细的 CuteFoto 批量扫描一寸照片的应用教程，转载在此。&lt;/p&gt;

&lt;p&gt;原文：&lt;a href=&quot;http://amd-am2.blog.sohu.com/61106454.html&quot;&gt;http://amd-am2.blog.sohu.com/61106454.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;文中提到的 CuteFoto 在此&lt;a href=&quot;/cutefoto&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>[调查]你认为Windows Mobile手机的易用性如何？</title>
      <link href="http://example.com/usability-of-windows-mobile/"/>
      <updated>2007-08-26T03:15:05+08:00</updated>
      <id>http://example.com/usability-of-windows-mobile</id>
      <content type="html">&lt;p&gt;调查已结束，下面是结果。&lt;/p&gt;

&lt;p&gt;■ 太难用了: 74&lt;br/&gt;
■ 非常人性化，易用: 64&lt;br/&gt;
■ 功能非常强大，好用: 220&lt;br/&gt;
■ 一般般，没啥特别感觉: 80&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;
由于访问本网站的受众具有针对性和倾向行，以及话题涉及的科学性有待质疑，所以本调查结果的信心指数仅为60%。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>CeleCmd 1.2.360 代码</title>
      <link href="http://example.com/celecmd-code/"/>
      <updated>2007-08-05T15:31:35+08:00</updated>
      <id>http://example.com/celecmd-code</id>
      <content type="html">&lt;p&gt;应该可以说非常精妙与高效，有兴趣不妨一观。其中有不少与Windows PC通用的代码，比如 Import 注册表脚本 Reg 文件的代码和利用ZLib解压缩Tar GZ压缩包的代码，实用性和适应性都非常好，写得也很简洁高效。&lt;/p&gt;

&lt;p&gt;有关 CeleCommand 请参考另外的帖子。&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;请勿将代码应用于商业用途。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/1221149178_8271361d.zip&quot;&gt;CeleCmd.1.2.360.zip&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>REBOOT Reload - 可安装在优盘的 Windows 和 DOS 启动盘</title>
      <link href="http://example.com/reboot/"/>
      <updated>2007-08-04T13:48:21+08:00</updated>
      <id>http://example.com/reboot</id>
      <content type="html">&lt;p&gt;欢迎使用功能强大的 REBOOT （Rescue Environment Boot Disk） 系统应急启动盘！&lt;/p&gt;

&lt;p&gt;一、简介&lt;/p&gt;

&lt;p&gt;REBOOT 包含 RWIN 和 RDOS 两部分，分别是基于 Windows XP Professional SP2 和 MS-DOS 7.1 而制作的。&lt;/p&gt;

&lt;p&gt;RWIN 是基于 Windows XP Professional SP2 的定制独立启动环境，能在绝大部分电脑中不依赖任何硬盘文件而引导进入 Windows XP Professional 操作界面。&lt;/p&gt;

&lt;p&gt;   ◎ 不依赖任何硬盘文件，独立启动。&lt;br/&gt;
   ◎ 支持绝大部分类型的硬盘和 USB 存储设备。&lt;br/&gt;
   ◎ 内置网络功能，并带有 PPPoE 宽带连接支持。&lt;br/&gt;
   ◎ 内置绿色系统维护工具，功能强大，定制方便。&lt;br/&gt;
   ◎ 支持安装到各种启动媒介，包括各种硬盘、光盘和优盘。&lt;br/&gt;
   ◎ 基于 Windows XP Professional SP2 制作，支持 Windows Vista 安装。&lt;br/&gt;
   ◎ 内置常用系统工具，且整理的井井有条。可直接运行，无须自解压到临时文件夹。&lt;br/&gt;
   ◎ 启动速度飞快，登录后非常快速就能进入桌面（且启动画面的显示方式很漂漂哦）。&lt;br/&gt;
   ◎ 内置大多数网卡驱动 CAB 包（包括最新的 Realtek 8111 和 Intel Pro1000 等），且启动时智能释放所需的驱动，然后自动删除 CAB 包，提供更多的可写空间。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;RDOS 是基于 MS-DOS 7.1 的超强启动盘，支持以下几种启动选择：&lt;/p&gt;

&lt;p&gt;   ◎ 干净引导：不加载任驱动和程序程序&lt;br/&gt;
   ◎ 正常引导：加载常规驱动和应用程序&lt;br/&gt;
   ◎ 光驱支持：加载光驱设备驱动程序&lt;br/&gt;
   ◎ 优盘支持：加载优盘设备驱动程序&lt;br/&gt;
   ◎ 网络支持：加载 GHOST 网络驱动程序&lt;br/&gt;
   ◎ 网络客户：加载 MICROSOFT 网络客户端程序&lt;br/&gt;
   ◎ 备份系统：备份第一个分区到第三个分区的 GHOST\SYSTEM.GHO&lt;br/&gt;
   ◎ 恢复系统：恢复第三个分区的 \GHOST\SYSTEM.GHO 到第一个分区&lt;/p&gt;

&lt;p&gt;下面是可用的命令列表&lt;/p&gt;

&lt;p&gt;ATTRIB    添加或删除文件属性&lt;br/&gt;
CHOICE    批处理选择命令&lt;br/&gt;
COMMAND   命令行解释程序&lt;br/&gt;
DEBUG     调试实用程序&lt;br/&gt;
DELTREE   删除目录和文件&lt;br/&gt;
DEVICE    设备驱动程序加载工具&lt;br/&gt;
DISKGEN   中文磁盘分区管理工具&lt;br/&gt;
DOSKEY    键盘输入宏工具&lt;br/&gt;
DOSLFN    长文件名支持&lt;br/&gt;
EDIT      文本编辑器&lt;br/&gt;
FDISK     磁盘分区工具&lt;br/&gt;
FORMAT    磁盘格式化工具&lt;br/&gt;
GHOST     磁盘备份和恢复工具&lt;br/&gt;
MEM       内存信息查看&lt;br/&gt;
MEMTEST   内存测试工具，必须使用干净引导模式，否则无法正常检测&lt;br/&gt;
MORE      分屏显示&lt;br/&gt;
MOUSE     鼠标驱动&lt;br/&gt;
NTFSDOS   完全读写 NTFS 分区的工具&lt;br/&gt;
NTPASS    支持 FAT/NTFS 分区的密码重置工具&lt;br/&gt;
PQMAGIC   磁盘无损分区工具&lt;br/&gt;
RESTART   重新启动&lt;br/&gt;
SHSUCDHD  虚拟光驱&lt;br/&gt;
SHSUCDX   小巧实用的光驱扩展驱动程序&lt;br/&gt;
SMARTDRV  磁盘高速缓冲程序&lt;br/&gt;
SYS       传输系统文件，将磁盘制成启动盘&lt;br/&gt;
TWAY      天汇汉字系统&lt;br/&gt;
TWKEY     天汇拼音输入法&lt;br/&gt;
UNZIP     解压工具，支持长文件名&lt;br/&gt;
XCOPY     文件和目录复制工具&lt;br/&gt;
XMSDSK    虚拟内存盘工具&lt;/p&gt;

&lt;p&gt;二、安装&lt;/p&gt;

&lt;p&gt;◎ 安装到软盘&lt;/p&gt;

&lt;p&gt;由于软盘空间有限，仅支持将 RDOS 的部分功能安装到软盘：用 WinImage 将 RDOS.IMG 中的 GHOSTE、PQMAGIC 和 NET 功能剔除，更该磁盘格式为 1.44M 或 2.88M 软盘，再写入到软盘中即可。&lt;/p&gt;

&lt;p&gt;◎ 安装到光盘&lt;/p&gt;

&lt;p&gt;REBOOT 就是以光盘 ISO 形式提供的，只要直接把 REBOOT.ISO 刻录到光盘既可。&lt;/p&gt;

&lt;p&gt;特别注意，不能使用 UltraISO 编辑 REBOOT.ISO。如果要在关盘中加入其它文件，请把 REBOOT.ISO 解压缩到 REBOOT 目录中，然后添加或删除该目录中的文件或目录，最后双击 SETUP\RESIO.BAT，会自动重新生成 REBOOT.ISO。&lt;/p&gt;

&lt;p&gt;◎ 安装到硬盘&lt;/p&gt;

&lt;p&gt;这里仅说明如何把 RWIN 和 RDOS 安装到具有 NT Loader 的硬盘（即安装到 BOOT.INI 中），有两种方式：&lt;/p&gt;

&lt;p&gt; ▲ RAMDISK 方式：把 RWIN.IMG、RWIN.LDR、RWIN.COM、RWIN.SIF、RDOS.IMG、GRLDR 六个文件复制到根目录；在 BOOT.INI 中添加一行“C:\GRLDR=&quot;Rescue Environment Boot&quot;”即可。&lt;/p&gt;

&lt;p&gt; △ 常规启动方式：把 RWIN.LDR、RWIN.COM、RDOS.IMG、GRLDR 四个文件复制到根目录（不用 RWIN.SIF 文件）；用 WinRAR 把 RWIN.IMG 解压缩到 C:\，然后在 BOOT.INI 中添加一行“C:\GRLDR=&quot;Rescue Environment Boot&quot;”即可。。&lt;/p&gt;

&lt;p&gt;◎ 安装到优盘或移动硬盘&lt;/p&gt;

&lt;p&gt;这可能是大家最想知道的，下面分几种情况说明：&lt;/p&gt;

&lt;p&gt; △ 使用 NTBOOT，仅安装 RWIN：&lt;/p&gt;

&lt;p&gt;   1) 把 RWIN.COM、RWIN.SIF、RWIN.IMG 和 RWIN.LDR 复制到优盘中。&lt;br/&gt;
   2) 把 RWIN.LDR 改名为 NTLDR。&lt;br/&gt;
   3) 在命令提示符中，执行“SETUP\NTBOOT.EXE X:”，写入引导区到优盘中。&lt;/p&gt;

&lt;p&gt; ▲ 使用 GRUBINST，安装 RWIN &amp;amp; RDOS：&lt;/p&gt;

&lt;p&gt;   在 Windows 中执行 SETUP\GRUBUTIL\GRUBINST_GUI.EXE 安装 GRLDR，然后复制 RWIN.IMG、RWIN.LDR、RWIN.COM、RWIN.SIF、RDOS.IMG 和 GRLDR 到优盘。&lt;/p&gt;

&lt;p&gt;   如果不能启动，执行如下操作：&lt;/p&gt;

&lt;p&gt;   1) 用 SETUP\HPUSBFW.EXE 格式化优盘，FAT 或 FAT32 格式。&lt;br/&gt;
   2) 用 SETUP\GRUBUTIL\GRUBINST_GUI.EXE 写入 GRUB 引导扇区到优盘分区引导区（不选择 MBR，而是选择优盘盘符，但肯定会写入 MBR 的）。&lt;br/&gt;
   3) 复制所有文件到优盘。&lt;br/&gt;
   4) 用 UntraEdit 编辑优盘上的 GRLDR，查找“#ind --set-root”，替换为“find --set-root”。&lt;/p&gt;

&lt;p&gt;   这样的话，你的优盘就和大容量的移动硬盘一样了。&lt;/p&gt;

&lt;p&gt; △ 使用 USBOOT 和 BOOTLACE，安装 RWIN &amp;amp; RDOS：&lt;/p&gt;

&lt;p&gt;   1) 用 SETUP\USBOOT\USBOOT.EXE 把优盘做成 DOS 启动盘（模式请随便选择，以能启动你的电脑到 DOS 为准，请多尝试）。&lt;br/&gt;
   2) 复制 RWIN.IMG、RWIN.LDR、RWIN.COM、RWIN.SIF、RDOS.IMG、GRLDR 和 SETUP\BOOTLACE.EXE 到优盘。&lt;br/&gt;
   3) 用优盘启动到 DOS，如果用优盘启动后是 A:\，执行“BOOTLACE.EXE --floppy --chs 0x00”后，可以把 BOOTLACE.EXE 和 DOS 启动文件 IO.SYS、MSDOS.SYS、COMMAND.COM 删除掉，制作完成。（这是使用了 GRUB4DOS 的 GRLDR 作为引导程序，且用 BOOTLACE.EXE 写入了 GRUB 引导扇区，完全脱离 DOS）&lt;br/&gt;
   4) 如果用优盘启动后是 C:\，建议使用 GRUB.EXE。即使用 USBOOT 制作启动 DOS 优盘，然后把 REBOOT 中的文件和 SETUP\GRUB.EXE 拷贝到优盘，然后在 CONFIG.SYS 中添加“DEVICE=GRUB.EXE”，或在 AUTOEXEC.BAT 中运行 GRU.EXE 即可。&lt;/p&gt;

&lt;p&gt; △ 使用 WINGRUB 安装 RWIN &amp;amp; RDOS：&lt;/p&gt;

&lt;p&gt;   不知道怎么描述，总
之一定要非常小心！没有备份数据之前，不要用 WINGRUB 来安装 GRUB。再次提醒，请千万谨慎操作，本人不对损坏主引导扇区的后果负责。&lt;/p&gt;

&lt;p&gt; △ 使用量产工具实现优盘 USB-CDROM 和 USB-HDD 格式双启动：&lt;/p&gt;

&lt;p&gt;   最近无忧启动论坛在讨论使用优盘主控芯片官方提供的量产工具把特定优盘格式化成 USB-CDROM 和 USB-HDD 格式双启动，此方法适应性最好，但一两句难以描述清楚。如有兴趣，请参考：http://bbs.wuyou.com/forumdisplay.php?fid=45 和 http://bbs.wuyou.com/viewthread.php?tid=106231&lt;/p&gt;

&lt;p&gt;以下是安装到优盘几点提示：&lt;/p&gt;

&lt;p&gt; △ 优盘推荐使用 FAT 或 FAT32 文件系统。&lt;br/&gt;
 △ 优盘启动能否成功依赖于主板 BIOS。只要有耐心一般都能搞定。&lt;br/&gt;
 △ 优盘启动速度差异较大，在不同的电脑中有不同的表现，大致在 2-5 分钟不等。&lt;br/&gt;
 △ 如果你有 Windows Mobile 5.0 设备，配合 WM5torage，把这个放到手机的存储里，会是一随身携带的方便的启动盘：）&lt;/p&gt;

&lt;p&gt;三、备注&lt;/p&gt;

&lt;p&gt;◎ 不需要虚拟磁盘 B: 和 FBWF 支持，启动后通过删除不使用的文件和驱动程序 X: 盘有足够的空间（6～8M 左右）。且内置的工具均可直接运行，不需要解压缩到临时文件夹。&lt;/p&gt;

&lt;p&gt;◎ RWIN 中如果使用桌面上的宽带连接，将会删除一些 RAMDISK 上的部分系统工具，以提供更多的空间。如果要使用这些工具，请在此之前操作。如果其它情况下出现空间不足的情况，也请酌情删除掉部分工具。&lt;/p&gt;

&lt;p&gt;◎ 这里提供的 GRUB Loader 启动时只有 5 秒钟等待，默认进入 RWIN。如果需要修默认项，可以用 WinHEX 编辑 GRLDR，在文件尾部找到“default 0”，改为“default 1”即可。&lt;/p&gt;

&lt;p&gt;◎ 这里提供的软件和工具版权归原作者所有，本人提供此打包程序仅供研究测试之用。对于这些明介绍以及制作测试及批处理文件，本人不保留版权，欢迎继续修改。&lt;/p&gt;

&lt;p&gt;◎ RWIN 和 RDOS 的定位是系统应急启动盘，制作此启动盘只是用我自己的选择原则，不一定能符合您的需求。&lt;/p&gt;

&lt;p&gt;四、致谢&lt;/p&gt;

&lt;p&gt;◎ 感谢 老九、老毛桃、neo4026，RWIN 启动盘是在这几位网友的启动盘基础上制作的。&lt;br/&gt;
◎ 感谢 GRUB、GRUB4DOS 和 GRUBINST 的作者。&lt;br/&gt;
◎ 感谢 strongchen 提供的网卡硬件驱动包。&lt;br/&gt;
◎ 感谢各软件作者提供的各种好用软件。&lt;/p&gt;

&lt;p&gt;要获取更多信息，请访问 WWW.YONSM.NET&lt;/p&gt;

&lt;p&gt;Yonsm&lt;br/&gt;
Yonsm@163.com&lt;br/&gt;
WWW.Yonsm.NET&lt;br/&gt;
2007.10.13，杭州&lt;/p&gt;

&lt;p&gt;讨论和截图请到无忧论坛：&lt;br/&gt;
&lt;a href=&quot;http://bbs.wuyou.com/viewthread.php?tid=86175&amp;amp;extra=page%3D2&quot;&gt;http://bbs.wuyou.com/viewthread.php?tid=86175&amp;extra;=page%3D2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载:&lt;a href=&quot;/assets/REBOOT.ISO&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Microsoft Visual C++ 6.0 with SP5+PP5 绿色独立版</title>
      <link href="http://example.com/vc6-with-sp5-pp5-green/"/>
      <updated>2007-08-02T15:09:32+08:00</updated>
      <id>http://example.com/vc6-with-sp5-pp5-green</id>
      <content type="html">&lt;p&gt;都用 Visual Studio 2005 了，偶尔还要用用 VC6，每次都懒得安装，特做了个绿色版本。集成了 SP5+PP5，解压缩到任意目录，执行 MSVC.BAT 即可。需要调试 MFC 程序，请使用 Static 链接，或者吧 MFC42D.DLL 复制到 System32 目录中。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/MSVC.EXE&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;另外还提供附加扩展包，解压缩后包括 DirectX 9.0 SDK，WMF SDK、XTreme Toolkit、Brew SDK 和相关工具（莫名其妙包括这些“乱七八糟”的SDK：）。下载地址稍后提供。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>活过来了……</title>
      <link href="http://example.com/came-to-life/"/>
      <updated>2007-07-13T15:54:53+08:00</updated>
      <id>http://example.com/came-to-life</id>
      <content type="html">&lt;p&gt;闲下来快一个月了，先是和几个哥们驾车去黄山玩，一周后又去丽江、香格里拉、梅里雪山、大理、成都转了半个月，晒得像烧炭刚出来的黑。体验感觉不错，有空时候大致叙述一下过程并贴两张照片，按下不表。&lt;/p&gt;

&lt;p&gt;决定加入 Nero，闲话暂无……&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>修改 psShutXP 使他的硬起功能生效</title>
      <link href="http://example.com/modify-psshutxp-to-support-hard-reset/"/>
      <updated>2007-06-25T19:18:14+08:00</updated>
      <id>http://example.com/modify-psshutxp-to-support-hard-reset</id>
      <content type="html">&lt;p&gt;经验征得之，SetCleanRebootFlag 对于 HTC 系列的 PPC 无效。但一般的软件硬起，往往就用这个函数，psShutXP 也不例外。&lt;/p&gt;

&lt;p&gt;我已经修改 psShutXP，让它的硬起功能真的“硬起”了。下面是分析 HTC ClearStorage 的关键代码（这很容易，但是要把这些代码挪动到 psShutXP 中，那不是一般的难啊——还好我搞定了：）。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;// HTC Cold Reboot&lt;br/&gt;
.text:00011000 sub_11000                               ; CODE XREF: sub_11064+11C p&lt;br/&gt;
.text:00011000                                         ; DATA XREF: .pdata:00014000 o&lt;br/&gt;
.text:00011000&lt;br/&gt;
.text:00011000 var_8           = -8&lt;br/&gt;
.text:00011000 var_4           = -4&lt;br/&gt;
.text:00011000 arg_4           =  4&lt;br/&gt;
.text:00011000&lt;br/&gt;
.text:00011000                 STR     LR, [SP,#var_4]!&lt;br/&gt;
.text:00011004                 SUB     SP, SP, #8&lt;br/&gt;
.text:00011008                 LDR     R0, =0x1012594&lt;br/&gt;
.text:0001100C                 MOV     LR, #0&lt;br/&gt;
.text:00011010                 MOV     R3, #0&lt;br/&gt;
.text:00011014                 MOV     R2, #0&lt;br/&gt;
.text:00011018                 MOV     R1, #0&lt;br/&gt;
.text:0001101C                 STR     LR, [SP,#8+var_4]&lt;br/&gt;
.text:00011020                 STR     LR, [SP,#8+var_8]&lt;br/&gt;
.text:00011024                 BL      KernelIoControl&lt;br/&gt;
.text:00011024&lt;br/&gt;
.text:00011028                 ADD     SP, SP, #8&lt;br/&gt;
.text:0001102C                 LDR     PC, [SP],#arg_4&lt;br/&gt;
.text:0001102C&lt;br/&gt;
.text:0001102C ; End of function sub_11000&lt;br/&gt;
.text:0001102C&lt;br/&gt;
.text:0001102C ; ---------------------------------------------------------------------------&lt;br/&gt;
.text:00011030 dword_11030     DCD 0x1012594           ; DATA XREF: sub_11000+8 r&lt;/p&gt;

&lt;p&gt;// REEBOOT&lt;br/&gt;
.text:00011034&lt;br/&gt;
.text:00011034                 STR     LR, [SP,#var_4]!&lt;br/&gt;
.text:00011038                 MOV     R3, #0&lt;br/&gt;
.text:0001103C                 MOV     R2, #0&lt;br/&gt;
.text:00011040                 MOV     R1, #0&lt;br/&gt;
.text:00011044                 MOV     R0, #0xDF&lt;br/&gt;
.text:00011048                 BL      keybd_event&lt;br/&gt;
.text:00011048&lt;br/&gt;
.text:0001104C                 MOV     R3, #0&lt;br/&gt;
.text:00011050                 MOV     R2, #2&lt;br/&gt;
.text:00011054                 MOV     R1, #0&lt;br/&gt;
.text:00011058                 MOV     R0, #0xDF&lt;br/&gt;
.text:0001105C                 LDR     LR, [SP],#arg_4&lt;br/&gt;
.text:00011060                 B       keybd_event&lt;br/&gt;
.text:00011060&lt;/p&gt;

&lt;p&gt;翻译成 C 代码：&lt;/p&gt;

&lt;h1&gt;define IOCTL_HAL_COLDBOOT_HTC 0x1012594&lt;/h1&gt;

&lt;p&gt;KernelIoControl(IOCTL_HAL_COLDBOOT_HTC, NULL, 0, NULL, 0, NULL);&lt;br/&gt;
keybd_event(VK_OFF, 0, 0, 0);&lt;br/&gt;
keybd_event(VK_OFF, 0, KEYEVENTF_KEYUP, 0);&lt;/p&gt;

&lt;p&gt;其实后两句改成下面更好些：&lt;/p&gt;

&lt;h1&gt;define IOCTL_HAL_REBOOT 0x101003C&lt;/h1&gt;

&lt;p&gt;KernelIoControl(IOCTL_HAL_REBOOT, NULL, 0, NULL, 0, NULL);&lt;/p&gt;

&lt;p&gt;修改过的程序在 Prophet 上验证通过。&lt;/p&gt;

&lt;p&gt;乘胜追击，继续分析完全系统电源功能，找来 PowerOffWarning，得出如下：&lt;/p&gt;

&lt;p&gt;// 关闭 RIL，否则别人打你电话就变成了无信号状态，所谓超级飞行了。&lt;br/&gt;
.text:00011478                 BL      sub_11088&lt;/p&gt;

&lt;p&gt;// 完全关闭电源&lt;br/&gt;
.text:0001147C                 MOV     R3, #0x1000000&lt;br/&gt;
.text:00011480                 ORR     R0, R3, #unk_12000&lt;br/&gt;
.text:00011484                 MOV     LR, #0&lt;br/&gt;
.text:00011488                 MOV     R3, #0&lt;br/&gt;
.text:0001148C                 MOV     R2, #0&lt;br/&gt;
.text:00011490                 MOV     R1, #0&lt;br/&gt;
.text:00011494                 STR     LR, [SP,#0x25C+var_258]&lt;br/&gt;
.text:00011498                 STR     LR, [SP,#0x25C+var_25C]&lt;br/&gt;
.text:0001149C                 BL      KernelIoControl&lt;br/&gt;
.text:0001149C&lt;br/&gt;
.text:000114A0                 BL      GwesPowerOffSystem&lt;/p&gt;

&lt;p&gt;哈哈，今天一大收获，搞定两个问题，“业界”无公开的：）&lt;/p&gt;

&lt;p&gt;下载我汉化修改过的仅适合 HTC Prophet（830等） QVGA 的 psShutXP（预计针对其它机型应该没有效果，这些都是私有的代码）：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/PSShutXP.rar&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;修改后的 psShutXP，硬起功能有效。且关机命令不再是关闭屏幕，而是直接关闭电源（但是RIL，即电话模块，没通知运营商正常关闭，也没有通知应用程序保存数据。所以请使用关机命令前保存好数据）&lt;/p&gt;

&lt;p&gt;顺便体贴个 CeleCommand 中的各式各样的关机、重启、硬起代码：&lt;/p&gt;

&lt;h1&gt;define IOCTL_HAL_REBOOT 0x101003C&lt;/h1&gt;

&lt;h1&gt;define IOCTL_HAL_SHUTDOWN 0x1012000&lt;/h1&gt;

&lt;h1&gt;define IOCTL_HAL_COLDBOOT 0x1012594&lt;/h1&gt;

&lt;p&gt;extern &quot;C&quot; BOOL WINAPI SetCleanRebootFlag();&lt;br/&gt;
extern &quot;C&quot; BOOL WINAPI GwesPowerOffSystem();&lt;br/&gt;
extern &quot;C&quot; BOOL WINAPI ExitWindowsEx(UINT uFlags, DWORD dwReason);&lt;br/&gt;
extern &quot;C&quot; BOOL KernelIoControl(DWORD dwIoControlCode, PVOID pInBuf, DWORD nInBufSize, PVOID pOutBuf, DWORD nOutBufSize, PDWORD pBytesReturned);&lt;br/&gt;
HRESULT SHUT(PCTSTR ptzCmd)&lt;br/&gt;
{&lt;br/&gt;
 BOOL bResult;&lt;br/&gt;
 switch (UChrToUpper(*ptzCmd))&lt;br/&gt;
 {&lt;br/&gt;
 case &#39;S&#39;:&lt;br/&gt;
   // HTC&lt;br/&gt;
   KernelIoControl(IOCTL_HAL_SHUTDOWN, NULL, 0, NULL, 0, NULL);&lt;/p&gt;

&lt;p&gt; case &#39;G&#39;:&lt;br/&gt;
   bResult = GwesPowerOffSystem();&lt;br/&gt;
   break;&lt;/p&gt;

&lt;p&gt; case &#39;P&#39;:&lt;br/&gt;
   bResult = ExitWindowsEx(EWX_POWEROFF, 0);&lt;br/&gt;
   break;&lt;/p&gt;

&lt;p&gt; case &#39;K&#39;:&lt;br/&gt;
   keybd_event(VK_OFF, 0, KEYEVENTF_SILENT, 0);&lt;br/&gt;
   keybd_event(VK_OFF, 0, KEYEVENTF_SILENT | KEYEVENTF_KEYUP, 0);&lt;br/&gt;
   bResult = TRUE;&lt;br/&gt;
   break;&lt;/p&gt;

&lt;p&gt; case &#39;H&#39;:&lt;br/&gt;
   // HTC&lt;br/&gt;
   KernelIoControl(IOCTL_HAL_COLDBOOT, NULL, 0, NULL, 0, NULL);&lt;/p&gt;

&lt;p&gt; case &#39;C&#39;:&lt;br/&gt;
   SetCleanRebootFlag();&lt;/p&gt;

&lt;p&gt; case &#39;R&#39;:&lt;br/&gt;
   bResult = KernelIoControl(IOCTL_HAL_REBOOT, NULL, 0, NULL, 0, NULL);&lt;br/&gt;
   break;&lt;/p&gt;

&lt;p&gt; default:&lt;br/&gt;
   bResult = ExitWindowsEx(EWX_REBOOT, 0);&lt;br/&gt;
   break;&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt; return !bResult;&lt;br/&gt;
}&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>精心构造代码，使 OMAPClock 超频设置永久有效</title>
      <link href="http://example.com/omapclock-toggle/"/>
      <updated>2007-06-10T10:03:28+08:00</updated>
      <id>http://example.com/omapclock-toggle</id>
      <content type="html">&lt;p&gt;用 OMAP CPU 的用户可能知道 OMAP Clock 可以超频。但由于 OMAP CPU 本身的特性，在超频之后如果设备关闭（设备不使用，一般是两分钟后），再次开启时，频率又恢复成默认的了。&lt;/p&gt;

&lt;p&gt;OMAPCLock 本身没有对这些行为作出相关操作，导致 OMAP Clock 用的非常不爽。&lt;/p&gt;

&lt;p&gt;我稍微分析了一下 OMAP Clock 的代码，感觉精心构造一小段的代码，应该可以解决这些问题。方案如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在原来程序提示设置频率的MessageBox处加入代码，总共11条指令，刚刚好够空间。&lt;/li&gt;
&lt;li&gt;由于增加导入表不方便，干脆取消掉 About 显示功能，然后修改 LoadResource、DialogBoxindirectParam 和 EndDialog 的导入函数为 DeleteFileW、SHCreateShortcut 和  CeRunAppAtEven，这样我们就可以调用这三个函数了。&lt;/li&gt;
&lt;li&gt;修改代码，调用 SHCreateShortcut 创建快捷方式（之前还要调用DeleteFile掉快捷方式否则无法创建，我晕倒！）。\Windows\Startup\OMAPClock.lnk，指向 \Windows\OMAPClock.exe -clock &amp;lt;频率&gt;&lt;/li&gt;
&lt;li&gt;调用 CeRunAppAtEnent 清除掉所有的 \Windows\Startup\OMAPClock.lnk 事件。（否则事件通知会越来越多）&lt;/li&gt;
&lt;li&gt;调用 CeRunAppAtEnent 设置在设备唤醒时调用 \Windows\Startup\OMAPClock.lnk。&lt;br/&gt;
4.CeRunAppEnent 正好返回 R0 为 1，所以会继续以设置主频。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;经过一天下午的调试分析和实际操作，终于解决了OMAPClock的这个问题。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;.text:0001165C sub_1165C                               ; CODE XREF: sub_11358+30 p&lt;br/&gt;
.text:0001165C                                         ; sub_11B8C+C0 p&lt;br/&gt;
.text:0001165C&lt;br/&gt;
.text:0001165C szTarget        = -0x198&lt;br/&gt;
.text:0001165C arg_8           =  8&lt;br/&gt;
.text:0001165C&lt;br/&gt;
.text:0001165C                 MOV     R12, SP&lt;br/&gt;
.text:00011660                 STMFD   SP!, {R0-R3}&lt;br/&gt;
.text:00011664                 STMFD   SP!, {R12,LR}&lt;br/&gt;
.text:00011668                 SUB     SP, SP, #0x190&lt;br/&gt;
.text:0001166C                 MOV     R2, R1          ; wchar_t *&lt;br/&gt;
.text:00011670                 ADD     R3, SP, #0x198+arg_8 ; va_list&lt;br/&gt;
.text:00011674                 MOV     R1, #0xC8       ; size_t&lt;br/&gt;
.text:00011678                 ADD     R0, SP, #0x198+szTarget ; wchar_t *&lt;br/&gt;
.text:0001167C                 BL      _vsnwprintf&lt;br/&gt;
.text:0001167C&lt;br/&gt;
.text:00011680                 LDR     R0, =s_WindowsStartu ; lpFileName&lt;br/&gt;
.text:00011684                 BL      DeleteFileW&lt;br/&gt;
.text:00011684&lt;br/&gt;
.text:00011688                 LDR     R0, =s_WindowsStartu ; szShortcut&lt;br/&gt;
.text:0001168C                 ADD     R1, SP, #0x198+szTarget ; szTarget&lt;br/&gt;
.text:00011690                 BL      SHCreateShortcut&lt;br/&gt;
.text:00011690&lt;br/&gt;
.text:00011694                 MOV     R1, #0          ; lWhichEvent&lt;br/&gt;
.text:00011698                 LDR     R0, =s_WindowsStartu ; pwszAppName&lt;br/&gt;
.text:0001169C                 BL      CeRunAppAtEvent&lt;br/&gt;
.text:0001169C&lt;br/&gt;
.text:000116A0                 MOV     R1, #0xB        ; lWhichEvent&lt;br/&gt;
.text:000116A4                 LDR     R0, =s_WindowsStartu ; pwszAppName&lt;br/&gt;
.text:000116A8                 BL      CeRunAppAtEvent.text:000116A8&lt;br/&gt;
.text:000116AC                 ADD     SP, SP, #0x190&lt;br/&gt;
.text:000116B0                 LDMFD   SP, {SP,PC}&lt;br/&gt;
.text:000116B0&lt;br/&gt;
.text:000116B0 ; End of function sub_1165C&lt;br/&gt;
.text:000116B0&lt;br/&gt;
.text:000116B0 ; ---------------------------------------------------------------------------&lt;br/&gt;
.text:000116B4                 DCD unk_1480C&lt;br/&gt;
.text:000116B8 ; LPCWSTR lpFileName&lt;br/&gt;
.text:000116B8 lpFileName      DCD s_WindowsStartu     ; DATA XREF: sub_1165C+24 r&lt;br/&gt;
.text:000116B8                                         ; sub_1165C+2C r&lt;br/&gt;
.text:000116B8                                         ; sub_1165C+3C r&lt;br/&gt;
.text:000116B8                                         ; sub_1165C+48 r&lt;br/&gt;
.text:000116B8                                         ; &quot;\Windows\Startup\OMAPClock.lnk&quot;&lt;/p&gt;

&lt;p&gt;理论上 OMAPClock 支持 TI OMAP CPU 的 Smartphone 和 Pocket PC。但后来发现 Smartphone 的 CeRunAppAtEvent 的 Wakeup 事件竟然无效，又是一个弱智 API，Windows Mobile Team 的这些头脑进水的垃圾工程师，总是让我们有不断的“惊喜”发现——Smartphone 不支持唤醒事件，换句话说，新增功能不支持Smartphone，Smrtphone SDK 的文档上没说，但是全世界的论坛都在说这样的问题（http://www.pcreview.co.uk/forums/thread-2467990.php，http://www.pdastreet.com/forums/showthread.php?t=32346）。&lt;/p&gt;

&lt;p&gt;由于以上代码修改的原因，此版本 OMAPClock 具有以下局限和特性：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;取消了 About 对话框（不影响使用）。&lt;/li&gt;
&lt;li&gt;取消了 设置频率的警告（不影响使用）。&lt;/li&gt;
&lt;li&gt;文件夹 \Windows\Startup 必须存在。&lt;/li&gt;
&lt;li&gt;OMAPClock 程序路径必须是 \Windows\OMAPClock.exe。&lt;/li&gt;
&lt;li&gt;新增功能无法支持 Smartphone。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;以上要求很容易满足（几乎所有系统中默认就是这样，只要把我修改的OMAPClock.exe 放在\Windows中即可），所以这次修改可以看成“完美”了，哈哈……&lt;/p&gt;

&lt;p&gt;下载（2007.06.09 20:00 之前下载的用户，请重新下载）：&lt;br/&gt;
&lt;a href=&quot;/assets/OMAPClock.rar&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>最帅的 Prophet (830/818Pro/XDANeo/S200) WM5 ROM</title>
      <link href="http://example.com/prophet-rom/"/>
      <updated>2007-06-09T15:19:27+08:00</updated>
      <id>http://example.com/prophet-rom</id>
      <content type="html">&lt;p&gt;欢迎使用最帅的 Prophet (830/818Pro/XDANeo/S200) 简体中文 WM5 ROM OS！它将一站式地帮您解决 Prophet PPC 中的所有困扰问题，带给您一个全新的完美体验。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一、特性&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; ◎ 运行稳定，省电安全。&lt;br/&gt;
 ◎ 完美定制，细致周到。&lt;br/&gt;
 ◎ 配备各种必须的精选工具。&lt;br/&gt;
 ◎ 基于 CeleCommand，支持扩展和再定制。&lt;br/&gt;
 ◎ ROM OS 纯净清洁，扩展组件可选择性启用。&lt;br/&gt;
 ◎ 仅提供 OS，不会对机器造成致命伤害，G3/G4 均可刷。&lt;br/&gt;
 ◎ 支持一键安装软件和游戏包，为 PPC 用户提供了大量精选的各种软件和游戏。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二、使用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; 请按严格安装以下步骤操作：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在 PPC 上执行“开始-&gt;设置-&gt;系统-&gt;清除内存”，输入 1234，硬启到调整屏幕界面（不用调整，就在此状态下刷机）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把 PPC 接上 USB 数据线，使用 ActiveSync 连接到电脑。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在电脑上运行 Prophet.Yonsm.WM5.EXE，按提示操作，等待刷机完成。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果顺利，刷机完成后会自动硬启您的 PPC 设备。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;刷机硬启调整屏幕后，进入 ROM OS 可选设置屏幕，请自行选择。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;建议普通用户下载一键安装软件包，里面提供了我使用的各种软件和游戏，都是破解或注册版本。&lt;!-- more --&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;strong&gt;三、ROM OS 细节&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; ROM OS 基于 DOPOD 830 2.19 AKU2.2 简体中文官方版制作，进行了以下主要改动：&lt;/p&gt;

&lt;p&gt; ■ 集成了官方 EXTROM 中所有与系统相关的更新。EXTROM 的空间可以腾出给用户安装扩展组件。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;☆ 集成 WIFI 简体中文补丁。  
☆ 集成 ArcSoft MMS 3.0 完全设置。  
☆ 集成中国移动 GRPS CMNET CMWAP 设置。  
☆ 集成最新声音驱动，避免养成器爆音损坏问题。  
☆ 集成蓝牙 A2DP 补丁，支持立体声蓝牙耳机，支持 AVRCP 控制。已测试 iTech Clip R35 立体声蓝牙耳机能正常使用。  
☆ 集成官方 EXTROM 中其它各种设置。都是仔细分析并导入到 ROM 中的，绝对放心使用。金山词霸、股票等第三方软件除外。  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; ■ 去除了很多 HTC 提供的鸡肋一样的东西（如果需要，建议把此类东西安装在卡上）。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;☆ 去除了 JAVA 虚拟机。如果需要，建议使用绿色版本的 Jeodek。  
☆ 去除了 SIM 卡管理器，建议使用一键安装软件包中的 SIM 卡管理器。  
☆ 去除了 IAZIP，比起 PocketRAR 和 Resco 的 ZIP 插件，功能和易用性差的太远了，图标还 N 难看。  
☆ 去除了 ClearVue PDF Viewer。建议使用官方的 Adobe Reader LE 2.1 简体中文版，比原来内置的酷多了。  
☆ 去除了所有的第三方软件的帮助文件，比如相机、通讯管理器等帮助。Windows Mobile 本身的所有帮助都保留了。  
☆ 去掉了 ArcSoft MMS 的彩信模板和声音，觉得比较鸡肋，一般彩信都自己设计一下下吧，很容易的。  
☆ 去掉了水呀、花呀的两张图片，漂亮的图片多着了，天涯何处无芳草呢：）  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; ■ 调整&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;☆ 显示长日期格式。  
☆ 去除短信发送报告。  
☆ GPRS 连接后显示计时和断开按钮。  
☆ 修改 PIE 主页，集成 Google Mobile 搜索。  
☆ 映射 PIE 左右键翻页功能，非常方便上网浏览。  
☆ 将 10086 设置为语音邮件，电话中长按 1 即可拨打。  
☆ 短信直接删除，而不是到“已删除邮件”（如果需要可自行改回）。  
☆ 默认关闭了 STK Service，SIM 卡上的 STK 服务再垃圾不过了（初始设置中可启用）。  
☆ 设置-&amp;gt;连接 中出现 GPS 图标，不需要那个 GPS 寻星程序就可以使用 GPS 了，已测试通过。  
☆ 设置-&amp;gt;按键中的图标，使用了 MS ShellRes.dll 中的图标，去掉了 HTC 的懒虫程序员做的 Icon DLL。  
☆ 通讯管理器，调整了按钮的位置，去掉了Direct Push、振动/声音切换，无需 CMCC PUSH 设置我们的机器，再说本来他们也没有什么 Push 服务：）  
☆ 去掉了内部几乎所有的快捷方式，使用我写的 CeleCommand 来从配置文件中创建快捷方式，是那个又方便又快捷呀……，扩展性还非常地强！  
☆ 各种其它调整太多了，请恕我无法一一列出……  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; ■ 替换换系统中原有的部分程序&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;☆ 替换了原来的 Pocket MSN 为最新的 Windows Live 简体中文正式版。  
☆ 替换了原来的语音拨号，使用了最新的 Ceberon Voice Commander 2.0 简体中文普通话版本。无需训练，即可使用联系人语音拨号，以及控制音乐播放等。支持蓝牙耳机控制，开车的时候使用特方便。  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; ■ 增加的内容&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;☆ 设置：软按键  
☆ 设置：定期关闭电话  
☆ 设置：默认输入法选择器  
☆ 设置：WM5torage 优盘切换  
☆ 设置：CeleCommand 支持的初始设置  
☆ 设置：OMAP Clock（我修改过的，永久超频有效，注意，OMAPClock 超频不要超过 240 MHz！！！）  
☆ 字体：集成雅黑字体和宋体，硬启后可随自己喜好选择（不硬启也可以切换：设置-&amp;gt;系统-&amp;gt;初始设置）。  
☆ 附件：添加了 WM6 中提取的 Terminal Service Client（远程桌面），可以登录到 WinXP/2003 之类的电脑上，支持全屏和自适应屏幕。  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;四、扩展组件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; ROM 中包含了可选的几个软件组件，已经做成了 CeleCommand 可选安装界面，硬启后自动会显示一站式安装界面（极速，5 秒内完成所有软件安装）。&lt;/p&gt;

&lt;p&gt; 如果不选择任何组件，本 ROM OS 将是一个“纯净版”的 OS。&lt;/p&gt;

&lt;p&gt; 以下是扩展组件的内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;☆ CeleDial：智能拨号助手  
☆ CeleTask：替换相机键，长按为相机  
☆ HandySwitcher：长按 OK 弹出菜单  
☆ Resco Explorer：资源管理器完美中文版  
☆ A4 输入法：好用的拼音输入法  
☆ 梅花输入法：高效的拼音输入法  
☆ 智慧声控：关联到通讯键  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;五、刷机失败解决方案&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; ROM 仅包含 OS。不会造成致命伤害。最坏的情况是，刷了之后不能启动系统。此时，您只要按以下步骤操作，即可修复您的系统：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;按住相机键开机，进入三色屏幕。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用 USB 数据线把 PPC 连接到电脑上（三色屏状态下不是通过 ActiveSync 连接的，所以不用看 ActiveSync 是否
连接）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用 &lt;a href=&quot;/assets/Prophet.AKU22.WWE.OS.rar&quot;&gt;Prophet AKU2.2 WWE RUU 刷机包&lt;/a&gt;，把系统重刷一次为官方 ROM OS。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;进入调整屏幕状态，重新刷这个最帅的 ROM OS。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;strong&gt; 六、问答&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; ■ SPL/SPL 要解锁 CID 吗，要升级吗？&lt;/p&gt;

&lt;p&gt; 答：不需要。但建议把 Radio/GSM 软件模块升级到 2.61（http://bbs.pdafans.com/viewthread.php?tid=322714 或 http://forum.xda-developers.com/showthread.php?t=291110）。&lt;/p&gt;

&lt;p&gt; ■ 我的机器是 818+ 可以刷这个 ROM 吗？&lt;/p&gt;

&lt;p&gt; 答：不行，这是为 818Pro/830/S200/XDA Neo 准备的。但已经有 818+ 网友刷了，除出了相机不能用，似乎没有别的问题。如果您不能确认您的型号，请在 设置-&gt;系统-&gt;设备信息冲查看。如果型号是 PM300，那就是 Prophet，就可以刷。&lt;/p&gt;

&lt;p&gt; ■ 相机照片怎么不能保存到 SD 卡上？&lt;/p&gt;

&lt;p&gt; 答：因为你选择了显示 Storage 文件夹（就是 EXTROM）。只要进入初始设置把 Storage 隐藏，然后在相机选项中设置保存位置为 Storage Card 即可。&lt;/p&gt;

&lt;p&gt; ■ WIFI 无法重连，怎么回事？&lt;/p&gt;

&lt;p&gt; 答：二次连接时，部分 AP 需要重启才能重新连接，比如 D-Link 的 AP；TP-Link 的 AP 没有任何问题。其他人提供的 WIFI 830 补丁均有此问题，但 WM5 AKU 2.2 WWE 英文版本却没有任何问题，具体原因暂时未知。&lt;/p&gt;

&lt;p&gt; ■ 如何扩展定制此 ROM？&lt;/p&gt;

&lt;p&gt; 答：用 WinRAR 解压，看以下几部分：批处理文件、InitFlashFiles、CeleSetup.ccs、CeleExt.ccs、CeleCommand 的帮助（附件-&gt;命令解释器-&gt;菜单-&gt;帮助）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;七、致谢&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; ◎ 感谢 Kavana 提供的各种帮助（ASUS P525 用户建议使用他定制的 ROM）。&lt;br/&gt;
 ◎ 感谢 ImgFSTools 的作者提供的 ROM 定制工具。&lt;br/&gt;
 ◎ 感谢 XDAUtils 的作者提供的刷机工具。&lt;br/&gt;
 ◎ 感谢 PANFANS 论坛提供的讨论场所。&lt;br/&gt;
 ◎ 感谢您的测试结果和建议报告（如果有的话）。&lt;br/&gt;
 ◎ 感谢您使用本 ROM（如果您使用的话）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;八、许可&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; ◎ 本人未持有 ROM 及其中的软件的版权，请以研究和学习为目的，合法使用。&lt;br/&gt;
 ◎ 如果您根据我提供的方法以及工具修改了 ROM，建议继续公开和分享您的工作成果。&lt;br/&gt;
 ◎ 本人特此申明对 ROM 之使用不提供任何保证，不对任何用户保证本 ROM 的适用性，不保证无故障产生；亦不对任何用户使用此 ROM 所遭遇到的任何理论上的或实际上的损失承担责任。&lt;br/&gt;
 ◎ 如果您使用本软件，即表示已经默认接受了此协议。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;九、历史&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; ■ 2007.05.02&lt;/p&gt;

&lt;p&gt;  ◎ 升级 CeleTask，支持 Storage 切换和 STK 切换。&lt;br/&gt;
  ◎ 更新 Resco Explorer 为最新的 6.0 完美汉化版本。&lt;br/&gt;
  ◎ 更新梅花输入法为 5.0.1 版本。&lt;br/&gt;
  ◎ 其它小调整。&lt;/p&gt;

&lt;p&gt; ■ 2007.05.20&lt;/p&gt;

&lt;p&gt;  ◎ 内置记事本、SIM 卡联系人和系统管理器。&lt;br/&gt;
  ◎ 增加 HandySwitcher，可选安装。&lt;br/&gt;
  ◎ 增加 A4 输入法，可选安装。&lt;br/&gt;
  ◎ 增加输入法切换等小工具。&lt;br/&gt;
  ◎ 其它小调整。&lt;/p&gt;

&lt;p&gt; ■ 2007.06.10&lt;/p&gt;

&lt;p&gt;  ◎ 完善 CeleSetup.ccs 脚本，用户可以随时运行 CeleSetup.ccs 重新做系统设置（而不是只能在硬启时做设置）。&lt;br/&gt;
  ◎ 更新为我精心修改过的 OMAPClock，超频设置永久有效。注意，OMAPClock 超频不要超过 240 MHz！！！&lt;br/&gt;
  ◎ 去除内置的记事本、SIM 卡联系人和系统管理器。建议安装一键安装软件包。&lt;br/&gt;
  ◎ 集成最新相机补丁，使用 OMAPClock 超频后，相机不花屏。&lt;br/&gt;
  ◎ 集成雅黑输入法，用户可以选择是否使用雅黑字体。&lt;br/&gt;
  ◎ 更新 A4 输入法。&lt;br/&gt;
  ◎ 其它小调整。&lt;/p&gt;

&lt;p&gt; ■ 2007.06.15&lt;/p&gt;

&lt;p&gt;  ◎ 增加蓝牙驱动补丁，支持通过蓝牙 ActiveSync 上网。非常有用的功能，因为蓝牙上网比 WIFI 省电多了。&lt;br/&gt;
  ◎ 去掉 Windows Live 的快捷方式；把调制解调器快捷方式从设置移动到附件中；设置中重新启用“同步模式”。&lt;br/&gt;
  ◎ 修正 CeleSetup.ccs 切换频繁切换雅黑字体和宋体有可能造成字体错误的问题。&lt;br/&gt;
  ◎ 其它小调整。&lt;/p&gt;

&lt;p&gt; ■ 2007.06.20&lt;/p&gt;

&lt;p&gt;  ◎ 更新 RESCO Explorer。&lt;br/&gt;
  ◎ 更新 CeleDial。&lt;br/&gt;
  ◎ 修正设置中软按键设置日历无效的问题。&lt;br/&gt;
  ◎ PagePool 调整，可以或许更大的空闲内存。&lt;br/&gt;
  ◎ 其它小调整。&lt;/p&gt;

&lt;p&gt; ■ 2007.06.25&lt;/p&gt;

&lt;p&gt;  ◎ 重新规划 ROM 结构，把软件移动到 EXTROM 中。&lt;br/&gt;
  ◎ 更新 CeleDial、CeleCommand、CeleTask。&lt;br/&gt;
  ◎ 去除中天 A4 输入法，几乎是一个鸡肋，问题还一大堆（无法安装到 \Windows 以外；文件夹 N多；运行不稳定、输入不高效）。&lt;br/&gt;
  ◎ 其它各种调整。&lt;/p&gt;

&lt;p&gt; ■ 2007.06.26&lt;/p&gt;

&lt;p&gt;  ◎ EXTROM 重新移动回 ROM OS 中，毕竟 ROM OS 的空间不用就浪费了。&lt;br/&gt;
  ◎ 去除扩展组件中的汉王输入法，太大了 ROM 空间不够了。&lt;br/&gt;
  ◎ 重新添加 A4 输入法，汉王放不下，A4 还是放回来吧。&lt;br/&gt;
  ◎ 增加我写的自动硬启的工具，刷机完成后不需要手动硬启了。&lt;br/&gt;
  ◎ 重新恢复原来的刷机工具方法。&lt;/p&gt;

&lt;p&gt; ■ 2007.07.13&lt;/p&gt;

&lt;p&gt;  ◎ 增加了上版遗漏的 Windows Media Player 蓝牙 AVRCP 控制插件注册表项。&lt;/p&gt;

&lt;p&gt; ■ 2007.09.13&lt;/p&gt;

&lt;p&gt;  ◎ 更新 Windows Live Messenger，不再需要合并联系人，非常有用的改进。&lt;br/&gt;
  ◎ 去掉内置的手写输入法，增加汉王输入法最新版。&lt;br/&gt;
  ◎ QuickMenu 替换 HandySwitcher。&lt;br/&gt;
  ◎ 由于空间不足，去除远程桌面（如果需要类似功能，推荐使用Remote2PC）。&lt;br/&gt;
  ◎ 用 PSShutXP 替换长按关机按钮功能。&lt;br/&gt;
  ◎ 增加备份和恢复联系人的 CeleCommand 脚本（在 程序-&gt;附件 中）。&lt;br/&gt;
  ◎ 改进 CeleCommand 安装脚本。&lt;br/&gt;
  ◎ 升级部分软件。&lt;/p&gt;

&lt;p&gt; ■ 2007.09.23&lt;/p&gt;

&lt;p&gt;  ◎ 恢复内置的手写输入法，如需汉王输入法最新版，下载 &lt;a href=&quot;/assets/HWPen.rar&quot;&gt;附加包&lt;/a&gt;，释放到 \Windows 下，然后执行 设置-&gt;系统-&gt;初始设置 即可。&lt;br/&gt;
  ◎ 把备份和恢复联系人的 CeleCommand 脚本移动到 设置-&gt;个人 中。&lt;br/&gt;
  ◎ 升级 QuickMenu、Resco Explorer 和 A4 输入法。&lt;br/&gt;
  ◎ 改进部分 CeleCommand 脚本。&lt;br/&gt;
  ◎ 恢复远程桌面。&lt;/p&gt;

&lt;p&gt; ■ 2007.09.24&lt;/p&gt;

&lt;p&gt;  ◎ 更正 A4 输入法未更新到最新版本的错误。&lt;/p&gt;

&lt;p&gt; ■ 2007.10.27&lt;/p&gt;

&lt;p&gt;  ◎ 更新为 A4 输入法 2.0.45。&lt;br/&gt;
  ◎ 更新为梅花输入法 6.0 B1。&lt;br/&gt;
  ◎ 更新为Resco Explorer 6.16。&lt;br/&gt;
  ◎ QuickMenu 更新为最新版。&lt;br/&gt;
  ◎ 更新 CeleTask、CeleCmd。&lt;br/&gt;
  ◎ CCS 脚本改进和其它改进。&lt;/p&gt;

&lt;p&gt; ■ 2007.10.27&lt;/p&gt;

&lt;p&gt;  ◎ 修正 Resco Today 无法显示的 BUG。&lt;/p&gt;

&lt;p&gt;■ 2007.12.28&lt;/p&gt;

&lt;p&gt; ◎ 升级 Resco Explorer
 为 6.17。&lt;br/&gt;
 ◎ 简化硬启后的欢迎向导，仅保留屏幕调整页面。&lt;br/&gt;
 ◎ 修改 CeleSetp.ccs 中关于梅花输入法判断的小问题。&lt;br/&gt;
 ◎ 取消 QuickMenu 的背景图片（可自行开启），菜单弹出速度更加快速。&lt;br/&gt;
 ◎ Page Pool 由 8M 改为 6M，开机后的内存增加到 28M，可以更轻松地 GPS 软件。&lt;/p&gt;

&lt;p&gt;■ 2007.12.28  晚 修正Resco Today 的问题。&lt;/p&gt;

&lt;p&gt; ■ 2008.04.06&lt;/p&gt;

&lt;p&gt; ◎ 重新启用欢迎向导重的日期和时区调整页面，避免时间同步的问题。&lt;br/&gt;
 ◎ 这是 830 WM5 的最终版本，已经非常完美稳定。Yonsm 已经没有 830 手机了，以后可能不再更新。&lt;/p&gt;

&lt;p&gt;要获取更多信息，请访问 WWW.YONSM.NET&lt;/p&gt;

&lt;p&gt;Yonsm&lt;br/&gt;
Yonsm@163.com&lt;br/&gt;
WWW.Yonsm.NET&lt;br/&gt;
2008.04.06，杭州&lt;/p&gt;

&lt;p&gt;我、我爱的人和天下所有的好人幸福快乐！&lt;/p&gt;

&lt;p&gt;查看&lt;a href=&quot;/assets/Prophet.Yonsm.WM5.png&quot;&gt;屏幕截图&lt;/a&gt;（可能与当前版本有些许出入）&lt;/p&gt;

&lt;p&gt;下载 Prophet WM5 ROM 2008.04.06 版：&lt;br/&gt;
&lt;a href=&quot;/assets/Prophet.Yonsm.WM5.2008.04.06.exe&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;感谢 ling830 网友的看图刷机指南：&lt;br/&gt;
http://bbs.pdafans.com/viewthread.php?tid=399263&amp;page;=1#pid4120561&lt;/p&gt;

&lt;p&gt;更多下载，请看下一页&lt;/p&gt;

&lt;p&gt;下载 Prophet WM5 ROM 2007.12.28 版：&lt;br/&gt;
&lt;a href=&quot;/assets/Prophet.Yonsm.WM5.2007.12.28.exe&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载 Prophet WM5 ROM 2007.09.24 版：&lt;br/&gt;
&lt;a href=&quot;/assets/Prophet.Yonsm.WM5.2007.09.24.exe&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载 Prophet WM5 ROM 2007.10.28 版：&lt;br/&gt;
&lt;a href=&quot;/assets/Prophet.Yonsm.WM5.2007.10.28.exe&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载 O2 启动画面（最漂亮的 Prophet 启动画面，确认G4可刷，G3未验证）：&lt;br/&gt;
&lt;a href=&quot;/assets/02_Logo_Prophet.exe&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载 Prophet 2.69.21 Radio ROM （GSM 模块，G3/G4 均可刷）：&lt;br/&gt;
&lt;a href=&quot;/assets/Prophet_G3_G4_RadioRom_v2.69.21.exe&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>[转载]西游记之黑客帝国版</title>
      <link href="http://example.com/xiyou-matrix/"/>
      <updated>2007-06-02T10:00:23+08:00</updated>
      <id>http://example.com/xiyou-matrix</id>
      <content type="html">&lt;p&gt;事情起源是这样的&lt;/p&gt;

&lt;p&gt;一个名叫盘古的程序员，开始设计一个自然环境仿真系统，在系统中，设计了天，地，山川河流等自然场景，作为一个生物进化发展研究的模拟系统。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;但是这个系统本身是不稳定的，存在一些缺陷，运行中出现了bug，导致“天”这一场景面临数据崩溃的处境，一个叫女娲的女程序员开始着手进入这个项目，做了若干个属性为“石”的补丁程序，弥补了缺陷，重新使系统恢复了稳定，并创建基本的生物元素，实现了系统的稳定运行。在这个过程中，一个对象属性为“石”的补丁程序并未真正起用，空置在“地”的场景中….&lt;/p&gt;

&lt;p&gt;系统的运行环境，为了能在有效的系统资源里实现无限的生物演进模拟，特别设置了生物的循环系统，不同物种的生灵可以在每次生命重新开始的时候重新配置，重新配置时，原记忆属性会被清空。这个，被称为“六界轮回”。&lt;/p&gt;

&lt;p&gt;有一种超级系统控制程序，被称为“佛”，“佛”不是一种生物属性，作为对比，其各项生命特征属性，包括力量，视野，生命期，形状，变化力等等都是无限的，同时“佛”程序完全没有“七情”，“六欲”等生灵属性。 但是“佛”本身不能直接进行生命数据的操作和管理，因为这种超级程序一旦不加限制的使用容易导致系统数据错误。所以有相应，在生灵界环境中的调用接口，也就是“菩萨”，实际上，菩萨是佛的接口程序，为了保证数据安全，菩萨子程序的应用范畴也仅仅限于数据的正向修订，创建，而不能用于数据的反向操作，比如删除，格式化等等。这一特性，也被称为“大慈大悲”，“普渡众生”。&lt;/p&gt;

&lt;p&gt;普通生物对象的生命周期特性，力量特性，视野特性等等都被限制在了很有限的数据范围内，但是由于系统运行中不可避免的错误，部分生命对象由于系统错误，导致相关属性超过了系统限制，并危害了其他生命对象的存在，这个现象被称为“妖”，由于“妖”的出现，而“佛”程序，“菩萨”程序，本身是不能直接用于这样的数据清理修复，所以系统基于生物属性创建了一个新的生物子环境，来进行普通生物环境的数据修复和数据循环等操作，这个环境叫做“仙界”。仙可以认为是一种升级的生物环境，他们拥有普通生物的全部属性，不同的时候，他们会在“生命周期”，“视野”，“力量”等属性参数上远远超过普通生物，另外他们还具有“飞翔”，“变化”，“隐藏”等能力，这也是普通生物属性所无法具备的。仙界对“妖”等数据异常的清理工作，也被称为“降妖服魔”。&lt;/p&gt;

&lt;p&gt;另外，在数据循环中，处于上一个周期结束，下一个周期开始前的数据对象，被称为“鬼”，“鬼”的部分相貌，禀性属性继承了上一周期结束时的属性，直到在地府子系统进行数据清零操作为止。地府子系统，也是和仙界并行，并受仙界控制的一个系统环境。仙界控制了普通生物界的风雨雷电等自然现象的管理，也控制了生物界异常数据的清理。但是仙界本身，也具有生灵界的全部属性特征，同时仙界和普通生灵界，也具有数据的可交互性。某些接口程序，可以把生灵界中具有一定特性的对象提升为仙界对象，比如八仙。&lt;/p&gt;

&lt;p&gt;超级控制程序“佛”， 生灵界，仙界（包括接管了生灵界数据循环的地府子系统）构成了一个复杂的模拟环境，这个环境运行中，虽然出现了各种各样的问题，但是还是比较稳定的运行着，直到有一天….&lt;/p&gt;

&lt;p&gt;女娲程序员留下的那段属性为“石”的补丁程序，在某个不清楚的特定条件触发下，大约是系统出现了一个溢出错误，这个程序突然被激活了，并在体貌等特性上赋予了生物“猴”的特征，但是本质上说，这个程序并不是真的生物系统的程序，这也就为后来造成了非常严重的系统紊乱。&lt;/p&gt;

&lt;p&gt;这个程序被激活后，它的学习力，模仿力，野心，理解力，勇敢，力量等属性全部都是系统最高上限值，而且在系统适应过程中，这个程序自己主动找到了人间和仙界的接口程序，也就是菩提子的道观，由于仙界本身也存在数据的新陈代谢，这个接口程序负责将人类具有灵性的对象升级成为仙界对象，但是这个升级程序本身存在一个问题，就是这个程序的升级能力全部都是系统的上限，但每个对象只能根据自己的领悟力和理解力达到一个限制，对于一般的生命对象，由于他们自己的属性所限制，不会升级成为超级属性，但是这个被重新命名为“孙悟空”的补丁程序却不同，由于自身学习类属性全部是系统上限，因此通过接口程序迅速的被升级成为具有最高属性的生命体。这时接口程序才意识到问题，强行终止了孙悟空的升级操作，但是为时已晚。&lt;/p&gt;

&lt;p&gt;升级后的孙悟空通过自适应，迅速进入仙界的“龙宫”子系统，并激活了由早期管理程序“大禹”留下的物体对象“金箍棒”，“金箍棒”最早用于系统早期的超级管理程序“大禹”进行水场景的调试和处理，该物体对象的使用属性需要操作者具有超级力量属性和超级变化属性，在生物界和仙界，原本并不存在这样的实体，直到孙悟空出现。&lt;/p&gt;

&lt;p&gt;系统开始决定消除这个数据bug，但是此时系统犯了第一个错误，系统错误的以为“孙悟空”是生物对象，希望通过地府的轮回子系统将其数据清零，重新进入轮回回转，结果地府子系统强行清零的时候发现数据类型无法匹配，非但未能完成数据清零，反而使生命循环子系统等待清理的数据队列造成溢出，这一事件被称为“撕毁生死簿”。&lt;/p&gt;

&lt;p&gt;系统第二次希望通过将其提升为仙界的方式弱化处理，却不料“孙悟空”这个数据对象完全不遵守仙界的生物数据管理模式，再次导致数据紊乱。这个事件被称为“第一次大闹天宫”。&lt;/p&gt;

&lt;p&gt;之后系统再次希望起用“仙界除妖”模式处理，但是孙悟空的特性和妖上不同的，妖来源于普通生物对象的溢出，而孙悟空来源于最初的“石”属性补丁程序，除妖程序失效。&lt;/p&gt;

&lt;p&gt;系统后来为平息这个数据错误，再次起用了提升孙悟空为仙界“齐天大圣”的处理模式，不料在“蟠桃盛会”这个事件上再次出现了数据不兼容的紊乱。但是系统由了上一次的清理失效的教训，已经学会了认识孙悟空的属性，所以起用了“炼丹炉”子程序进行数据处理，炼丹炉子程序是可以在系统中对物质属性进行转化的程序，此时，系统已经将“孙悟空”的“顽石”属性定义为“物质”属性，可是此时系统仍然犯了错误，炼丹炉子系统源于女娲的炼石系统，孙悟空这一数据对象原本是女娲炼石系统升级出来的，因此炼丹炉最后实现的非但不是消灭这个数据对象，反而是协助孙悟空完成了又一次升级，增加了“火眼金睛”的效果。&lt;/p&gt;

&lt;p&gt;系统在最终无柰的情况下，起用了超级管理程序--“佛”。“佛”程序一起用，立即使孙悟空的能力相形见绌，但是佛程序依然不敢直接删除这一数据对象，因为孙悟空的“顽石”属性，佛程序只能通过“石”对象来抑制其行动，也就是“五指山”，并设置了密钥。&lt;/p&gt;

&lt;p&gt;系统再次稳定的运行了500年….&lt;/p&gt;

&lt;p&gt;500年后，系统中的运行bug积累的非常多，仙界子系统不能完全铲除妖魔（生灵界的数据bug），甚至仙界子系统&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>CeleSign - 数字证书创建、汉化签名修复工具</title>
      <link href="http://example.com/celesign/"/>
      <updated>2007-05-09T13:44:29+08:00</updated>
      <id>http://example.com/celesign</id>
      <content type="html">&lt;p&gt;小东西，包含源代码，没有更多要说的。&lt;br/&gt;
&lt;a href=&quot;/assets/CeleSign.gif&quot;&gt;&lt;img src=&quot;/assets/CeleSign.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2008.3.27 已经更新 1.2.56，支持完全移除签名数据，并添加了一个签署设备的功能（彩蛋，不容易找&lt;/p&gt;

&lt;p&gt;好久以前就更更新了，忘了放上来，只有我和Kavana在用，我晕死&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/1206597606_72079e82.zip&quot;&gt;CeleSign.zip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;源代码：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/1221149097_2931ddcf.zip&quot;&gt;CeleSign.1.2.56.zip&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>CodeZap - 给 EXE 添加额外代码的 C++ Engine</title>
      <link href="http://example.com/codezap/"/>
      <updated>2007-05-02T18:53:41+08:00</updated>
      <id>http://example.com/codezap</id>
      <content type="html">&lt;p&gt;给 EXE 添加节显示启动信息的代码多得很，CodeZap 这个最大的特色就是 C++ 写成的，且提供了比较独立美观的Z函数。只要了解 C/C++ 语言，就能写添加大量的代码，完全可以工程化操作。&lt;/p&gt;

&lt;p&gt;CodeZap 简要说明&lt;/p&gt;

&lt;p&gt;CodeZap 是用来给 PE 文件添加额外代码的 C++ SDK。您可以通过使用熟悉而且容易工程化的 C/C++ 语言来添加大量的可执行代码。&lt;/p&gt;

&lt;p&gt;Codez 使用非常简单，你只要模仿 ZCode 函数，写出自己的 ZCode 即可。其中 ZCode 的要求如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ZCode 必须是 CDECL 调用规范。&lt;/li&gt;
&lt;li&gt;ZCode 函数最后的 &lt;em&gt;_asm 块，除 #ifdef &lt;/em&gt;DEBUG 包围的之外，必须保留。&lt;/li&gt;
&lt;li&gt;ZCode 中不能使用字符串常量。&lt;/li&gt;
&lt;li&gt;ZCode 中不能调用外部函数。&lt;/li&gt;
&lt;li&gt;ZCode 中可以调用 __forceinline 声明的函数。&lt;/li&gt;
&lt;li&gt;ZCode 中可以使用 CodeZap 中所有 Z 开头的函数。&lt;/li&gt;
&lt;li&gt;ZCode 中的 C++ 代码可以任意添加，只要符合前面的所有条件。&lt;/li&gt;
&lt;li&gt;可以修改  #ifdef _DEBUG 中的汇编代码为你所所要情形。&lt;/li&gt;
&lt;li&gt;可以修改函数的参数（基于上一条为前提）。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;基于以上要求， Viual Studio 2003/2005 中使用，必须在 Project 设置中，关闭缓冲区安全检查。否则将会生成的代码中会调用 security_cookie 函数，导致代码无法在目标文件中正确执行。&lt;/p&gt;

&lt;p&gt;另外，用这些Z函数来写 ShellCode，也是非常高效的，比平时写 C/C++ 程序麻烦一点点而已。&lt;/p&gt;

&lt;p&gt;CodeZap 调用示例：&lt;br/&gt;
CodeZap(TEXT(&quot;C:\ABC.CZ.exe&quot;), TEXT(&quot;C:\ABC.exe&quot;), (PBYTE) ZCode);&lt;/p&gt;

&lt;p&gt;Powered By Yonsm&lt;br/&gt;
WWW.Yonsm.NET&lt;br/&gt;
2007.4.31&lt;/p&gt;

&lt;p&gt;接口函数：&lt;br/&gt;
BOOL CodeZap(PCTSTR ptzDst, PCTSTR ptzSrc, PBYTE pbCode);&lt;br/&gt;
ZAPI HMODULE ZGetKernelHandle();&lt;br/&gt;
ZAPI HMODULE ZGetModuleHandle(PCTSTR ptzModule = NULL);&lt;br/&gt;
ZAPI HMODULE ZSearchModuleHandle(PCTSTR ptzModule, PBYTE pbBase = (PBYTE) 0x70000000, PBYTE pbMax = (PBYTE) 0x80000000);&lt;br/&gt;
ZAPI FARPROC ZGetProcAddress(HMODULE hModule, PCTSTR ptzProc);&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;ZCode 示例&lt;br/&gt;
VOID CDECL ZCode()&lt;br/&gt;
{&lt;br/&gt;
 // KERNEL32&lt;br/&gt;
 HMODULE hKernel32 = ZGetKernelHandle();&lt;/p&gt;

&lt;p&gt; // GetProcAddress&lt;br/&gt;
 TCHAR szGetProcAddress[] = {&#39;G&#39;, &#39;e&#39;, &#39;t&#39;, &#39;P&#39;, &#39;r&#39;, &#39;o&#39;, &#39;c&#39;, &#39;A&#39;, &#39;d&#39;, &#39;d&#39;, &#39;r&#39;, &#39;e&#39;, &#39;s&#39;, &#39;s&#39;, 0};&lt;br/&gt;
 PGetProcAddress pGetProcAddress = (PGetProcAddress) ZGetProcAddress(hKernel32, szGetProcAddress);&lt;br/&gt;
 if (!pGetProcAddress) return;&lt;/p&gt;

&lt;p&gt; // LoadLibrary&lt;br/&gt;
 CHAR szLoadLibrary[] = {&#39;L&#39;, &#39;o&#39;, &#39;a&#39;, &#39;d&#39;, &#39;L&#39;, &#39;i&#39;, &#39;b&#39;, &#39;r&#39;, &#39;a&#39;, &#39;r&#39;, &#39;y&#39;, ZEND};&lt;br/&gt;
 PLoadLibrary pLoadLibrary = (PLoadLibrary) pGetProcAddress(hKernel32, szLoadLibrary);&lt;br/&gt;
 if (!pLoadLibrary) return;&lt;/p&gt;

&lt;p&gt; // USER32&lt;br/&gt;
 TCHAR tzUser32[] = {&#39;U&#39;, &#39;S&#39;, &#39;E&#39;, &#39;R&#39;, &#39;3&#39;, &#39;2&#39;, 0};&lt;br/&gt;
 HMODULE hUser32 = pLoadLibrary(tzUser32);&lt;/p&gt;

&lt;p&gt; // MessageBox&lt;br/&gt;
 CHAR szMessageBox[] = {&#39;M&#39;, &#39;e&#39;, &#39;s&#39;, &#39;s&#39;, &#39;a&#39;, &#39;g&#39;, &#39;e&#39;, &#39;B&#39;, &#39;o&#39;, &#39;x&#39;, ZEND};&lt;br/&gt;
 PMessageBox pMessageBox = (PMessageBox) pGetProcAddress(hUser32, szMessageBox);&lt;/p&gt;

&lt;p&gt; TCHAR tzText[] = {&#39;H&#39;, &#39;a&#39;, &#39;h&#39;, &#39;a&#39;, &#39;,&#39;, &#39; &#39;, &#39;I&#39;, &#39; &#39;, &#39;a&#39;, &#39;m&#39;, &#39; &#39;, &#39;C&#39;, &#39;o&#39;, &#39;d&#39;, &#39;e&#39;, &#39;Z&#39;, &#39;a&#39;, &#39;p&#39;, &#39;!&#39;, 0};&lt;br/&gt;
 TCHAR tzCaption[] = {&#39;C&#39;, &#39;o&#39;, &#39;d&#39;, &#39;e&#39;, &#39;Z&#39;, &#39;a&#39;, &#39;p&#39;, 0};&lt;br/&gt;
 pMessageBox(NULL, tzText, tzCaption, MB_ICONINFORMATION);&lt;/p&gt;

&lt;p&gt; &lt;em&gt;_asm&lt;br/&gt;
 {&lt;br/&gt;
   JMP    &lt;/em&gt;ZCodeEnd;&lt;/p&gt;

&lt;p&gt;_ZJumpOEP:&lt;br/&gt;
   // Jump to OEP: Jump delta will be fixed by CodeZap&lt;br/&gt;
   JMP    $ + 5;&lt;/p&gt;

&lt;h1&gt;ifndef _DEBUG&lt;/h1&gt;

&lt;p&gt;   // Put your own ASM code here&lt;br/&gt;
   PUSHAD;&lt;br/&gt;
   CALL  ZCode;&lt;br/&gt;
   POPAD;&lt;/p&gt;

&lt;h1&gt;endif&lt;/h1&gt;

&lt;p&gt;   JMP    &lt;em&gt;ZJumpOEP;&lt;br/&gt;
&lt;/em&gt;ZCodeEnd:&lt;br/&gt;
 }&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;下载：&lt;br/&gt;
&lt;a href=&quot;/assets/CodeZap.rar&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Search module base  & function address</title>
      <link href="http://example.com/search-module-base-address/"/>
      <updated>2007-04-29T13:08:06+08:00</updated>
      <id>http://example.com/search-module-base-address</id>
      <content type="html">&lt;p&gt;Search module base (e.g.KERNEL32) &amp;amp; function address (e.g. GetProcAddress) (C++, NOT ASM).&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;PVOID GetKernelBase()&lt;br/&gt;
{&lt;br/&gt;
 PBYTE pbBase = (PBYTE) 0x70000000;&lt;br/&gt;
&lt;strong&gt;Retry:&lt;br/&gt;
 &lt;/strong&gt;try&lt;br/&gt;
 {&lt;br/&gt;
   while (pbBase &amp;lt; (PBYTE) 0x80000000)&lt;br/&gt;
   {&lt;br/&gt;
     if (((PIMAGE_DOS_HEADER) pbBase)-&gt;e_magic == IMAGE_DOS_SIGNATURE)&lt;br/&gt;
     {&lt;br/&gt;
       PIMAGE_NT_HEADERS pNTHdr = (PIMAGE_NT_HEADERS) (pbBase + ((PIMAGE_DOS_HEADER) pbBase)-&gt;e_lfanew);&lt;br/&gt;
       if (pNTHdr-&gt;Signature == IMAGE_NT_SIGNATURE)&lt;br/&gt;
       {&lt;br/&gt;
         PIMAGE_EXPORT_DIRECTORY pExpDir = (PIMAGE_EXPORT_DIRECTORY) (pbBase + pNTHdr-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);&lt;br/&gt;
         PDWORD p = (PDWORD) (pbBase + pExpDir-&gt;Name);&lt;br/&gt;
         if ((p[0] == &#39;NREK&#39;) &amp;amp;&amp;amp; (p[1] == &#39;23LE&#39;))&lt;br/&gt;
         {&lt;br/&gt;
           return pbBase;&lt;br/&gt;
         }&lt;br/&gt;
       }&lt;br/&gt;
     }&lt;br/&gt;
     pbBase += 0x1000;&lt;br/&gt;
   }    &lt;br/&gt;
 }&lt;br/&gt;
 &lt;strong&gt;except (EXCEPTION_EXECUTE_HANDLER)&lt;br/&gt;
 {&lt;br/&gt;
   pbBase += 0x1000;&lt;br/&gt;
   goto &lt;/strong&gt;Retry;&lt;br/&gt;
 }&lt;br/&gt;
 return NULL;&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;typedef FARPROC (WINAPI *PGBA)(HMODULE hModule, PCTSTR pszName);&lt;/p&gt;

&lt;p&gt; // Lookup GetProcAddress funtion&lt;br/&gt;
 PGBA pGetProcAddress = NULL;&lt;br/&gt;
 PBYTE pbBase = (PBYTE) hKernel32;&lt;br/&gt;
 if (((PIMAGE_DOS_HEADER) pbBase)-&gt;e_magic == IMAGE_DOS_SIGNATURE)&lt;br/&gt;
 {&lt;br/&gt;
   PIMAGE_NT_HEADERS pNTHdr = (PIMAGE_NT_HEADERS) (pbBase + ((PIMAGE_DOS_HEADER) pbBase)-&gt;e_lfanew);&lt;br/&gt;
   if (pNTHdr-&gt;Signature == IMAGE_NT_SIGNATURE)&lt;br/&gt;
   {&lt;br/&gt;
     PIMAGE_EXPORT_DIRECTORY pExpDir = (PIMAGE_EXPORT_DIRECTORY) (pbBase + pNTHdr-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);&lt;br/&gt;
     PDWORD pdwNames = (PDWORD) (pbBase + pExpDir-&gt;AddressOfNames);&lt;br/&gt;
     for (UINT i = 0; i &amp;lt; pExpDir-&gt;NumberOfNames; i++)&lt;br/&gt;
     {&lt;br/&gt;
       // GetProcAddress&lt;br/&gt;
       PDWORD p = (PDWORD) (pbBase + pdwNames[i]);&lt;br/&gt;
       if (p &amp;amp;&amp;amp; (p[0] == &#39;PteG&#39;) &amp;amp;&amp;amp; (p[1] == &#39;Acor&#39;) &amp;amp;&amp;amp; (p[2] == &#39;erdd&#39;))&lt;br/&gt;
       {&lt;br/&gt;
         PDWORD pdwFunctions = (PDWORD) (pbBase + pExpDir-&gt;AddressOfFunctions);&lt;br/&gt;
         pGetProcAddress = (PGBA) (pbBase + pdwFunctions[i]);&lt;br/&gt;
         break;&lt;br/&gt;
       }&lt;br/&gt;
     }&lt;br/&gt;
   }&lt;br/&gt;
 }&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>CeleSIM - Wndows Mobile SIM 卡联系人编辑工具</title>
      <link href="http://example.com/celesim/"/>
      <updated>2007-04-26T08:03:51+08:00</updated>
      <id>http://example.com/celesim</id>
      <content type="html">&lt;p&gt;比现有的所有的 SIM 卡编辑器都方便。&lt;br/&gt;
但这只是一个SIM卡联系人，并非每个人都需要的。&lt;br/&gt;
暂时没有更多的介绍，有多要的可以在 IOICN 或 PDAFans 论坛上搜索。&lt;/p&gt;

&lt;p&gt;http://bbs.pdafans.com/thread-338843-1-1.html&lt;br/&gt;
http://www.ioicn.com.cn/bbs/viewthread.php?tid=199975&lt;/p&gt;

&lt;p&gt;X-Powered by RenYang &amp;amp; Yonsm&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Aeon Variable/永生变量 - 保存程序设置到EXE本身</title>
      <link href="http://example.com/aeon-variable/"/>
      <updated>2007-04-21T14:00:45+08:00</updated>
      <id>http://example.com/aeon-variable</id>
      <content type="html">&lt;p&gt;全宇宙人中的编程人员都知道代码中有 局部变量/Local Variable、Global Variable/全局变量（还有Heap/Const，全局变量可细分 .data .bss等），各司其职，各有用处。&lt;/p&gt;

&lt;p&gt;这里我提出一个自己胡诌出来的全新变量类型：Aeon Variable，永生变量——比全局变量更拓展一层，变量在程序退出后再次运行，这些变量还保存在上次运行的值——可千万别说从注册表啊什么的重新读取一遍就行了，我这是透明的全新的方法。我已经用两种方法实现了 Aeon Variable：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;把数据保存在 EXE 文件最后：这个和保存在注册表之类其实差不多，没新意了。&lt;/li&gt;
&lt;li&gt;代码中定义一个新的 Data Segment，比如叫 .AEON 吧，只要是想永生的变量，都放在这里面：&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;HWND g_hWnd = NULL; // Global Variable, NOT AEON!&lt;/p&gt;

&lt;h1&gt;pragma data_seg(AEON_SEG) // AEON Variable&lt;/h1&gt;

&lt;p&gt;INT g_iStartPage = 0;&lt;br/&gt;
TCHAR tzName[MAX_PATH] = TEXT(&quot;Yonsm&quot;);&lt;/p&gt;

&lt;h1&gt;pragma data_seg() // End of AEON Variable&lt;/h1&gt;

&lt;!-- more --&gt;


&lt;p&gt;
OK，然后在 WinMain 开始调用一下我的 AeonInit(hInstance)，WinMain 结束前调用 AeonExit(hInstance)。哈哈，这些变量就永生了，千秋万载一统江湖，仙福永享寿与天齐，万税万税万万税。&lt;/p&gt;

&lt;p&gt;实现的思路是这样的，先从 AeonExit 说起：&lt;br/&gt;
  1). 复制当前运行的 &lt;em&gt;.EXE （DLL 也即将支持）为 &lt;/em&gt;.EXE.AEON&lt;br/&gt;
  2). 搜索当前模块中的 PE Section，找到 .AEON Data Segment 后，把这个段写入到到 &lt;em&gt;.EXE.AEON 中，这样永生变量就更新到了 &lt;/em&gt;.EXE.AEON 中。&lt;br/&gt;
 3). 运行 *.EXE.AEON。&lt;br/&gt;
 4). 立即、马上以及赶快退出！&lt;/p&gt;

&lt;p&gt;再说 AeonInit：&lt;br/&gt;
 1). 判断当前运行的可执行文件名是否是 .AEON，如果是，嘿嘿，自己运行的啰（而不是用户运行的）；如果不是则正常启动程序。&lt;br/&gt;
 2). 把 &lt;em&gt;.EXE 删除掉，把 &lt;/em&gt;.EXE.AEON 重命名为 *.EXE。&lt;br/&gt;
 3). 重复步骤 2，直到成功。&lt;/p&gt;

&lt;p&gt;哈哈，真佩服自己的奇思妙想，而且实现得天衣无缝。&lt;/p&gt;

&lt;p&gt;测试了一下，WinALL 都能用。但 WinCE 中不能用方法2，因为无法查找正在运行的 PE 的内存中的 Image Base（压根就没有完整的 MZ 开始），所以无法找到 .AEON Segment （或许根本就没有 Section Header 在内存中）。当方法一在 WinCE 中可用。&lt;/p&gt;

&lt;p&gt;这样，如此这般，就能做出真正真正的“绿色”软件了！哈哈……妙！&lt;/p&gt;

&lt;p&gt;代码下载（普通函数实现，但特地把文件扩展名特地使用 .h 而不是 .cpp，期望强制使用者在 WinMain 或 DllMain 之类的 .cpp 中 #include &quot;Aeon.h&quot; ，且只 #include 一次）：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/Aeon.h&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>绿色淡雅模板更新至 2.0.3 适用</title>
      <link href="http://example.com/elegant-green-template-for-bo-blog/"/>
      <updated>2007-04-15T09:28:34+08:00</updated>
      <id>http://example.com/elegant-green-template-for-bo-blog</id>
      <content type="html">&lt;p&gt;我的 BLOG 是基于 BO-BLOG 2.0.3 SP1 的，界面风格是我自己做的，如果碰巧你也用 BO-BLOG，且我的 BLOG 风格还看的过去，可以在这里下载我的模板。&lt;/p&gt;

&lt;p&gt;这个模板其实也是基于官方的，有些些精妙之处就在于我仅仅修改了 style.css 文件，其他的什么都没动，完全是用 CSS 就测彻彻底底地改变了界面风格。&lt;/p&gt;

&lt;p&gt;据称在 IE7 下显示有问题，一直都没改。昨天安装了 IE7，顺便改了一下这个界面风格的 BUG，IE7 的用户浏览我的 BLOG 看起来应该没问题了。同时已测试 Opera 9.2 和  Firefox 2.0，显示效果也没问题。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;顺便评论一下 IE7，2003 下使用，感觉风格与 2003 很不适应，决定待会儿恢复系统回到 IE6 状态，正如我没有选择 Office 2007 一样——还是等着用 Vista 的时候再说吧——我现在的机器，决定不用 Vista。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/Template.Yonsm.rar&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>CeleSetup - ROM 定制扩展命令解释工具</title>
      <link href="http://example.com/celesetup/"/>
      <updated>2007-04-09T16:20:28+08:00</updated>
      <id>http://example.com/celesetup</id>
      <content type="html">&lt;p&gt;欢迎使用 CeleSetup，它将使你能够轻松愉快地定制 Windows Mobile ROM，使您的 ROM 具备最好的扩充性和伸缩性！&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;特点&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;◎ 短小精干，运行迅速。
◎ 支持常规的扩展设置命令。
◎ 支持调用外部 EXE 和 DLL 函数。
◎ 支持格式统一的命令行参数和命令文件。
◎ 细微周到的功能支持。功能及其强大。
◎ 源代码公开，方便更改定制。在源代码中增加扩展命令非常容易。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;使用&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;◎ 本程序与 XCMD（专为 Windows XPE 而作，详细请看 bbs.wuyou.com 论坛） 具有类似的命令格式和功能，但 CeleSetup 只是为 Windows Mobile 初始化设置为专门做的，可以方便地 ROM 初始化当中的各种操作。&lt;/p&gt;

&lt;p&gt;◎ 使用命令行参数：例如，要创建快捷方式，执行“CeleSetup.exe LINK %S\程序\测试程序.lnk,%W\Test.exe”即可。&lt;/p&gt;

&lt;p&gt;◎ 使用命令文件：例如，“CeleSetup.exe LOAD \Storage Card*.cst”。&lt;/p&gt;

&lt;p&gt;◎ 不用命令行参数，直接执行本程序，将显示版本信息。&lt;/p&gt;

&lt;p&gt;◎ 命令参数支持宏替换（如“%W\X.TXT”）；命令不区分大小写；尖括号“&amp;lt;&gt;”内的参数表示必须输入，方括号“[]”内的表示可以省略。&lt;/p&gt;

&lt;p&gt;◎ 命令文件中，支持以下宏替换（如果需要在参数中使用 % 本身，则需要用两个 % 代替，如 %1 要写成 %%1）：&lt;/p&gt;

&lt;p&gt;   %A=APPDATA，可能为 \Application Data
   %D=DESKTOP，可能为 \Windows\Desktop
   %M=PERSONAL，可能为 \My Documents
   %U=STARTUP，可能是 \Windows\StartUp
   %W=WINDOWS，可能是 \Windows
   %P=PROGRAMS，可能是 \Windwos\程序
   %S=STARTMENU，可能是 \WIndows\“开始”菜单
   %F=PROGRAM FILES 可能是 \Program Files
   %C=在命令文件中使用，表示命令文件所在的目录；在命令行中使用，表示 CeleSetup 所在目录&lt;/p&gt;

&lt;p&gt;◎ 具体用法可以参考 Sample 中的 csx 文件，也可以参考我定制的  Prophet WM5 ROM。&lt;/p&gt;

&lt;p&gt;◎ 下面是一般性用法：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Windows Mobile 硬起后解释 InitFlashFiles.dat：创建系统目录；显示欢迎和屏幕调整界面；加载 CeleTask.lnk -&gt;“CeleSetup.exe *”。&lt;/li&gt;
&lt;li&gt;CeleSetup 加载根目录下所有子目录下的 *.csx：自动扫描到我做的 CeleSetp.csx。&lt;/li&gt;
&lt;li&gt;CeleSetup.csx 内的命令：创建基本的快捷方式；解压缩 CeleSetup.tgz 压缩包中的文件到相应位置；注册 .csx 类型的扩展关联，以后在资源管理器中点击任何 .csx 文件就会自动被加载；加载 \Storage* 和 \Storage Card*，即扫描 SD 卡上的子目录中所有 .csx 文件。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 SD 卡中放个 CeleCard.csx 和 CeleCard.reg，自动把卡上的软件的快捷方式添加到开始菜单-&gt;程序-&gt;工具中，并把相应的设置导入注册表中。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;命令&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;■ [LOAD ][文件路径|目录*|目录*.cst]&lt;/p&gt;

&lt;p&gt; ◎ 功能：按顺序逐条运行命令文件中的命令。&lt;/p&gt;

&lt;p&gt; ◎ 参数：指定文件的路径。如果省略，将自动搜索每个分区根目录中的 XCMD.INI（注意防止嵌套调用）。&lt;/p&gt;

&lt;p&gt; ◎ 示例：LOAD *&lt;/p&gt;

&lt;p&gt; ◎ 备注：&lt;/p&gt;

&lt;p&gt;   ※ 每条命令单独一行。
   ※ 命令是完全按顺序执行的。
   ※ 不正确的命令或空行将忽略不计。
   ※ 推荐使用 UNICODE 格式文本文件。
   ※ 注释必须单独放一行，推荐使用“//”作为注释起始。
   ※ 第一行和最后一行必须是空行或注释，否则可能将被忽略。
   ※ 在命令文件中可以使用环境变量“%C”表示命令文件所在目录。
   ※ 如果文件路径中的最后两个字符是“*”，则自动搜索该目录中所有子目录下的 &lt;em&gt;.cst 文件，如“LOAD *”。
   ※ 如果文件路径中的含有通配符“&lt;/em&gt;”或“?”，则自动搜索该目录中的匹配文件，如“LOAD \Storage\Cele*.cst”。&lt;/p&gt;

&lt;p&gt;■ EXEC [=][,参数]&lt;/p&gt;

&lt;p&gt; ◎ 功能：执行 EXE 程序。&lt;/p&gt;

&lt;p&gt; ◎ 参数：指定 EXE 路径和参数。&lt;/p&gt;

&lt;p&gt; ◎ 示例：EXEC WCELoad.exe,/nogui “%C\CeleSetup.cab”&lt;/p&gt;

&lt;p&gt; ◎ 备注：前导“=”表示等待执行完成。&lt;/p&gt;

&lt;p&gt;■ CALL [,函数名称][,[#]参数1][,[#]参数2][,[#]参数3][,[#]参数4]&lt;/p&gt;

&lt;p&gt; ◎ 功能：调用 DLL 函数。&lt;/p&gt;

&lt;p&gt; ◎ 参数：指定 DLL 路径、函数名称和参数。如果省略函数名称，将调用“DllRegisterServer”。参数默认为 UNICODE 字符串，如果以“#”前导则表示整数；最多支持四个函数参数。&lt;/p&gt;

&lt;p&gt; ◎ 示例：CALL SHELL32.DLL,DllInstall,#1,I&lt;/p&gt;

&lt;p&gt; ◎ 备注：函数必须以 STDCALL 方式导出（不明白什么意思的话，就当没任何问题）。&lt;/p&gt;

&lt;p&gt;■ REGI &amp;lt;\子项&gt;[键值][=[#]数据]&lt;/p&gt;

&lt;p&gt; ◎ 功能：设置或删除注册表数据。&lt;/p&gt;

&lt;p&gt; ◎ 参数：&lt;/p&gt;

&lt;p&gt;   ※ 子项              所选 ROOTKEY 下注册表项的完整名。&lt;/p&gt;

&lt;p&gt;   ※ 键值              要操作的键值。如果省略，则操作默认键值；如果为“!”且没有“=”，则用于删除整个子项。&lt;/p&gt;

&lt;p&gt;   ※ 数据              要设置的数据。如果没有“=”则删除。如果前导“#”则表示 REG_DWORD 整数类型的数据，如“#0×20”；如果前导“@”则为 REG_BINARY，如“@23 34 90 255”；否则为字符串。&lt;/p&gt;

&lt;p&gt; ◎ 示例：REGI HKCU\Control Panel\Desktop\Wallpaper=%SystemRoot%\WALL.JPG&lt;/p&gt;

&lt;p&gt; ◎ 备注：请命令比较复杂，请仔细看说明。如果 RESCO 的注册表 DLL 插件 RRegShell.dll 存在，该命令还支持导入注册表文件，例如“REGI %C*.reg”。&lt;/p&gt;

&lt;p&gt;■ FILE &amp;lt;文件路径&gt;[&amp;lt;操作符&gt;[目标路径]&lt;/p&gt;

&lt;p&gt; ◎ 功能：操作文件或目录。&lt;/p&gt;

&lt;p&gt; ◎ 参数：指定源文件路径和目标路径，支持通配符，可以用分号同时操作多个文件。操作符“-}”、“=}”分别对应移动、复制，没有操作符则表示删除操作。&lt;/p&gt;

&lt;p&gt; ◎ 示例：FILE \Temp*.txt&lt;/p&gt;

&lt;p&gt; ◎ 备注：无。&lt;/p&gt;

&lt;p&gt;■ LINK &amp;lt;快捷方式路径&gt;&amp;lt;,目标路径&gt;[,运行参数][,图标路径][,图标索引]&lt;/p&gt;

&lt;p&gt; ◎ 功能：创建快捷方式。&lt;/p&gt;

&lt;p&gt; ◎ 参数：&lt;/p&gt;

&lt;p&gt;   ※ 快捷方式路径      指定要生成的快捷方式的路径，不需要“.LNK”扩展名。&lt;/p&gt;

&lt;p&gt;   ※ 目标路径          指定快捷方式的目标文件或目录。&lt;/p&gt;

&lt;p&gt;   ※ 运行参数          目标程序运行参数。&lt;/p&gt;

&lt;p&gt;   ※ 图标路径          快捷方式图标的路径。&lt;/p&gt;

&lt;p&gt;   ※ 图标索引          快捷方式图标的在文件资源中的标识（不填写则默认）。&lt;/p&gt;

&lt;p&gt; ◎ 示例：LINK %S\电话,CProg.exe,,ShellRes.dll,1024&lt;/p&gt;

&lt;p&gt; ◎ 备注：无。&lt;/p&gt;

&lt;p&gt;■ XZIP &amp;lt;文件路径&gt;[,目标目录]&lt;/p&gt;

&lt;p&gt; ◎ 功能：解压缩 TAR GZ 文件到指定目录。&lt;/p&gt;

&lt;p&gt; ◎ 参数：指定源文件路径和目标路径，如果没有目标目录，将解压缩到根目录。&lt;/p&gt;

&lt;p&gt; ◎ 示例：XZIP %C\CeleSetup.tgz r/&gt;
 ◎ 备注：此命令用来解压缩文件到指定目录，从而避免 InitFlashFiles.dat 中大量的文件拷贝操作的命令。TAR GZ 格式可以用 WinRAR 来压缩，然后用 ArcConvert 转换成 TAR GZ 格式。&lt;/p&gt;

&lt;p&gt;■ SEND &amp;lt;按键代码1[_|^]&gt;[,按键代码2][,按键代码3]…&lt;/p&gt;

&lt;p&gt; ◎ 功能：模拟按键。&lt;/p&gt;

&lt;p&gt; ◎ 参数：虚拟按键代码，如 VK_NUMLOCK，请参相关考编程文档。如果按键代码以“_”结束，则仅模拟按键按下；“^”则仅模拟按键弹起；否则模拟按下并弹起。很生动吧：）&lt;/p&gt;

&lt;p&gt; ◎ 示例：SEND 0x12&lt;em&gt;,0x09&lt;/em&gt;,0×09^,0×12^&lt;/p&gt;

&lt;p&gt; ◎ 备注：上面的示例模拟 Alt+Tab。按键代码支持 16 进制，如“SEND 0×90”表示按下 NumLock 键。&lt;/p&gt;

&lt;p&gt;■ WAIT &amp;lt;时间&gt;&lt;/p&gt;

&lt;p&gt; ◎ 功能：等待指定时间后再继续执行命令。&lt;/p&gt;

&lt;p&gt; ◎ 参数：指定时间，单位为毫秒。&lt;/p&gt;

&lt;p&gt; ◎ 示例：WAIT 2000&lt;/p&gt;

&lt;p&gt; ◎ 备注：可以在执行 SHELL 后等一段时间，然后执行“LOGO”命令关闭登录画面；或者执行其它操作。&lt;/p&gt;

&lt;p&gt;■ KILL &amp;lt;进程名称&gt;&lt;/p&gt;

&lt;p&gt; ◎ 功能：强制终止指定的进程。&lt;/p&gt;

&lt;p&gt; ◎ 参数：进程名称，即 EXE 文件名（不包含路径）。&lt;/p&gt;

&lt;p&gt; ◎ 示例：KILL WinLogon&lt;/p&gt;

&lt;p&gt; ◎ 备注：此命令将终止与“进程名称”前部分匹配的所有进程，所以如果省略参数，可能将全部进程关闭。&lt;/p&gt;

&lt;p&gt;■ SHUT [G|P|K|H|R]&lt;/p&gt;

&lt;p&gt; ◎ 功能：关闭、重起或硬起设备。&lt;/p&gt;

&lt;p&gt; ◎ 参数：关闭、重起或硬起设备。默认为重新启动。&lt;/p&gt;

&lt;p&gt; ◎ 示例：SHUT&lt;/p&gt;

&lt;p&gt; ◎ 备注：分别表示 GwesPowerOffSystem()/EWX_POWEROFF/keybd_event/SetCleanRebootFlag/KernelIoControl/EWX_REBOOT 方式执行。&lt;/p&gt;

&lt;p&gt;■ XLOG [文件路径]&lt;/p&gt;

&lt;p&gt; ◎ 功能：启用日志文件。日志文件可以记录每条命令的执行结果，帮助用户验证命令文件的正确性。&lt;/p&gt;

&lt;p&gt; ◎ 参数：日志文件路径。&lt;/p&gt;

&lt;p&gt; ◎ 示例：LOGO \CeleSetup.LOG&lt;/p&gt;

&lt;p&gt; ◎ 备注：此命令不能在命令行参数中使用（必须在命令文件中使用）。命令文件结束之前，必须调用一次不带参数的“XLOG”命令，以关闭日志文件。公开发布的 ROM 中建议不要启用日志文件。&lt;/p&gt;

&lt;p&gt;■ BEEP [类型]&lt;/p&gt;

&lt;p&gt; ◎ 功能：播放通知声。&lt;/p&gt;

&lt;p&gt; ◎ 参数：声音类型。默认为 0，具体意义与 MessageBeep 相同，请查阅相关文档或实际尝试。&lt;/p&gt;

&lt;p&gt; ◎ 示例：BEEP&lt;/p&gt;

&lt;p&gt; ◎ 备注：无。&lt;/p&gt;

&lt;p&gt;■ ECHO &amp;lt;提示文字&gt;[,标题][,类型]&lt;/p&gt;

&lt;p&gt; ◎ 功能：弹出消息提示框。&lt;/p&gt;

&lt;p&gt; ◎ 参数：分别是提示文字和对话框标题；以及对话框类型，与 MessageBox 意义相同，比如下面是图标类型：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define MB_ICONERROR        0×10
#define MB_ICONQUESTION     0×20
#define MB_ICONWARNING      0×30
#define MB_ICONINFORMATION  0×40
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; ◎ 示例：LOGO \CeleSetup.LOG&lt;/p&gt;

&lt;p&gt; ◎ 备注：此命令不能在命令行参数中使用（必须在命令文件中使用）。命令文件结束之前，必须调用一次不带参数的“XLOG”命令，以关闭日志文件。公开发布的 ROM 中建议不要启用日志文件。&lt;/p&gt;

&lt;p&gt;■ IFEX [!]&amp;lt;路径&gt;&amp;lt;,命令&gt;&lt;/p&gt;

&lt;p&gt; ◎ 功能：判断路径是否存在，决定是否执行命令。&lt;/p&gt;

&lt;p&gt; ◎ 参数：&lt;/p&gt;

&lt;p&gt;   ※ 路径              判断路径是否存在。前导“!”表示不存在才执行。&lt;/p&gt;

&lt;p&gt;   ※ 命令              要执行的命令。&lt;/p&gt;

&lt;p&gt; ◎ 示例：IFEX \ABC.ini SHUT&lt;/p&gt;

&lt;p&gt; ◎ 备注：本命令可以嵌套使用，判断多个条件。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;致谢&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;◎ 感谢 PANFANS 论坛 提供的讨论场所。
◎ 感谢热心的 Kavana 的意见并制作了精美图标。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;许可&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;◎ 本程序及其源代码是可以免费获取的。
◎ 如果您使用或修改了其中任何的源代码，则必须把使用这些源代码的项目以及项目内的所有源代码和文档公开。否则禁止使用本程序源代码的任何部分。
◎ 您可以复制、分发和传播无限制数量的软件产品，但您必须保证每一份复制、分发和传播都必须是完整和真实的，包括所有有关本软件产品的软件、电子文档，版权和商标宣言。
◎ 作者特此申明对本软件产品之使用不提供任何保证，不对任何用户保证本软件产品的适用性，不保证无故障产生；亦不对任何用户使用此软件所遭遇到的任何理论上的或实际上的损失承担 责任。
◎ 如果您使用本软件，即表示已经默认接受了此协议。&lt;/p&gt;

&lt;p&gt;要获取更多信息，请访问 WWW.YONSM.NET&lt;/p&gt;

&lt;p&gt;Yonsm
Yonsm@163.com
WWW.Yonsm.NET
2007.4.2，杭州&lt;/p&gt;

&lt;p&gt;下载：（已过期，请参看更强大的 CeleCommand）&lt;/p&gt;

&lt;p&gt;更新了，提供 Setup DLL 的版本，这下要制作功能强大的 CAB 包方便多了，比HTC的什么CustomizeTools垃圾好多了。用来做CAB的SetupDLL，无穷强大。DLL自动加载*就是所有子目录中的.csx）&lt;/p&gt;

&lt;p&gt;注意：仅在 O2 XDA Neo Pocket PC Phone WM5 中测试通过，但理论上适用于所有 Windows Mobile 系统，包括 Smartphone/ Pocket PC 2003/5.0/6.0&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>用 ZLib 解压缩 TAR GZ 的最简单的过程和代码</title>
      <link href="http://example.com/using-zlib-decompression-tar-gz/"/>
      <updated>2007-04-02T13:47:53+08:00</updated>
      <id>http://example.com/using-zlib-decompression-tar-gz</id>
      <content type="html">&lt;p&gt;看代码，不多说，应该很简单，由于 ZLib 的可移植性，所以在 PC 和 Windows Mobile 下不加修改即可便已通过。&lt;!-- more --&gt;详细代码下载可以参考 CeleSetup 的帖子。&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;

&lt;h1&gt;include &quot;UniBase.h&quot;&lt;/h1&gt;

&lt;h1&gt;include &quot;ZLib/ZLib.h&quot;&lt;/h1&gt;

&lt;h1&gt;pragma comment(lib, &quot;ZLib/ZLib.lib&quot;)&lt;/h1&gt;

&lt;p&gt;// Values used in typeflag field&lt;/p&gt;

&lt;h1&gt;define REGTYPE       &#39;0&#39;       // regular file&lt;/h1&gt;

&lt;h1&gt;define AREGTYPE      &#39;\0&#39;      // regular file&lt;/h1&gt;

&lt;h1&gt;define LNKTYPE       &#39;1&#39;       // link&lt;/h1&gt;

&lt;h1&gt;define SYMTYPE       &#39;2&#39;       // reserved&lt;/h1&gt;

&lt;h1&gt;define CHRTYPE       &#39;3&#39;       // character special&lt;/h1&gt;

&lt;h1&gt;define BLKTYPE       &#39;4&#39;       // block special&lt;/h1&gt;

&lt;h1&gt;define DIRTYPE       &#39;5&#39;       // directory&lt;/h1&gt;

&lt;h1&gt;define FIFOTYPE      &#39;6&#39;       // FIFO special&lt;/h1&gt;

&lt;h1&gt;define CONTTYPE      &#39;7&#39;       // reserved&lt;/h1&gt;

&lt;p&gt;//  GNU tar extensions&lt;/p&gt;

&lt;h1&gt;define GNUTYPE_DUMPDIR   &#39;D&#39;       // file names from dumped directory&lt;/h1&gt;

&lt;h1&gt;define GNUTYPE_LONGLINK  &#39;K&#39;       // long link name&lt;/h1&gt;

&lt;h1&gt;define GNUTYPE_LONGNAME  &#39;L&#39;       // long file name&lt;/h1&gt;

&lt;h1&gt;define GNUTYPE_MULTIVOL  &#39;M&#39;       // continuation of file from another volume&lt;/h1&gt;

&lt;h1&gt;define GNUTYPE_NAMES   &#39;N&#39;       // file name that does not fit into main hdr&lt;/h1&gt;

&lt;h1&gt;define GNUTYPE_SPARSE    &#39;S&#39;       // sparse file&lt;/h1&gt;

&lt;h1&gt;define GNUTYPE_VOLHDR    &#39;V&#39;       // tape/volume hdr&lt;/h1&gt;

&lt;h1&gt;define MAX_BLOCK 512&lt;/h1&gt;

&lt;h1&gt;define MAX_FNAME 100&lt;/h1&gt;

&lt;p&gt;struct TARHDR&lt;br/&gt;
{&lt;br/&gt;
 CHAR name[100];               //   0&lt;br/&gt;
 CHAR mode[8];                 // 100&lt;br/&gt;
 CHAR uid[8];                  // 108&lt;br/&gt;
 CHAR gid[8];                  // 116&lt;br/&gt;
 CHAR size[12];                // 124&lt;br/&gt;
 CHAR mtime[12];               // 136&lt;br/&gt;
 CHAR chksum[8];               // 148&lt;br/&gt;
 CHAR typeflag;                // 156&lt;br/&gt;
 CHAR linkname[100];           // 157&lt;br/&gt;
 CHAR magic[6];                // 257&lt;br/&gt;
 CHAR version[2];              // 263&lt;br/&gt;
 CHAR uname[32];               // 265&lt;br/&gt;
 CHAR gname[32];               // 297&lt;br/&gt;
 CHAR devmajor[8];             // 329&lt;br/&gt;
 CHAR devminor[8];             // 337&lt;br/&gt;
 CHAR prefix[155];             // 345&lt;br/&gt;
};&lt;/p&gt;

&lt;p&gt;typedef union _TARBUF&lt;br/&gt;
{&lt;br/&gt;
 TARHDR hdr;&lt;br/&gt;
 CHAR buf[MAX_BLOCK];&lt;br/&gt;
}&lt;br/&gt;
TARBUF, *PTARBUF;&lt;/p&gt;

&lt;p&gt;// Convert octal digits to INT&lt;br/&gt;
INT GetOct(PSTR p,INT iWidth)&lt;br/&gt;
{&lt;br/&gt;
 INT iResult = 0;&lt;br/&gt;
 while (iWidth--)&lt;br/&gt;
 {&lt;br/&gt;
   CHAR c = *p++;&lt;br/&gt;
   if (c == 0)&lt;br/&gt;
   {&lt;br/&gt;
     break;&lt;br/&gt;
   }&lt;br/&gt;
   if (c == &#39; &#39;)&lt;br/&gt;
   {&lt;br/&gt;
     continue;&lt;br/&gt;
   }&lt;br/&gt;
   if (c &amp;lt; &#39;0&#39; || c &gt; &#39;7&#39;)&lt;br/&gt;
   {&lt;br/&gt;
     return -1;&lt;br/&gt;
   }&lt;br/&gt;
   iResult = iResult * 8 + (c - &#39;0&#39;);&lt;br/&gt;
 }&lt;br/&gt;
 return iResult;&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;INT XTar(PTSTR ptzCmd)&lt;br/&gt;
{&lt;br/&gt;
 PTSTR ptzOutDir = ptzCmd;&lt;br/&gt;
 for (; &lt;em&gt;ptzOutDir; ptzOutDir++)&lt;br/&gt;
 {&lt;br/&gt;
   if (&lt;/em&gt;ptzOutDir == &#39;,&#39;)&lt;br/&gt;
   {&lt;br/&gt;
     *ptzOutDir++ = 0;&lt;br/&gt;
     break;&lt;br/&gt;
   }&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt; CHAR szPath[MAX_BLOCK];&lt;br/&gt;
 UStrToAStr(szPath, ptzCmd, MAX_PATH);&lt;br/&gt;
 gzFile gz = gzopen(szPath,&quot;rb&quot;);&lt;br/&gt;
 if (!gz)&lt;br/&gt;
 {&lt;br/&gt;
   return -1;&lt;br/&gt;
 }&lt;/p&gt;

&lt;p&gt; INT iGetHeader = 1;&lt;br/&gt;
 INT iRemaining = 0;&lt;br/&gt;
 BOOL bFail = FALSE;&lt;br/&gt;
 HANDLE hFile = NULL;&lt;br/&gt;
 TCHAR tzName[MAX_PATH];&lt;br/&gt;
 do&lt;br/&gt;
 {&lt;br/&gt;
   TARBUF buf;&lt;br/&gt;
   INT iLen = gzread(gz, &amp;buf;, MAX_BLOCK);&lt;br/&gt;
   if (iLen &amp;lt; 0)&lt;br/&gt;
   {&lt;br/&gt;
     return -2;&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   // Always expect complete blocks to process the tar information.&lt;br/&gt;
   if (iLen != MAX_BLOCK)&lt;br/&gt;
   {&lt;br/&gt;
     bFail = TRUE;&lt;br/&gt;
     iRemaining = 0;&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   // If we have to get a tar header&lt;br/&gt;
   if (iGetHeader &gt;= 1)&lt;br/&gt;
   {&lt;br/&gt;
     // if we met the end of the tar or the end-of-tar block, we are done&lt;br/&gt;
     if (iLen == 0 || buf.hdr.name[0] == 0)&lt;br/&gt;
     {&lt;br/&gt;
       break;&lt;br/&gt;
     }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; if (iGetHeader == 1)  
 {  
   UAStrToStr(tzName, buf.hdr.name, MAX_PATH);  
   UStrRep(tzName, &#39;/&#39;, &#39;\\&#39;);  
 }  
 else  
 {  
   iGetHeader = 1;  
 }  

 // Act according to the type flag  
 switch (buf.hdr.typeflag)  
 {  
 case DIRTYPE:  
   TCHAR tzPath[MAX_PATH];  
   UStrPrint(tzPath, TEXT(&quot;%s\\%s\\&quot;), ptzOutDir, tzName);  
   UDirCreate(tzPath);  
   break;  

 case REGTYPE:  
 case AREGTYPE:  
   iRemaining = GetOct(buf.hdr.size, 12);  
   if (iRemaining == -1)  
   {  
     bFail = TRUE;  
     break;  
   }  
   else  
   {  
     UStrPrint(tzPath, TEXT(&quot;%s\\%s&quot;), ptzOutDir, tzName);  
     UDirCreate(tzPath);  
     hFile = UFileOpen(tzPath, UFILE_WRITE);  
   }  
   iGetHeader = 0;  
   break;  

 case GNUTYPE_LONGLINK:  
 case GNUTYPE_LONGNAME:  
   iRemaining = GetOct(buf.hdr.size, 12);  
   if (iRemaining &amp;lt; 0 || iRemaining &amp;gt;= MAX_BLOCK)  
   {  
     bFail = TRUE;  
     break;  
   }  
   iLen = gzread(gz, szPath, MAX_BLOCK);  
   if (iLen &amp;lt; 0)  
   {  
     return -4;  
   }  
   if (szPath[MAX_BLOCK - 1] != 0 || (INT) strlen(szPath) &amp;gt; iRemaining)  
   {  

  bFail = TRUE;  
     break;  
   }  
   iGetHeader = 2;  
   break;  
 }  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;   }&lt;br/&gt;
   else&lt;br/&gt;
   {&lt;br/&gt;
     UINT uSize = (iRemaining &gt; MAX_BLOCK) ? MAX_BLOCK : iRemaining;&lt;br/&gt;
     if (hFile)&lt;br/&gt;
     {&lt;br/&gt;
       UFileWrite(hFile, &amp;buf;, uSize);&lt;br/&gt;
     }&lt;br/&gt;
     iRemaining -= uSize;&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   if (iRemaining == 0)&lt;br/&gt;
   {&lt;br/&gt;
     iGetHeader = 1;&lt;br/&gt;
     if (hFile)&lt;br/&gt;
     {&lt;br/&gt;
       UFileClose(hFile);&lt;br/&gt;
       hFile = NULL;&lt;br/&gt;
     }&lt;br/&gt;
   }&lt;br/&gt;
 }&lt;br/&gt;
 while (!bFail);&lt;/p&gt;

&lt;p&gt; gzclose(gz);&lt;br/&gt;
 return 0;&lt;br/&gt;
}
`&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>定制 Windows Mobile ROM 中的 Default.hv 注册表文件</title>
      <link href="http://example.com/default-hv-registry-file-in-cooking-rom/"/>
      <updated>2007-03-28T08:39:02+08:00</updated>
      <id>http://example.com/default-hv-registry-file-in-cooking-rom</id>
      <content type="html">&lt;p&gt;定制ROM相信很多人多做过了，编辑其中的注册表是一件很麻烦的事。经过一番摸索，终于找到了一条比较舒服的捷径，简述如下：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一、使用 RGUComp 导出 hv 为 rgu&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ECHO Windows Registry Editor Version 5.00&gt;default.reg&lt;br/&gt;
RGUComp.exe -o default.hv -nologo&gt;&gt;default.reg&lt;/p&gt;

&lt;p&gt;用UltraEdit把.reg文件转换成 Uncode DOS 格式，这是必需的 RGU 的 U 就是这个意思吧。&lt;/p&gt;

&lt;p&gt;这里 RGUComp.exe 一定要用我修改过的版本，有两个原因：&lt;/p&gt;

&lt;p&gt;1.支持中文（这点似乎是wh_cxh修改的）；&lt;br/&gt;
2.将multi_sz字符串导出为“hex(7):”和“hex(15):”这种格式，而不是“multi_sz:”和“mui_sz:”这种格式。这样才能在后面用Registry Workshop等软件来编辑。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二、使用 UltraEdit 宏功能为 .reg 文件按项排序&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;要排序是因为Registry Workshop似乎处理未排序且有重复项的.reg文件时有问题，排序仅对[]中项的行进行。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;妙用 UltraEdit 实现 .reg/.rgu 文件排序，类似的方法可以应用到别的地方。下面的Macro代码有点精妙，有心人不妨看看。下面是 UltraEdit 的宏代码，说实话这种宏命令集真不是人看的：）&lt;/p&gt;

&lt;p&gt;InsertMode&lt;br/&gt;
ColumnModeOff&lt;br/&gt;
HexOff&lt;br/&gt;
UnixReOff&lt;br/&gt;
Find &quot;Windows Registry Editor Version 5.00&lt;sup&gt;p&lt;/sup&gt;&quot;&lt;br/&gt;
Replace All &quot; Windows Registry Editor Version 5.00&lt;sup&gt;p&lt;/sup&gt;&quot;&lt;br/&gt;
Find &quot;]^p&quot;&lt;br/&gt;
Replace All &quot; YonsmEND&lt;sup&gt;p&lt;/sup&gt;&quot;&lt;br/&gt;
Find &quot;^p&quot;&lt;br/&gt;
Replace All &quot;^pYonsmBEGIN&quot;&lt;br/&gt;
Find &quot;^pYonsmBEGIN[HK&quot;&lt;br/&gt;
Replace All &quot;^p[HK&quot;&lt;br/&gt;
Find &quot;^pYonsmBEGIN&quot;&lt;br/&gt;
Replace All &quot;YonsmBEGIN&quot;&lt;br/&gt;
SortAsc IgnoreCase 1 -1 0 0 0 0 0 0&lt;br/&gt;
Find &quot;YonsmBEGIN&quot;&lt;br/&gt;
Replace All &quot;^p&quot;&lt;br/&gt;
Find &quot; YonsmEND&lt;sup&gt;p&lt;/sup&gt;&quot;&lt;br/&gt;
Replace All &quot;]^p&quot;&lt;br/&gt;
Find &quot; Windows Registry Editor Version 5.00&lt;sup&gt;p&lt;/sup&gt;&quot;&lt;br/&gt;
Replace All &quot;Windows Registry Editor Version 5.00&lt;sup&gt;p&lt;/sup&gt;&quot;&lt;br/&gt;
Top&lt;/p&gt;

&lt;p&gt;附件中已包含这个Macro的文件，SortReg.mac。&lt;/p&gt;

&lt;p&gt;注意，如果有的行实在太长（实际发现就两个项，就是又长又臭的 .NET CF 的注册表项），UltraEdit 的 ^p 参数替换就出错。所以，这种情况下，把太长的行现 Ctrl+X 掉，处理好后再手动找到合适的地方 Ctrl+V。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三、使用 RegistryWorkshop 编辑 default.reg 文件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;前面的准备工作都是为了这里能好好的编辑。只要能用上这个软件，.reg的编辑那是非常方便的，比较等等都行。没话说了，看附件中下载。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;四、重构注册表文件 default.hv&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;把 .reg 的 Magic 标志（Windows Registry Editor Version 5.00）改成 REGEDIT4（RGUComp才能认识，本来这个地方我想hack的，没找到地方）。&lt;/p&gt;

&lt;p&gt;set _FLATRELEASEDIR=.&lt;br/&gt;
COPY default.reg boot.rgu&lt;br/&gt;
rgucomp.exe -b&lt;br/&gt;
del boot.rgu&lt;br/&gt;
move /Y boot.hv Default.New.hv&lt;br/&gt;
pause&lt;/p&gt;

&lt;p&gt;附件中的 CoXCo 是解码 InitFlashFiles.dat 的小工具，具体看这里：http://bbs.pdafans.com/viewthread.php?tid=342677&amp;pid;=353144&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/1174991588_0.rar&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>切换音频到蓝牙耳机</title>
      <link href="http://example.com/switch-the-audio-to-the-bluetooth-headset/"/>
      <updated>2007-01-31T06:07:41+08:00</updated>
      <id>http://example.com/switch-the-audio-to-the-bluetooth-headset</id>
      <content type="html">&lt;p&gt;买了个蓝牙耳机，竟然不能把除了电话之外的普通音频切换到蓝牙而机上。分析了一个 BTAudoToggle.exe 的代码，很快搞定。代码如下：&lt;/p&gt;

&lt;p&gt;   HANDLE hFile;&lt;br/&gt;
   hFile = CreateFile(TEXT(&quot;BAG0:&quot;), 0, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_READONLY, NULL);&lt;br/&gt;
   if (hFile != INVALID_HANDLE_VALUE)&lt;br/&gt;
   {&lt;br/&gt;
     g_pMain-&gt;m_uFlag ^= VF_BTAudio;&lt;br/&gt;
     DeviceIoControl(hFile, (g_pMain-&gt;m_uFlag &amp;amp; VF_BTAudio) ? 1 : 2, NULL, 0, NULL, 0, NULL, NULL);&lt;br/&gt;
     CloseHandle(hFile);&lt;br/&gt;
   }&lt;br/&gt;
   else&lt;br/&gt;
   {&lt;br/&gt;
     g_pMain-&gt;ErrorBox(IDM_Utility_BTAudio);&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;已整合到最新的 &lt;a href=&quot;/assets/CeleTask.2.2.rar&quot;&gt;CeleTask 2.2 RAR&lt;/a&gt; 版本内，命令 ID 是 1055。要的话可以到 CeleTask 的日志中下载。&lt;/p&gt;

&lt;p&gt;:)&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>原来老外也有人在做“英化”，CeleDial Translation?</title>
      <link href="http://example.com/acquire-for-celedial-translation/"/>
      <updated>2007-01-26T16:52:09+08:00</updated>
      <id>http://example.com/acquire-for-celedial-translation</id>
      <content type="html">&lt;p&gt;今天搜索Himalaya，一不小心看到一个帖子：&lt;a href=&quot;http://buzzdev.net/index.php?option=com_phorum&amp;amp;Itemid=125&amp;amp;phorum_query=read,26,28684&quot;&gt;http://buzzdev.net/index.php?option=com_phorum&amp;Itemid;=125&amp;phorum;_query=read,26,28684&lt;/a&gt;，仔细一看竟然在讨论“英化”CeleDial。只不过跟中文用户的“汉化”相比，老外似乎作的也太累、太神了——不会中文，竟然也能从中文翻译成英文，下面是部分文字（大致意思是不懂中文，查找资源Unicode，根据 Unicode 算出中文字符，在到翻译网站把中文翻译成英文……我看了一下很多词句翻译甚至比我翻译的还准确，汗！忒神了吧）：&lt;/p&gt;

&lt;p&gt;&lt;em&gt;TofClock, it is a really nice work. Where have you learn Chinese?  &lt;br/&gt;
Regards, &lt;br/&gt;
Oki&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;i&#39;ne never learn chinese ...&lt;/p&gt;

&lt;p&gt;just , i hex edit all resources and copy the unicode like this :&lt;/p&gt;

&lt;p&gt;hex resource is ffff020073518e4e&lt;/p&gt;

&lt;p&gt;ffff0200 is anything but 73518e4e is unicode 5173 and 4e8e&lt;/p&gt;

&lt;p&gt;convert in decimal you have 关 and 于&lt;/p&gt;

&lt;p&gt;go to [www.chinese-tools.com] to get chines caracters from this unicode &lt;br/&gt;
and go to [www2.worldlingo.com] to get english translation ...&lt;/p&gt;

&lt;p&gt;but this literal translation and the real work is to retrieve the real words ...&lt;/p&gt;

&lt;p&gt;下面竟然有人给了这么高的评价，美滋滋地说。其实CeleDial最棒的地方在于整合的精妙构思和强大方便的中文搜索能力——可惜他们都不上中文搜索啦……&lt;/p&gt;

&lt;p&gt;In my opinion, celedial is way better then anything I know, its light, its simple and fast... but this dialparser hv 2 limitation, first, only 3 digit, and second I dont undestand chinnese, so I&#39;ll wait for ur wwe translation tof... this celedial is so much like the Crossbow smartdial style... simple...&lt;/p&gt;

&lt;p&gt;过段时间或许会出正式版本了，支持会有些新的功能，也会提供英文版本，可能还有法文或其它。SP版本暂时没那么快。据说 WM6 内置了智能拨号，我一看原来根本不是 MS t提供的，很可能是O2 的，但据用户反映，差不多是鸡肋——与CeleDial的强大与方便相比较而言。&lt;/p&gt;

&lt;p&gt;Here you English guys can download CeleDial English Beta version:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/CeleDialENU.CAB&quot;&gt;/assets/CeleDialENU.CAB&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It can support PPC2003/WM5.0 in most of PPC phone device.  And, I&#39;ll release the formal version in the future. If you want to translate it into you own language, just &lt;a href=&quot;mailto:yonsm@163.com&quot;&gt;contact me&lt;/a&gt;, please.&lt;/p&gt;

&lt;p&gt;The following message may be need for customize your own mapping table (e.g. French Name in Contacts).&lt;/p&gt;

&lt;p&gt;....&lt;br/&gt;
So you need a extrenal mapping table for your French Name. Just do that to enable External Mapping Table:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a Unicode text file named CeleDial.txt.&lt;/li&gt;
&lt;li&gt;Fill the French Characters to Alpha Characters mapping line by line: &lt;br/&gt;
a àâä&lt;br/&gt;
e éèêê&lt;br/&gt;
and so on.&lt;/li&gt;
&lt;li&gt;Put this text file into CeleDial&#39;s Folder (e.g. \Program Files\CeleDial\CeleDial.txt)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reboot your device to enable the external mapping table.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Send your mapping table to me, if possible:)&lt;br/&gt;
....&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</content>
    </entry>
  
    <entry>
      <title>解压缩 CAB 文件的两种方法</title>
      <link href="http://example.com/two-ways-to-extract-cab/"/>
      <updated>2007-01-05T13:00:51+08:00</updated>
      <id>http://example.com/two-ways-to-extract-cab</id>
      <content type="html">&lt;p&gt;具体以后补充：&lt;br/&gt;
1. SetupAPI: http://support.microsoft.com/kb/189085/zh-cn&lt;br/&gt;
2. CAB SDK: ...&lt;/p&gt;

&lt;p&gt;http://support.microsoft.com/kb/191212/zh-cn&lt;/p&gt;

&lt;p&gt;http://www.microsoft.com/china/MSDN/library/Office/sharepoint/SPdeployingWebparts.mspx?mfr=true&lt;/p&gt;

&lt;p&gt;http://support.microsoft.com/kb/318149/zh-cn&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Another way to hook/modify API</title>
      <link href="http://example.com/another-way-to-hook-api/"/>
      <updated>2006-12-30T15:46:24+08:00</updated>
      <id>http://example.com/another-way-to-hook-api</id>
      <content type="html">&lt;!-- more --&gt;


&lt;p&gt;[codes=cpp]&lt;br/&gt;
// Hook ExitWindows to execute a command&lt;br/&gt;
VOID Hook(HANDLE hProcess)&lt;br/&gt;
{&lt;br/&gt;
   &lt;em&gt;&lt;em&gt;asm&lt;br/&gt;
   {&lt;br/&gt;
       // BOOL WINAPI WriteProcessMemory(HANDLE hProcess, PVOID pvBaseAddress, PVOID pvBuffer, DWORD dwSize, PDWORD pdwNumberOfBytesWritten);&lt;br/&gt;
       // Write code to target&lt;br/&gt;
       PUSH    NULL&lt;br/&gt;
       MOV     EAX, OFFSET &lt;/em&gt;End&lt;br/&gt;
       SUB     EAX, OFFSET &lt;/em&gt;Code&lt;br/&gt;
       PUSH    EAX&lt;br/&gt;
       PUSH    OFFSET _Code&lt;br/&gt;
       PUSH    ExitWindowsEx&lt;br/&gt;
       PUSH    hProcess&lt;br/&gt;
       CALL    DWORD PTR [WriteProcessMemory];&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   // Write True WinExec address to target  
   PUSH    NULL  
   PUSH    4  
   LEA     EAX, WinExec  
   PUSH    EAX  
   MOV     EAX, OFFSET _WinExec  
   SUB     EAX, OFFSET _Code  
   ADD     EAX, ExitWindowsEx  
   PUSH    EAX  
   PUSH    hProcess  
   CALL    DWORD PTR [WriteProcessMemory];  

   // Return  
   RET     4  

   // Target code (Call WinExec to execute a command), address independent  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Code:&lt;br/&gt;
       MOV     EAX, [ESP + 4]&lt;br/&gt;
       PUSH    EAX&lt;br/&gt;
       CALL    &lt;/em&gt;GetWinExec&lt;br/&gt;
&lt;em&gt;WinExec:&lt;br/&gt;
       &lt;/em&gt;EMIT   0&lt;br/&gt;
       &lt;em&gt;EMIT   0&lt;br/&gt;
       &lt;/em&gt;EMIT   0&lt;br/&gt;
       &lt;em&gt;EMIT   0&lt;br/&gt;
&lt;/em&gt;GetWinExec:&lt;br/&gt;
       POP     EAX&lt;br/&gt;
       CALL    &lt;em&gt;Call&lt;br/&gt;
       &lt;/em&gt;EMIT   &#39;R&#39;&lt;br/&gt;
       &lt;em&gt;EMIT   &#39;X&#39;&lt;br/&gt;
       &lt;/em&gt;EMIT   &#39;P&#39;&lt;br/&gt;
       &lt;em&gt;EMIT   &#39;E&#39;&lt;br/&gt;
       &lt;/em&gt;EMIT   &#39;.&#39;&lt;br/&gt;
       &lt;em&gt;EMIT   &#39;E&#39;&lt;br/&gt;
       &lt;/em&gt;EMIT   &#39;X&#39;&lt;br/&gt;
       &lt;em&gt;EMIT   &#39;E&#39;&lt;br/&gt;
       &lt;/em&gt;EMIT   &#39; &#39;&lt;br/&gt;
       &lt;em&gt;EMIT   &#39;H&#39;&lt;br/&gt;
       &lt;/em&gt;EMIT   &#39;E&#39;&lt;br/&gt;
       &lt;em&gt;EMIT   &#39;L&#39;&lt;br/&gt;
       &lt;/em&gt;EMIT   &#39;P&#39;&lt;br/&gt;
       &lt;em&gt;EMIT   0&lt;br/&gt;
&lt;/em&gt;Call:&lt;br/&gt;
       CALL    [EAX]&lt;br/&gt;
       RET     8&lt;br/&gt;
_End:&lt;br/&gt;
   }&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;[/codes]&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Menu Bar on Windows Mobile</title>
      <link href="http://example.com/menu-bar-on-windows-mobile/"/>
      <updated>2006-11-24T11:20:55+08:00</updated>
      <id>http://example.com/menu-bar-on-windows-mobile</id>
      <content type="html">&lt;p&gt;总结一下 MS WM 上莫名其妙的、非常不爽的 Menu Bar API：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SHCreateMenuBar&lt;/strong&gt;：在 SP2003 中不支持SHCMBF_HMENU参数创建，PPC2003 WM5PPC WM5SP 均支持，即不需要 RCDATA 即可创建 MenuBar 非常方便，不仅不需要 RCDATA，String Resource 也省了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SHCMBM_GETMENU&lt;/strong&gt;：在 WM5PPC 中不支持此消息（除非使用 SHCMBF_HMENU 创建且 Top Level Menu Item 大于 2，但此时 Menu Bar 就成了 PPC2003 的外观了）。其他平台上 PPC2003、SP2003、WM5SP 均支持此消息。代替方案是 SHCMBM_GETSUBMENU，但是这样将无法获取一个 Root Level 的 HMENU，痛苦！&lt;/p&gt;

&lt;p&gt;Google 一下，问这类问题的人真多，给通用性程序的API选择带来非常麻烦的问题。再次说声：莫名其妙！&lt;/p&gt;

&lt;p&gt;有更好的解决方法的，不妨说一声。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Windows Mobile 下面最通用的浏览文件对话框</title>
      <link href="http://example.com/common-file-dialog-on-windows-mobile/"/>
      <updated>2006-11-18T19:23:29+08:00</updated>
      <id>http://example.com/common-file-dialog-on-windows-mobile</id>
      <content type="html">&lt;p&gt;M$ Windows Mobile 一大不爽的东西就是 GetOpenFileName 和 GetSaveFileName 函数非常的乱：WM5 上提供了一个 GetOpenFileNameEx 来浏览图片；PPC2003/WM5 下极其简单，只能使用非常浅的文件夹（虽然设计上的考虑，但也太滥了）；SP2003 下压根就没有这些函数。于是只好自己写可以个函数非常通用的函数，Windows Mobile 2003/5.0 SP/PPC 下均可正常运行并获得最佳体验。&lt;/p&gt;

&lt;p&gt;补充一下标题，还是最懒的方法，真正的东西一点都不写：）&lt;/p&gt;

&lt;p&gt;支持一下功能：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;简单的参数&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;保存最后文件夹位置（似乎 RFileShell 不响应咱的请求）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;根据不同的运行环境，自动使用最佳的浏览对话框函数&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;策略：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果找到 Resco 的 RFileShell.dll （安装过 Resco Explorer、PhotoViewer 等软件），则使用RFileShell.dll 的浏览文件函数。它的是最棒的，精神奖励一下！&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其次，使用 Windows Mobile 5.0 的 GetOpenFileNameEx，只有打开，没有保存的&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;再次，使用 tGetFile 的函数，我都做好了完美本地化了&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最后，使用 CoreDll 的 GetOpenFileName 和 GetSaveFileName&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实在不行了，又在 Smartphone 2003 下，提示一下用户去下载 RFileShell 或 tGetFile 吧，简单地返回 \My Documents\AppName.Ext 的文件名吧，顺便问问用户是否接受：）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;真是不费一枪一弹啊……&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;以下代码，版权所有 (C) Yonsm.NET，保留所有权利。&lt;br/&gt;
如需在程序中使用，请留言或发送 Mail 告知。&lt;/p&gt;

&lt;p&gt;[codes=cpp]&lt;br/&gt;
// 资源&lt;br/&gt;
IDS_Open &quot;打开&quot;&lt;br/&gt;
IDS_Save &quot;保存&quot;&lt;br/&gt;
IDS_GetFileName &quot;没有找到浏览文件名功能的函数库，要使用“%s”作为文件名吗?。\n\n提示: 您可以从下列网站中获得相关的函数库:\n\nRFileShell: http://www.resco.net/downloads/byplatforms.asp\n\ntGetFile:\thttp://www.tillanosoft.com/ce/tgetfile.html&quot;&lt;/p&gt;

&lt;p&gt;// CReg&lt;br/&gt;
// STR_AppName&lt;br/&gt;
.....&lt;br/&gt;
[/codes]&lt;/p&gt;

&lt;p&gt;[codes=cpp]&lt;br/&gt;
// Declaration&lt;/p&gt;

&lt;h1&gt;if (_WIN32_WCE &amp;lt; 0x500)&lt;/h1&gt;

&lt;p&gt;typedef struct tagOPENFILENAMEEX&lt;br/&gt;
{&lt;br/&gt;
   // Fields which map to OPENFILENAME&lt;br/&gt;
   DWORD        lStructSize;&lt;br/&gt;
   HWND         hwndOwner;&lt;br/&gt;
   HINSTANCE    hInstance;&lt;br/&gt;
   LPCTSTR      lpstrFilter;&lt;br/&gt;
   LPTSTR       lpstrCustomFilter;&lt;br/&gt;
   DWORD        nMaxCustFilter;&lt;br/&gt;
   DWORD        nFilterIndex;&lt;br/&gt;
   LPTSTR       lpstrFile;&lt;br/&gt;
   DWORD        nMaxFile;&lt;br/&gt;
   LPTSTR       lpstrFileTitle;&lt;br/&gt;
   DWORD        nMaxFileTitle;&lt;br/&gt;
   LPCTSTR      lpstrInitialDir;&lt;br/&gt;
   LPCTSTR      lpstrTitle;&lt;br/&gt;
   DWORD        Flags;&lt;br/&gt;
   WORD         nFileOffset;&lt;br/&gt;
   WORD         nFileExtension;&lt;br/&gt;
   LPCTSTR      lpstrDefExt;&lt;br/&gt;
   LPARAM       lCustData;&lt;br/&gt;
   LPOFNHOOKPROC lpfnHook;&lt;br/&gt;
   LPCTSTR      lpTemplateName;&lt;/p&gt;

&lt;p&gt;   // Extended fields&lt;br/&gt;
   DWORD       dwSortOrder;&lt;br/&gt;
   DWORD       ExFlags;&lt;br/&gt;
}&lt;br/&gt;
OPENFILENAMEEX, *LPOPENFILENAMEEX;&lt;/p&gt;

&lt;p&gt;// Sort order&lt;br/&gt;
typedef enum tagOFN_SORTORDER&lt;br/&gt;
{&lt;br/&gt;
   OFN_SORTORDER_AUTO,&lt;br/&gt;
   OFN_SORTORDER_DATE,&lt;br/&gt;
   OFN_SORTORDER_NAME,&lt;br/&gt;
   OFN_SORTORDER_SIZE,&lt;br/&gt;
   OFN_SORTORDER_ASCENDING = 0x00008000&lt;/p&gt;

&lt;p&gt;}&lt;br/&gt;
OFN_SORTORDER;&lt;/p&gt;

&lt;p&gt;// Extended Flags&lt;br/&gt;
typedef enum tagOFN_EXFLAG&lt;br/&gt;
{&lt;br/&gt;
   OFN_EXFLAG_DETAILSVIEW          = 0x00000001,&lt;br/&gt;
   OFN_EXFLAG_THUMBNAILVIEW        = 0x00000002,&lt;br/&gt;
   OFN_EXFLAG_LOCKDIRECTORY        = 0x00000100,&lt;br/&gt;
   OFN_EXFLAG_NOFILECREATE         = 0x00000200,&lt;br/&gt;
   OFN_EXFLAG_HIDEDRMPROTECTED     = 0x00010000,&lt;br/&gt;
   OFN_EXFLAG_HIDEDRMFORWARDLOCKED = 0x00020000&lt;br/&gt;
}&lt;br/&gt;
OFN_EXFLAG;&lt;/p&gt;

&lt;h1&gt;endif&lt;/h1&gt;

&lt;p&gt;typedef BOOL (&lt;em&gt;PGETFILENAME)(LPOPENFILENAMEEX pOfn);&lt;br/&gt;
typedef BOOL (&lt;/em&gt;TGETFILENAME)(BOOL bSave, LPOPENFILENAMEEX pOfn);&lt;/p&gt;

&lt;p&gt;// Module name and procedure table&lt;br/&gt;
enum {MP_RFileShell, MP_AygShell, MP_tGetFile, MP_CoreDll};&lt;br/&gt;
const struct {PCTSTR ptzModName; PCTSTR ptzOpenProc; PCTSTR ptzSaveProc;} c_sModProc[] =&lt;br/&gt;
{&lt;br/&gt;
   {TEXT(&quot;RFileShell&quot;), TEXT(&quot;RShellGetOpenFileName&quot;), TEXT(&quot;RShellGetSaveFileName&quot;)},&lt;br/&gt;
   {TEXT(&quot;AygShell&quot;), TEXT(&quot;GetOpenFileNameEx&quot;), TEXT(&quot;GetSaveFileNameEx&quot;)},&lt;br/&gt;
   {TEXT(&quot;tGetFile&quot;), TEXT(&quot;tGetFile&quot;), TEXT(&quot;tGetFile&quot;)},&lt;br/&gt;
   {TEXT(&quot;CoreDll&quot;), TEXT(&quot;GetOpenFileNameW&quot;), TEXT(&quot;GetSaveFileNameW&quot;)},&lt;br/&gt;
};&lt;/p&gt;

&lt;p&gt;[/codes]&lt;/p&gt;

&lt;p&gt;[codes=cpp]&lt;/p&gt;

&lt;p&gt;// Browse for file name&lt;/p&gt;

&lt;h1&gt;define OFN_COMMON (0x11000000 | OFN_HIDEREADONLY)&lt;/h1&gt;

&lt;p&gt;BOOL CHelper::GetFileName(HWND hParent, PTSTR ptzPath, UINT uFilterRes, BOOL bSave)&lt;br/&gt;
{&lt;br/&gt;
   // Fill structure&lt;br/&gt;
   OPENFILENAMEEX ofn = {0};&lt;br/&gt;
   ofn.hwndOwner = hParent;&lt;br/&gt;
   ofn.hInstance = g_hInst;&lt;br/&gt;
   ofn.lpstrFile = ptzPath;&lt;br/&gt;
   ofn.nMaxFile = MAX_PATH;&lt;br/&gt;
   ofn.Flags = bSave ? (OFN_COMMON | OFN_OVERWRITEPROMPT) : (OFN_COMMON | OFN_PATHMUSTEXIST);&lt;/p&gt;

&lt;p&gt;   ofn.ExFlags = OFN_EXFLAG_THUMBNAILVIEW;&lt;br/&gt;
   ofn.dwSortOrder = OFN_SORTORDER_NAME | OFN_SORTORDER_ASCENDING;&lt;/p&gt;

&lt;p&gt;   // Get initialize folder from control&lt;br/&gt;
   TCHAR tzPath[MAX_PATH];&lt;br/&gt;
   if (_IsIntRes(ptzPath))&lt;br/&gt;
   {&lt;br/&gt;
       ofn.lpstrFile = tzPath;&lt;br/&gt;
       GetDlgItemText(hParent, (UINT) ptzPath, tzPath, MAX_PATH);&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   // Load extension filter&lt;br/&gt;
   TCHAR tzFilter[MAX_PATH];&lt;br/&gt;
   _LoadStr(uFilterRes, tzFilter);&lt;br/&gt;
   ofn.lpstrFilter = UStrRep(tzFilter, &#39;|&#39;, 0);&lt;/p&gt;

&lt;p&gt;   // Parse default extension&lt;br/&gt;
   TCHAR tzDefExt[MAX_NAME];&lt;br/&gt;
   PTSTR p = UStrChr(tzFilter, 0) + 1;&lt;br/&gt;
   if (p = UStrChr(p, &#39;.&#39;))&lt;br/&gt;
   {&lt;br/&gt;
       UStrCopy(tzDefExt, p);&lt;br/&gt;
       if (p = UStrChr(tzDefExt, &#39;;&#39;)) *p = 0;&lt;br/&gt;
       ofn.lpstrDefExt = tzDefExt;&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   // Read initialize folder&lt;br/&gt;
   CReg reg;&lt;br/&gt;
   TCHAR tzInitDir[MAX_PATH];&lt;br/&gt;
   if (reg.GetStr(TEXT(&quot;InitDir&quot;), tzInitDir))&lt;br/&gt;
   {&lt;br/&gt;
       ofn.lpstrInitialDir = tzInitDir;&lt;br/&gt;
   }&lt;br/&gt;
   else&lt;br/&gt;
   {&lt;br/&gt;
       ofn.lpstrInitialDir = TEXT(&quot;\&quot;);&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   // Get title&lt;br/&gt;
   TCHAR tzTitle[MAX_NAME];&lt;br/&gt;
   ofn.lpstrTitle = _LoadStr(bSave ? IDS_Save : IDS_Open, tzTitle);&lt;/p&gt;

&lt;p&gt;   // Try all library&lt;br/&gt;
   UINT i = 0;&lt;br/&gt;
   BOOL bResult = FALSE;&lt;br/&gt;
   for (; i &amp;lt; &lt;em&gt;NumOf(c_sModProc); i++)&lt;br/&gt;
   {&lt;br/&gt;
       HMODULE hModule = LoadLibrary(c_sModProc&lt;/em&gt;.ptzModName);&lt;br/&gt;
       if ((hModule == NULL) &amp;amp;&amp;amp; (i == MP_RFileShell))&lt;br/&gt;
       {&lt;br/&gt;
           // Lookup Resco Explorer install folder&lt;br/&gt;
      &amp;nbs;
p;    TCHAR tzModule[MAX_PATH];&lt;br/&gt;
           CReg rfs(TEXT(&quot;SOFTWARE\Apps\Resco Explorer&quot;), HKEY_LOCAL_MACHINE);&lt;br/&gt;
           if (rfs.GetStr(TEXT(&quot;InstallDir&quot;), tzModule))&lt;br/&gt;
           {&lt;br/&gt;
               UDirMakePath(tzModule, c_sModProc&lt;em&gt;.ptzModName);&lt;br/&gt;
               hModule = LoadLibrary(tzModule);&lt;br/&gt;
           }&lt;br/&gt;
       }&lt;br/&gt;
       if (hModule)&lt;br/&gt;
       {&lt;br/&gt;
           PGETFILENAME pGetFileName = (PGETFILENAME) GetProcAddress(hModule, bSave ? c_sModProc&lt;/em&gt;.ptzSaveProc : c_sModProc_.ptzOpenProc);&lt;br/&gt;
           if (pGetFileName)&lt;br/&gt;
           {&lt;br/&gt;
               ofn.lStructSize = (i == MP_AygShell) ? sizeof(OPENFILENAMEEX) : sizeof(OPENFILENAME);&lt;br/&gt;
               bResult = (i == MP_tGetFile) ? ((TGETFILENAME) pGetFileName)(bSave, &amp;ofn;) : pGetFileName(&amp;ofn;);&lt;br/&gt;
               FreeLibrary(hModule);&lt;br/&gt;
               break;&lt;br/&gt;
           }&lt;br/&gt;
           FreeLibrary(hModule);&lt;br/&gt;
       }&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   // Prompt for library&lt;br/&gt;
   if ((i == MP_CoreDll) &amp;amp;&amp;amp; !IsPPC() &amp;amp;&amp;amp; !IsWM5() &amp;amp;&amp;amp; !bResult)&lt;br/&gt;
   {&lt;br/&gt;
       TCHAR tzStr[MAX_PATH];&lt;br/&gt;
       TCHAR tzInfo[MAX_STR];&lt;br/&gt;
       UStrPrint(ofn.lpstrFile, TEXT(&quot;\My Documentss\%s.%s&quot;), STR_AppName, ofn.lpstrDefExt);&lt;br/&gt;
       UStrPrint(tzInfo, _GetStr(IDS_GetFileName), ofn.lpstrFile);&lt;br/&gt;
       bResult = (MessageBox(hParent, tzInfo, tzTitle, MB_ICONQUESTION | MB_YESNO) == IDYES);&lt;br/&gt;
   }&lt;/p&gt;

&lt;p&gt;   if (bResult)&lt;br/&gt;
   {&lt;br/&gt;
       // Set control text&lt;br/&gt;
       if (_IsIntRes(ptzPath))&lt;br/&gt;
       {&lt;br/&gt;
           SetFocus(GetDlgItem(hParent, (UINT) ptzPath));&lt;br/&gt;
           SetDlgItemText(hParent, (UINT) ptzPath, tzPath);&lt;br/&gt;
       }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   // Save initialize folder  
   p = UStrRChr(ofn.lpstrFile, &#39;\\&#39;);  
   if (p)  
   {  
       *p = 0;  
       reg.SetStr(TEXT(&quot;InitDir&quot;), ofn.lpstrFile);  
       *p = &#39;\\&#39;;  
   }  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;   }&lt;/p&gt;

&lt;p&gt;   return bResult;&lt;br/&gt;
[/codes]&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>XDOS - 自制的小巧方便的 DOS 启动盘，支持在 NTFS 中启动 DOS</title>
      <link href="http://example.com/xdos/"/>
      <updated>2006-11-10T16:55:03+08:00</updated>
      <id>http://example.com/xdos</id>
      <content type="html">&lt;p&gt;一、简介&lt;/p&gt;

&lt;p&gt;欢迎使用功能强大的 XDOS 启动盘！此盘有以下几种启动选择：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;干净引导：不加载任驱动和程序程序&lt;/li&gt;
&lt;li&gt;正常引导：加载常规驱动和应用程序&lt;/li&gt;
&lt;li&gt;扩展支持：支持 CD/DVD/USB 存储设备&lt;/li&gt;
&lt;li&gt;备份系统：备份第一个分区到第三个分区的 GHOST\SYSTEM.GHO&lt;/li&gt;
&lt;li&gt;恢复系统：恢复第三个分区的 \GHOST\SYSTEM.GHO 到第一个分区&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;二、功能：&lt;/p&gt;

&lt;p&gt;设备支持：支持 CD/DVD/USB 存储设备，包括优盘。&lt;br/&gt;
ＮＴ功能：支持 NTFS 分区文件读写，带有ＮＴ用户密码重置工具。&lt;br/&gt;
支持中文：带有天汇汉字系统，并有拼音和双拼输入法&lt;br/&gt;
长文件名：支持中文长文件名。&lt;br/&gt;
备份恢复：内置 GHOST 8.3 企业版，且启动时有一键自动备份和一键自动恢复的功能。&lt;br/&gt;
使用方便：除了 BOOT.INI 之外，不需要更改其它设置，且能放在 NTFS 分区（做此盘主要目的就是在 NTFS 系统中使用 DOS）。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;三、安装&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;硬盘&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;在有 NT Loader （Windows 2000/XP/2003）的硬盘上使用，很简单：把 XDOS.IMG、GRLDR 放到 C:\;，然后在 BOOT.INI 中添加一行“C:\GRLDR=&quot;Windows 98 XDOS Prompt&quot;”即可。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;优盘&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;1). 最简单的方法：复制 XP/2003 的 NTLDR、NTDETECT.COM、BOOT.INI 和我提供的 GRLDR、XDOS.IMG 到优盘，然后在 命令行提示符下，执行 NTBOOT.EXE X:，执行 写入引导区到优盘中即可。（相当于硬盘 NT Loader 启动一样）&lt;br/&gt;
2). 最推荐的方法：用 USBoot 把 U 盘做成 DOS 启动盘（模式请随便选择，以能启动你的电脑到 DOS 为准）；复制 BOOTLACE.EXE、GRLDR、XDOS.IMG 到优盘；用优盘启动到 DOS，执行“BOOTLACE.EXE --floppy --chs 0x00”；然后可以把 BOOTLACE.EXE 和 DOS 启动文件 IO.SYS、MSDOS.SYS、COMMAND.COM 删除掉了，只保留 GRLDR 和 XDOS.IMG 即可。（这是使用了 GRUB4DOS 的 GRLDR 作为引导程序，且用 BOOTLACE.EXE 写入了 GRUB 引导扇区，完全脱离其它引导程序）&lt;/p&gt;

&lt;p&gt;优盘必须为 FAT 或 FAT32 文件系统。&lt;br/&gt;
如果你有Windows Mobile 5.0 设备，配合 WM5torage，把这个放到手机的存储里，会是一随身携带的方便的启动盘：）&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;软盘：&lt;br/&gt;
删除 GHOST.EXE 后，也可以用 WinImage 等工具，把 XDOS.IMG 写入到软盘中，制作启动软盘。估计现在这年头，没人用这个了，所以 XDOS.IMG 内的布置设计，我也没有为真实软盘启动而优化（即没做虚拟盘，没压缩）。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;四、命令&lt;/p&gt;

&lt;p&gt;ATTRIB    添加或删除文件属性&lt;br/&gt;
DEBUG     调试实用程序&lt;br/&gt;
DELTREE   删除目录和文件&lt;br/&gt;
DISKGEN   中文磁盘分区管理工具&lt;br/&gt;
DOSKEY    键盘输入宏工具&lt;br/&gt;
DOSLFN    长文件名支持&lt;br/&gt;
EDIT      文本编辑器&lt;br/&gt;
FDISK     磁盘分区工具&lt;br/&gt;
FINDRAMD  查找虚拟盘的实用程序&lt;br/&gt;
FORMAT    磁盘格式化工具&lt;br/&gt;
GHOST     磁盘备份和恢复工具&lt;br/&gt;
MEM       内存信息查看&lt;br/&gt;
MEMTEST   内存测试工具&lt;br/&gt;
MORE      分屏显示&lt;br/&gt;
MOUSE     鼠标驱动&lt;br/&gt;
NTFSDOS   完全读写 NTFS 分区的工具&lt;br/&gt;
NTPASS    支持 FAT/NTFS 分区的密码重置工具&lt;br/&gt;
RECOVER   数据恢复工具，能够恢复已经删除的文件和目录，支持 FAT/NTFS 分区格式&lt;br/&gt;
RESTART   重新启动&lt;br/&gt;
SHSUCDHD  虚拟光驱&lt;br/&gt;
SHSUCDX   小巧实用的光驱扩展驱动程序&lt;br/&gt;
SMARTDRV  磁盘高速缓冲程序&lt;br/&gt;
SYS       传输系统文件，将磁盘制成启动盘&lt;br/&gt;
TW        天汇汉字系统&lt;br/&gt;
TWKEY     天汇汉拼音输入法&lt;br/&gt;
UNZIP     解压工具，支持长文件名&lt;br/&gt;
XCOPY     文件和目录复制工具&lt;br/&gt;
XMSDSK    虚拟内存盘工具&lt;/p&gt;

&lt;p&gt;要获取更多信息，请访问 WWW.YONSM.NET&lt;/p&gt;

&lt;p&gt;四、致谢&lt;/p&gt;

&lt;p&gt;感谢 Microsoft 提供的 MS-DOS。&lt;br/&gt;
感谢 Symantec 的优秀的 GHOST。&lt;br/&gt;
感谢很多的软件作者作了好多的实用命令。&lt;br/&gt;
感谢 GRUB 和 GRUB4DOS，非常优秀的 Boot Loader（尽管某些方面可以改进得更有亲和力些）。&lt;br/&gt;
感谢 DOSHOME 提供的 DOS 超级急救盘，此启动盘参照了部分 DOSHOME 的启动盘驱动程序选择。&lt;/p&gt;

&lt;p&gt;以上软件和工具版权归原作者所有，本人提供此打包程序仅供研究测试之用。对于这些明介绍以及制作测试及批处理文件，本人不保留版权，欢迎继续修改。&lt;/p&gt;

&lt;p&gt;另外，如果你需要非常多功能都有的启动盘，请使用 DOSHOME 的超级急救盘。我制作此启动盘只是用自己的选择原则，为了自己部署系统方便，不一定能符合您的需求。&lt;/p&gt;

&lt;p&gt;Yonsm&lt;br/&gt;
2006.11.20&lt;br/&gt;
WWW.Yonsm.NET&lt;/p&gt;

&lt;p&gt;下载（因为包含 WXPE 启动盘，所以总共将近 30M）：&lt;br/&gt;
&lt;a href=&quot;/assets/BOOT.rar&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Orca - 修改 MSI 文件的好工具 - 终于搞定在 Win2003 上安装 WinCE5 PB</title>
      <link href="http://example.com/using-orca-to-modify-msi/"/>
      <updated>2006-10-20T14:11:55+08:00</updated>
      <id>http://example.com/using-orca-to-modify-msi</id>
      <content type="html">&lt;p&gt;很久以前就辛辛苦苦从电驴上下载来 Microsoft Windows CE 5.0 （开发包，特指 Platform Builder for Microsoft Windows CE 5.0），一安装提示只能在 WinXP SP1 以上或 Win2000 SP4 以上安装，我一直用 Win2003，真郁闷，每次要提取文件，只好用其他方法来找，找到后解除来看。&lt;/p&gt;

&lt;p&gt;因为是 MSI 的安装包，一直想分析一下在那里判断版本的，为此不仅调试分析过，还写过一个 FakeVer DLL，专门用来欺骗版本号，竟然都没成功，晕死！&lt;/p&gt;

&lt;p&gt;今天突然想到，以前都是针对 MSI 的执行程序 msiexec.exe 分析，干嘛不从 MSI 安装文件入手试试看呢？于是找啊找啊，终于尝试了一个叫 Orca 的工具，打开 MSI 文件后，根据错误提示字符串，找到相关的条件判断，删除掉，顺利安装——终于用上了 Win CE 5 PB！感谢 CCTV，感谢 MTV……&lt;/p&gt;

&lt;p&gt;其实真正要感谢的是 MS，Orca 是 MS 的工具。另外要感谢 wanfu，我用的是 wanfu 汉化的 3.1.4000.1830，可从这里下载：http://www.hanzify.org/index.php?Go=Show::List&amp;ID;=11122&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>MS Windows CE 输入法切换方案和代码分析</title>
      <link href="http://example.com/analying-windows-ce-input-method-switch/"/>
      <updated>2006-10-18T19:38:18+08:00</updated>
      <id>http://example.com/analying-windows-ce-input-method-switch</id>
      <content type="html">&lt;p&gt;Pocket PC 中切换输入法要等N长时间（4秒左右），稍加分析，感觉可能是CE在枚举登记过的输入法的过程中可能进行了大量的无用操作，；再仔细分析，输入法登记在 HKEY_CLASSS_ROOT\CLSID下，看情形似乎使用IsSIPInput=1的Value标志，表示这是输入法——MD这都想得出来！这下面是登记所有COM组件的地方，当然非常多条目，枚举起来肯定非常慢。&lt;/p&gt;

&lt;p&gt;不过我终于不死心，觉得MS不至于用这种方案枚举数输入法，于是狂搜 Windows CE Platform Builder  中的文件（有WinCE 源代码和OS Image Build工具和开发环境）的目录，只听到硬盘（ISO文件模拟的光盘）一阵狂响之后，终于找到文件 sipcpl.cpp，一看，果然印证我上面的猜想：&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;[codes=cpp]&lt;/p&gt;

&lt;h1&gt;include &quot;cplpch.h&quot;&lt;/h1&gt;

&lt;p&gt;……&lt;/p&gt;

&lt;p&gt;// Class to travel the registry &amp;amp; enumerate the IMs&lt;br/&gt;
class CIMEnum&lt;br/&gt;
{&lt;br/&gt;
private:&lt;br/&gt;
   CReg m_regCLSID;&lt;/p&gt;

&lt;p&gt;public:&lt;br/&gt;
   CIMEnum() {&lt;br/&gt;
       // Open the CLSID key.&lt;br/&gt;
       m_regCLSID.Open(HKEY_CLASSES_ROOT, RK_CLSID);&lt;br/&gt;
   } &lt;br/&gt;
   ~CIMEnum() {}&lt;/p&gt;

&lt;p&gt;   // Enumerate all CLSIDs that are SIPInputMethods &lt;br/&gt;
   PIMENTRY GetNextIM(void)&lt;br/&gt;
   {&lt;br/&gt;
       #define BUFSIZE 260&lt;br/&gt;
       TCHAR szTemp[BUFSIZE];&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   // Enumerate next CLSID, looking for input methods.  
   while(m_regCLSID.EnumKey(szTemp, BUFSIZE))  
   {  
       // Check if this CLSID has an IsSIPInputMethod key with value &quot;1&quot;.  
       CReg regIM(m_regCLSID, szTemp);  
       CReg regIsSIP(regIM, RK_ISSIPINPUTMETHOD);  
       LPCTSTR pszIsIM = regIsSIP.ValueSZ(NULL);  
       if(pszIsIM &amp;amp;&amp;amp; pszIsIM[0]==&#39;1&#39;)  
       {                // Get the CLSID (from the CLSID string in szTemp),   
           // friendly name (default value of the szTemp key)  
           // and the default icon for the IM (DefaultIcon subkey)  
           LPCTSTR  pszIMName;  
           CLSID    clsid;  

           if( (pszIMName = regIM.ValueSZ(NULL)) &amp;amp;&amp;amp;   
               SUCCEEDED(CLSIDFromString(szTemp, &amp;amp;clsid;)) )  
           {  
               PIMENTRY pIMEntry = (PIMENTRY)LocalAlloc(LPTR,   
                   sizeof(IMENTRY)+sizeof(TCHAR)*(1+lstrlen(pszIMName)));  

               if(pIMEntry)  
               {  
                   lstrcpy(pIMEntry-&amp;gt;m_szName, pszIMName);  
                   pIMEntry-&amp;gt;m_clsid = clsid;  

                   // Get Icon if we have one  
                   CReg regIcon(regIM, RK_DEFAULTICON);  
                   if(regIcon.ValueSZ(NULL, szTemp, BUFSIZE))  
                   {  
                       int iIndex = 0;  
                       LPTSTR pszIndex = _tcschr(szTemp, &#39;,&#39;);  
                       if(pszIndex)  
                       {  
                           *pszIndex = 0;  // Null terminate the name portion of the string  
                           iIndex=_ttol((pszIndex+1)); // get the icon index just past the &#39;,&#39;  
                       }  
                       ExtractIconEx(szTemp, iIndex, &amp;amp;pIMEntry-;&amp;gt;m_hiconWide, &amp;amp;pIMEntry-;&amp;gt;m_hiconNarrow, 1);  
                   }  
                   return pIMEntry;  
               }  
               else { ASSERT(FALSE); } // OOM  
           }  
           else { ASSERT(FALSE); } // shouldn&#39;t happen unless registry data incorrect  
       }  
       // not an IM key, try next one  
   }  
   return NULL;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;   }&lt;br/&gt;
};&lt;/p&gt;

&lt;p&gt;[/codes]&lt;/p&gt;

&lt;p&gt;果然把注册表 HKEY_CLASS_ROOT\CLSID全部枚举了一遍，我想即使不是PPC用户，PC上用过注册表编辑器的点开 HKEY_CLASS_ROOT\CLSID 这个键的用户肯定都深有体会，要多久时间。&lt;/p&gt;

&lt;p&gt;设置这种方案的真TMD有病、垃圾！（嗯，我是说他的做法很垃圾，不是说他人很垃圾！如果他是我的项目组成员，我非扁它不可）。一处漫不经心的设计，害得用户切换输入法变得异常不爽。要命的是，PPC上肯定要经常切换输入法（如果上网的话，切换中文输入和英文网址）。&lt;/p&gt;

&lt;p&gt;想想办法能不能解决吧，……，继续分析，找到，他这片代码最终生成在 cplmain.cpl 中，原来合并到了控制面板管理的模块中，反汇编一看，和源代码一样，修改一下，比如，从 CLXID下读取吧，当然，输入法登记的东西也要挪过来，感觉代码都能搞定了……&lt;/p&gt;

&lt;p&gt;放到机器上一试，需要替换ROM里面的文件，似乎如果是什么XIP的模块，是没法替换的，晕死，没效果，这个文件可能就是XIP就地执行的。就地处决吧，就分析到这里，暂时死心了……&lt;/p&gt;

&lt;p&gt;厄……自己定制个ROM，能替换着文件的话，肯定能搞定，那样切换输入法，应该能做到像PC机上那样快速了，至少不会有迟滞感觉。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>遭遇支付宝“李鬼”？</title>
      <link href="http://example.com/fake-alipay/"/>
      <updated>2006-09-10T03:05:14+08:00</updated>
      <id>http://example.com/fake-alipay</id>
      <content type="html">&lt;p&gt;www.alipay.com.cn 从表象上看非常像“李鬼”域名，输入用户名密码验证马后说验证吗不对，典型的！&lt;/p&gt;

&lt;p&gt;还好有数字证书。账户安全应该没问题。&lt;/p&gt;

&lt;p&gt;打客户电话咨询了一下，竟然也不知道似的。只告诉我似乎不是官方的。很晕！&lt;/p&gt;

&lt;p&gt;其它使用的人注意一下，很容易进入这个网站，IE 中 alipay，Ctrl+Enter 就进去了。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>PPC 又又挂了</title>
      <link href="http://example.com/my-ppc-die/"/>
      <updated>2006-08-31T15:46:12+08:00</updated>
      <id>http://example.com/my-ppc-die</id>
      <content type="html">&lt;p&gt;刚换给同学一天，PPC 又挂了，问题未知，狂郁闷……&lt;br/&gt;
如果你有维修渠道，不妨帮我一下（O2 XDA Neo 买来两个月已经维修过两次，一次扬声器挂了，一次刷机字库挂了，这次估计也是字库问题，现象一样，就像没电池似的，但这次没刷机，好好的就挂了）……&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>CeleDial - Pocket PC 必备的智能拨号助手</title>
      <link href="http://example.com/celedial-ppc/"/>
      <updated>2006-08-31T07:43:11+08:00</updated>
      <id>http://example.com/celedial-ppc</id>
      <content type="html">&lt;p&gt;CeleDial 是 Windows Mobile Pocket PC Phone 上必备的智能拨号助手，它可以帮助您简单、方便、快速地定位联系人，让您随心所欲，想拨就拨。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/CeleDial.gif&quot; alt=&quot; &quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;迅捷易用：无缝集成到拨号界面，使用电话程序中的 T9 屏幕键盘，简单易用；内存占用极少，运行飞快。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;智能匹配：支持通过姓名、拼音、简拼和电话号码智能查找联系人；支持所有 Unicode 中文汉字拼音。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;码表定制：内置支持简体拼音、通用拼音、注音符号方式搜索联系人，可以通过外置码表支持其它查询方式。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定制命令：用户可定制的快捷菜单，支持自定义命令扩展，可应用于ＩＰ电话、视频拨号等其它扩展应用。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;广泛支持：支持读取内置联系人、SIM 卡联系人和通话记录电话号码作为 CeleDial 联系人条目。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;完美兼容：支持 Windows Mobile 5.0/6.0/2003 Pocket PC Phone，支持 QVGA、VGA 和正方形屏幕 。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;2007.08.28 更新：
1. 允许自定义 CeleDial 的显示位置，以便支持 Touch 等拨号面板。
2. 修正 WM6 中菜单项每次都增加的错误。&lt;/p&gt;

&lt;p&gt;1.6 版：&lt;a href=&quot;/assets/CeleDial.CHS.rar&quot;&gt;简体中文版下载&lt;/a&gt; &lt;a href=&quot;/assets/CeleDial.CHT.rar&quot;&gt;繁体中文版下载&lt;/a&gt; &lt;a href=&quot;/assets/CeleDial.ENU.rar&quot;&gt;English Version&lt;/a&gt; &lt;a href=&quot;/assets/CeleDial.French.rar&quot;&gt;French Version&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1.8 测试版：&lt;a href=&quot;/assets/CeleDial.CAB&quot;&gt;简体中文&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;码表扩展：&lt;a href=&quot;/assets/CeleDialWXM.rar&quot;&gt;无虾米扩展下载&lt;/a&gt; 感谢台湾的匿名网友 &lt;a href=&quot;/assets/CeleDialCJM.rar&quot;&gt;仓颉码扩展下载&lt;/a&gt; 感谢澳门的 Louis 网友&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/CeleDial.htm&quot;&gt;使用说明&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>逢考必补</title>
      <link href="http://example.com/failure-on-every-exam/"/>
      <updated>2006-08-29T11:46:54+08:00</updated>
      <id>http://example.com/failure-on-every-exam</id>
      <content type="html">&lt;p&gt;驾照考试 桩考 没过，真TMD猪头……&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>[转载]到底谁在抛弃中国？</title>
      <link href="http://example.com/who-abandoned-in-china/"/>
      <updated>2006-08-26T21:43:24+08:00</updated>
      <id>http://example.com/who-abandoned-in-china</id>
      <content type="html">&lt;p&gt;作者：王晋晟 &lt;br/&gt;
转自：http://wjs.name/collection/who-discard-china/2005/09/03/43&lt;/p&gt;

&lt;p&gt;　　我觉得我有必要为中国写点东西了。&lt;/p&gt;

&lt;p&gt;　　虽然我一向标榜远离政治，对所谓的世界大势有一种与生俱来的失望。但最近的很多很多事情，还是让我觉得有某种东西如梗在喉，不吐不快。&lt;/p&gt;

&lt;p&gt;　　我厌恶评论，因为评论家大多只是坐而论道的好手，一旦起而行之，则捉襟见肘。站着说话不腰疼，固然很惬意。我知道有一天我也许会因为我说的这些而打了自己的嘴巴。&lt;/p&gt;

&lt;p&gt;　　但我还是决定要说，就如鲁迅先生所说，如果一个房子里的人要闷死了，你把他叫醒固然很残忍，但，如果你把所有的人都叫醒，又怎么没有可能把房子打一个洞来透气呢？&lt;/p&gt;

&lt;p&gt;　　我知道，也许我也不能把这座房子建的更好，但希望我说的话，能够给别人一些启示或者思索，这些启示或者思索中，也许就有建房子的高手呢。&lt;/p&gt;

&lt;p&gt;　　我今天要说的是，到底谁在抛弃中国？&lt;/p&gt;

&lt;p&gt;　　这个问题看起来太大，几乎无从说起。我还是从细微处说起吧。&lt;/p&gt;

&lt;p&gt;　　昨天看到一个贴子，内容是这样的：&lt;/p&gt;

&lt;p&gt;　　房改是把你腰包掏空，教改是把你二老逼疯，医改是要提前给你送终。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;　　很好玩的一个贴子，却很真实的反映了我们改革的一个现实。中国的未来在哪里？我们要走向美国，还是变成下一个拉美？&lt;/p&gt;

&lt;p&gt;　　我们常常可以听到这样一句话，美国的现在就是我们的未来。这句话让我们生出很多美丽的遐想，好像我们真的再这样埋头苦干很多年，就一定能赶英超美，过上欧美人的幸福生活。但是现在，在我们看来，也许赶英超美不过是一个美丽的遐想，也许中国貌似强大的经济外表之下已经暗流涌动，也许歌舞升平之下已经危机四伏。&lt;/p&gt;

&lt;p&gt;　　为什么要提拉美？&lt;/p&gt;

&lt;p&gt;　　在我们的主流视野里从来都没有拉美，在我们的概念里，拉美这个名词不比非洲高等多少。我们是不屑于提拉美的，那里滋生着一切资本主义的毒瘤，贫富分化，社会动荡，政治独裁，经济畸形发展，拉美人在独立以后，瞎折腾了200多年，还是处于第三世界。&lt;/p&gt;

&lt;p&gt;　　我们怎么能把自己和拉美比？&lt;/p&gt;

&lt;p&gt;　　拉美人第一次进入我们的视线，大概是在去年，我们在谈论中国汽车业的未来走势时，第一次提到这个词，后拉美化。有人对当时世界汽车巨头纷纷进入中国，瓜分市场提出了自己的忧虑，说中国汽车如果不能走自己独立发展的品牌之路，而企图以市场换技术，最后只能如同拉美的汽车市场一样，沦为世界汽车巨头的加工厂，在食物链底层，抢食一点点残羹冷之。永远不可能在世界市场上与他们并驾齐驱。而更重要的是，以低廉的劳动力换来的投资必将不会长久，因为一旦出现劳动力成本更低的市场，跨国巨头马上就会进行产业转移，到那个时候，中国汽车业就会被抽空，拉美的今天就是中国的未来。&lt;/p&gt;

&lt;p&gt;　　这种担忧不无道理。&lt;/p&gt;

&lt;p&gt;　　而我今天要说的，不仅仅是中国的汽车业，而是中国的整个未来。我们要走向何方？&lt;/p&gt;

&lt;p&gt;　　是发达的欧美，还是混乱的拉美？&lt;/p&gt;

&lt;p&gt;　　郎咸平在华中科技大学演讲的时候，对大学生们说，“30年以后写信给你女儿的时候你可能会写，你在别国当保姆的日子还好吗？”“如果信托制度一直缺乏，那么改革将会把我们带到菲律宾而不是美国。”&lt;/p&gt;

&lt;p&gt;　　台下的大学生莫名惊诧。&lt;/p&gt;

&lt;p&gt;　　其实我觉得倒真没有什么可惊诧的。这个道理连我都能想明白，我们中国的那些精英阶层，喝过洋墨水，读过哈佛剑桥的，谁能不心知肚明呢？但是愿意把它讲出来，讲给我们懵懵懂懂的大众和青年学生的，估计只有郎咸平一个人了。&lt;/p&gt;

&lt;p&gt;　　有些东西是得多用脚趾头想想。上帝给我们一个脑袋，不是为了让我们整天琢磨同事有没有比我多发多少工资或者邻居的老公为什么比我能挣钱的。记得在中学学世界近代史的时候，曾经就有一个问题一直想不明白。为什么拉美国家独立的时间和美国差不多，到最后发展的差距咋就这么大呢？历史书告诉我们，那是因为帝国主义的掠夺。我一直觉得那是狗屁，如果一对小兄弟一起长大，有一天哥哥对弟弟说，从今天开始，你归我管了，你挣的钱归我，做弟弟的能愿意？据说拉美国家独立以后，很快就变成了美国的后院。不过这是结果，可不是原因了。之所以美国能把他们当后院，还不是因为几十年之后，当哥哥的已经比弟弟强大了好多，敢于对弟弟说，你挣的钱要是不给我，看我不揍你。&lt;/p&gt;

&lt;p&gt;　　当然，我当时是想不明白的。我面对这样的答案，也不过就是在心里说句狗屁，除此之外，是断然提不出反对意见的。但现在，我敢说，也许真实的答案已经被我们发现，并且他正在困扰着我们的中国。&lt;/p&gt;

&lt;p&gt;　　拉美与美国的差距在于，它没有形成良好的财富再生体制，套一句比较主流的话，它缺乏一种财富积累上的可持续发展能力。&lt;/p&gt;

&lt;p&gt;　　举一个简单的例子来说明这样的差别。&lt;/p&gt;

&lt;p&gt;　　第一种情况：&lt;/p&gt;

&lt;p&gt;　　假设在一个地方发现了金矿，来了一个人投资建了一个矿场，雇一百个工人为他淘金，每年获利1000万，矿主把其中的50%做为工人工资发下去，每个工人每年收入5万，他们拿一万来租房子，剩下的四万可以结婚，生孩子，成家立业，矿主手里还有五百万，可以做投资。因为工人手里有钱，要安家落户，所以，房子出现需求。于是矿主用手里的钱盖房子，租给工人，或者卖给工人。工人要吃要喝，所以，开饭店，把工人手里的钱再赚回来。开饭馆又要雇别的工人，于是工人的妻子有了就业机会，也有了收入。一个家庭的消费需求就更大了。这样，几年之后，在这个地方出现了100个家庭。孩子要读书，有了教育的需求，于是有人来办学校，工人要约会，要消费，要做别的东西，于是有了电影院，有了商店，这样，50年过去以后，当这个地方的矿快被挖光了的时候，这里已经成了一个10万人左右的繁荣城市。&lt;/p&gt;

&lt;p&gt;　　而第二种情况是这样的：&lt;/p&gt;

&lt;p&gt;　　假设同样发现了金矿，同样有人来投资开采，同样雇100工人，同样每年获利1000万，但是矿主把其中10%作为工资发下去，每个工人一年1万。这些钱只够他们勉强填饱肚子，没有钱租房子，没有钱讨老婆，只能住窝棚。矿主一年赚了900万，但是看一看满眼都是穷人，在本地再投资什么都不会有需求。于是，他把钱转到国外，因为在本地根本就不安全，他盖几个豪华别墅，雇几个工人当保镖，工人没有前途，除了拼命工作糊口，根本没有别的需求。唯一可能有戏的就是想办法骗一个老婆来，生一个漂亮女儿，或许还可以嫁给矿主做老婆。50年下去以后，这个地方除了豪华别墅，依然没有别的产业。等到矿挖完了，矿主带着巨款走了，工人要么流亡，要么男的为盗，女的为娼。&lt;/p&gt;

&lt;p&gt;　　一个很简单的例子，其实就是拉美和美国不同的发展轨迹。也许今天美国人应该说，感谢华盛顿，他为美国缔造了最现代最科学的政治体制，感谢亨利·福特，他一手缔造了美国的中产阶级。而拉美国家就没有那么幸运了，他们的大独裁者创造了掠夺性的经济体制，以&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>CeleFusion - 具有数据中继/变换功能的 HTTP 代理</title>
      <link href="http://example.com/celefusion/"/>
      <updated>2006-08-22T15:09:18+08:00</updated>
      <id>http://example.com/celefusion</id>
      <content type="html">&lt;p&gt;一个短小的 HTTP Proxy，算是比较精妙的实用程序了，附件是源代码，非常简明清晰。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;支持 HTTP GET Proxy（暂不支持 HTTP CONNECT 模式）&lt;/li&gt;
&lt;li&gt;支持 Relay 模式，可以在客户端和 Proxy 插入不限个数的 Relay 服务器&lt;/li&gt;
&lt;li&gt;Relay 模式支持数据加密（变换），在 Relay 和 Proxy 之间的数据不再是明文，可以比较数据被监听（装个Proxy在国外的机器上，自己本机上装个Relay服务器，就能访问所有国外网站了）&lt;/li&gt;
&lt;li&gt;支持普通模式和 NT 服务模式运行&lt;/li&gt;
&lt;li&gt;服务支持远程安装、删除&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;控制台程序，下面是用法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        D:\Visual Studio 2005\Projects\CeleFusion\Release&amp;gt;CeleFusion /?
        CeleFusion 1.2.8
        Copyright (C) 2006 Yonsm.NET, All Rights Reserved

        Usage: CeleFusion.exe [/Options]
         INSTALL                Install NT service
         REMOVE                 Remove NT service
         SERVE                  Run NT service
         START                  Start proxy
         STOP                   Stop proxy

         MACHINE &amp;lt; \\Machine&amp;gt;    Remote machine name [Local Computer] USERNAME     Remote machine username [Current Username] PASSWORD     Remote machine password [Current Password]
         PORT             Port to listen [4444] RELAY   Relay server and port [NA:4444]

        D:\Visual Studio 2005\Projects\CeleFusion\Release&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
    </entry>
  
    <entry>
      <title>战战兢兢刷机，平平稳稳测试</title>
      <link href="http://example.com/flashing-and-testing-my-phone/"/>
      <updated>2006-07-28T16:13:08+08:00</updated>
      <id>http://example.com/flashing-and-testing-my-phone</id>
      <content type="html">&lt;p&gt;上次刷繁体后在刷简体，死了机器，害了500银才修好。以至都有刷机恐惧症了。&lt;br/&gt;
但是现在 818 Pro 除了简体 WiFi 补丁，别人都能用，就是我没信号。以前修字库之前的繁体的版本都能用的，不死心，今天刷了繁体试验一下，果然繁体也不能用了。联系了一下维修的地方，说字库并非专用于 818 Pro 的，估计 99% 是这里的问题（已经有另一网友和我一样的情况）——换字库导致 WiFi 模块失效。正在等维修店家确认问题，看能否补救一下。&lt;/p&gt;

&lt;p&gt;还好，后面大胆试验，小心求证，终于又“随心所欲”地刷回简体了。除了 WiFi 的问题之外，PPC 终于完美了——输入法等等等等都完美了……&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>[转载]关于 CeleTask 的使用和评测文章</title>
      <link href="http://example.com/articles-about-celetask/"/>
      <updated>2006-07-25T14:17:13+08:00</updated>
      <id>http://example.com/articles-about-celetask</id>
      <content type="html">&lt;p&gt;最强大的任务进程管理器CeleTask简介&lt;br/&gt;
http://mobile.yesky.com/mobileskill/438/2385438.shtml&lt;br/&gt;
http://www.tompda.com/article/page/2006424/2006424_12_12250744_3040000_.asp&lt;/p&gt;

&lt;p&gt;谁更强 三款主流手机任务管理器横评&lt;br/&gt;
http://publish.it168.com/2006/0724/20060724006501.shtml&lt;/p&gt;

&lt;p&gt;任务进程我全管 手机任务管理器评测&lt;br/&gt;
http://publish.it168.com/2006/0711/20060711000601.shtml&lt;/p&gt;

&lt;p&gt;评测文章说的全是 CT 的好话，但我保证不是托：）&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>今天离职了，暂时失业中</title>
      <link href="http://example.com/leave-arcsoft/"/>
      <updated>2006-06-29T11:09:47+08:00</updated>
      <id>http://example.com/leave-arcsoft</id>
      <content type="html">&lt;p&gt;上午办完手续，正式离开待了3年的 ArcSoft。总的来说，对 ArcSof t感觉还好，特别是同事之间的关系和相处气氛。……长篇大论……不说了。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Nedekko 1.0.70 - Fly2000TV 电视广播插件</title>
      <link href="http://example.com/nedekko/"/>
      <updated>2006-06-02T05:27:33+08:00</updated>
      <id>http://example.com/nedekko</id>
      <content type="html">&lt;p&gt;Fly2000TV 是电视卡用户可以得到的、通用的、最好的电视观看和录制软件（个人观点，因为它够专业，但又不像DScaler那样不够产品化，DScaler界面粗制滥造，GPL软件的一贯风格！）&lt;/p&gt;

&lt;p&gt;在观看电视的时候，为了使其他人能往网络上收看电视节目，又不影响自己原来的看电视的习惯，所以我写了这个 Direct Show Filter。通过在 Fly2000TV 的播放图表中插入一个 Filter，在不影响原来程序的所有功能的基础上，添加了对视频和音频进行 WMV 编码和网络广播的功能。&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/Nedekko.gif&quot;&gt;&lt;img src=&quot;/assets/Nedekko.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(连接Audio Filter的时候用了点小技巧，会自动去查找并连接它)&lt;/p&gt;

&lt;p&gt;理论上，此Filter可以用于其它视频播放的场合。但是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;这是一个未成熟的开发阶段的程序，基本功能已经实现，并且好用——所以我目前没有继续完善它，对我来说够用了。&lt;/li&gt;
&lt;li&gt;我的电视卡是 10Moons TV Master FM，其它数字卡（MPEG流的）可能不支持（Fly2000TV可能也不支持这些卡）。&lt;/li&gt;
&lt;li&gt;所有的参数设置属性页，只是空有其表，并为实现（比如，强制绑定80端口，没的选择：）。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;使用方法：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;注册 Nedekko，RegSvr32.exe Nedekko.dll。&lt;/li&gt;
&lt;li&gt;在 Fly2000TV 上选择插入此 Filter，如下图：&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;/assets/Nedekko2.gif&quot;&gt;&lt;img src=&quot;/assets/Nedekko2.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;客户端使用Windows Media Player，输入服务器的地址：mms://xxx.xxx.xxx.xxx:80 即可。（建议服务器使用3322提供的动态域名，这样就可以通过不变的域名来访问：）&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;代码下载：&lt;a href=&quot;/assets/Nedekko%201.0.70.459.rar&quot;&gt;Nedekko 1.0.70.459.rar &lt;/a&gt;（Release 目录下的 DLL 为可用的 DirectShow Filter）&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>买了O2 XDA Neo</title>
      <link href="http://example.com/buy-o2-xda-neo/"/>
      <updated>2006-05-26T09:04:47+08:00</updated>
      <id>http://example.com/buy-o2-xda-neo</id>
      <content type="html">&lt;p&gt;对我自己来说，又一个新时代开始了……&lt;br/&gt;
3900 大洋，O2 的版本，和DOPOD 830一样的。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://img2.zol.com.cn/product/4_450x337/736/ceHfADEqzocv2.jpg&quot;&gt;&lt;img src=&quot;http://img2.zol.com.cn/product/4_450x337/736/ceHfADEqzocv2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;更多介绍可以看：http://mobile.zol.com.cn/27/270070.html&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Registry Workshop - 支持 Windows Mobile 的注册表编辑器</title>
      <link href="http://example.com/registry-workshop/"/>
      <updated>2006-05-21T16:42:46+08:00</updated>
      <id>http://example.com/registry-workshop</id>
      <content type="html">&lt;p&gt;一个功能强大的注册表编辑器，但我今天在这里介绍她不是因为它强大，而是因为它支持 Windows Mobile 的注册表编辑，用起来太好用了，快扔掉那个蹩脚的 CERegedit （貌似是 Microsoft 写的该死的东西）吧……&lt;/p&gt;

&lt;p&gt;支持收藏夹功能，有心的用户可以把 Windows Mobile 的技巧设置等等记录到注册表里面，还可以加上说明，给其它户用分享——这可以什么丫丫炫好多了……&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;
官方网站：http://www.torchsoft.com/（貌似中国人写的东西，但网站没有提供中文界面，所以请心安理得地从下面的地址下载该软件的最新破解版本）&lt;br/&gt;
绿色下载：http://www.down911.com/SoftView/SoftView_1396.html（简体中文绿色破解版本2.5.1，声明：此破解并非 Yonsm 制作，转载此软件仅用于研究及评论目的，请自行斟酌适当使用。）&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.torchsoft.com/images/rw_screenshot.gif&quot;&gt;&lt;img src=&quot;http://www.torchsoft.com/images/rw_screenshot.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以下文字引用自其它网站介绍：&lt;/p&gt;

&lt;p&gt;Registry Workshop 是一款高级的注册表编辑工具，能够完全替代 WIndows 系统自带的 RegEdit 注册表编辑器。除了RegEdit的特性外，Registry Workshop 提供许多其他功能提高注册表编辑操作效率：能够剪切，复制和粘贴注册项和键值名，还可以进行撤销和重做操作；能够快速地查找和替换所需注册项，键值名和字符串；允许编辑注册表文件同系统自带的注册表编辑器一样；并且提供容易使用和灵活的收藏夹功能。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>[转载]亚细亚的孤儿</title>
      <link href="http://example.com/orphans-in-asia-minor/"/>
      <updated>2006-04-11T04:17:21+08:00</updated>
      <id>http://example.com/orphans-in-asia-minor</id>
      <content type="html">&lt;p&gt;亚细亚的孤儿在风中哭泣&lt;br/&gt;
黄色的脸孔有红色的污泥&lt;br/&gt;
黑色的眼珠有白色的恐惧&lt;br/&gt;
西风在东方唱着悲伤的歌曲&lt;/p&gt;

&lt;p&gt;亚细亚的孤儿在风中哭泣&lt;br/&gt;
没有人要和你玩平等的游戏&lt;!-- more --&gt;&lt;br/&gt;
每个人都想要你心爱的玩具&lt;br/&gt;
亲爱的孩子你为何哭泣&lt;/p&gt;

&lt;p&gt;多少人在追寻那解不开的问题&lt;br/&gt;
多少人在深夜里无奈地叹息&lt;br/&gt;
多少人的眼泪在无言中抹去&lt;br/&gt;
亲爱的母亲这是什么道理&lt;br/&gt;
亲爱的母亲这是什么真理&lt;/p&gt;

&lt;p&gt;罗大佑&lt;/p&gt;

&lt;hr /&gt;
</content>
    </entry>
  
    <entry>
      <title>ARM平台上可能Crash的“正常代码”</title>
      <link href="http://example.com/normal-code-may-crash-on-arm/"/>
      <updated>2006-04-08T08:17:28+08:00</updated>
      <id>http://example.com/normal-code-may-crash-on-arm</id>
      <content type="html">&lt;p&gt;PBYTE p = new BYTE[i + 4];&lt;br/&gt;
PDWORD q = (PDWORD) (p + i);&lt;br/&gt;
*q = 0;&lt;/p&gt;

&lt;p&gt;上面几行代码在PC上是再正常不过的了（比如希望在某块Buffer后面几个字节置零），但是这几行“正常代码”却导致CeleTask运行起来Crash。&lt;!-- more --&gt;开始一头雾水，分析一下原因，印象中（因为我没有ARM上的开发经验，所以ARM细节不清楚。这好像是和Team同事hj聊天时听到的，所以是印象中）ARM平台上32位数的Load/Store必须到4字节对齐的地址上（类推，16位数必须对齐到2字节地址）。&lt;/p&gt;

&lt;p&gt;改成下面的代码就没问题了：&lt;/p&gt;

&lt;p&gt;PBYTE p = new BYTE[i + 4];&lt;br/&gt;
p_ = p[i+1] = p[i+2] = p[i+3] = 0;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>[转载]谁是民族英雄？</title>
      <link href="http://example.com/who-is-a-national-hero/"/>
      <updated>2006-04-02T19:59:34+08:00</updated>
      <id>http://example.com/who-is-a-national-hero</id>
      <content type="html">&lt;p&gt;　　3月27日，中央电视台播出了以清廷武力收复台湾为题材的电视连续剧《施琅大将军》，把连清朝统治者都瞧不起而列为“贰臣”（对清朝有功，却是前明的叛逆，所以称为“贰度忠臣”）的施琅捧上天，称为“著名爱国将领”。&lt;/p&gt;

&lt;p&gt;　　据中国官方媒体介绍，这部有明显的官方和军方背景的“重大历史题材”电视剧，“讲述了著名爱国将领施琅将军成功统一国家的历史过程。艺术再现了施琅将军为平定台湾，实现国家统一，贡献毕生精力的英雄壮举”。&lt;/p&gt;

&lt;p&gt;　　意大利学者克罗齐有句名言：“一切历史都是当代史。”显而易见，施琅能获得新的“历史评价”，是与中国官方处理台湾问题的“现实需要”分不开。可是，为了台湾问题而把施琅这样一个长期被视为“汉奸”的历史人物，树立成正面典型，未免有些思虑欠周，这必然会引起民意强烈反弹。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;　　果不其然，在官方媒体大力宣传《施琅大将军》的同时，大陆网站上就开始出现了口诛笔伐的声音，而且音量越来越大。甚至有网友模仿毛泽东&quot;老三篇&quot;之一的《纪念白求恩》，写了一篇极尽挖苦之能事，令人忍俊不住的《纪念施琅同志》。此处摘录一段，与大家分享：&lt;/p&gt;

&lt;p&gt;　　施琅是个军人，以杀人为职业，对杀人技术是精益求精：在八旗军系统中，他的杀人技术是很高明的。这对于一班鄙薄杀人工作以为不足道，以为无出路的人，也是一个很好的教训。 我和施琅同志只在电视上见过一面，没给他写点什么！今天CCTV拍了部37集的连续剧纪念这个三家奴才，可见他的精神感人之深。一个人能力有大小，但只要有奴性，就是一个高尚的人，一个纯粹的人，一个有利于皇上和朝廷的人。&lt;/p&gt;

&lt;p&gt;　　电视剧播出后，网上论争更是激烈。中国儒家网站“儒学联合论坛”（www.tomedu.com），最近就上演了一场“大陆新儒家”和“汉民族主义者”之间的大论战，双方激辩的焦点就是施琅到底是“解放台湾”的民族英雄，还是背叛“华夏正统”的卖国贼！这场争论还在持续，一些名人，如大陆新儒家代表人物之一的《原道》主编陈明博士，也卷入其中。大家如有兴趣，不妨上去论坛看看。&lt;/p&gt;

&lt;p&gt;　　本人无意卷入这场论战，只是想提出几个观察和问题，供大家思考：&lt;/p&gt;

&lt;p&gt;　　一、施琅和台湾郑氏是站在对立面的。既然把施琅称为“著名爱国将领”，还为他建立巨型塑像，就该剥夺郑成功的“民族英雄”称号，同时也得把他在厦门日光岩的巨型塑像拉倒砸烂。否则，人们很难理解背叛“民族英雄”的人，怎么能成为“爱国将领”。&lt;/p&gt;

&lt;p&gt;　　二、台湾郑氏被清廷视为“前明余孽”。既然扫荡台湾“前明余孽”的施琅可重新评价为“爱国将领”，那么在扫荡“前明余孽”战争中，挥师进缅甸，逼缅王交出永历帝，然后处死，为清廷立下更大功勋的吴三桂，是不是也应该重新评价，称他为“在促成祖国统一的伟大民族解放战争中作出巨大贡献的著名爱国将领”呢？&lt;/p&gt;

&lt;p&gt;　　三、除了施琅以外，其他一些为满清立下大功的“前明降臣叛将”，如洪承畴、尚可喜等著名的“汉奸”，近来都纷纷以“学术研讨会”名义打开翻案之风。既然如此，是不是也应该一视同仁，为汪精卫、周佛海等诸位先生举行“学术研讨会”呢？&lt;/p&gt;

&lt;p&gt;转自：http://www.zaobao.com/gj/zg060402_50..html&lt;br/&gt;
作者：张从兴&lt;br/&gt;
说明：Yonsm.NET 是一个非盈利目的的个人博客网站。转载此网文仅用于阅读收藏目的，并未征得原作者或媒体授权同意，如有异议请联系 Yonsm@163.com。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;下面是上文中提及的：&lt;br/&gt;
方竹笋 &lt;br/&gt;
( 二00六年三月三十日)&lt;br/&gt;
施琅同志是大明朝杰出的革命家、军事家、彻底的实践主义者，四十多岁了为了帮助满清的解放战争，在多尔滚的重金收买和康熙的关怀重用下，以三姓家奴的身分对一脉相承的同胞实施了无情的杀戮。&lt;br/&gt;
一个明朝重臣，以自己利益为动机，把大清国的解放事业当作他自己的事业，这是什么精神？这是国际主义的精神，这是有奶便是娘的精神，每个奴才都必须学习这种精神。努尔哈吃主义认为：封建主义国家的臣民要拥护游牧地半游牧地人民的解放斗争，游牧地半游牧地人民要拥护封建主义国家的解放斗争。施琅同志是实践了这一条努尔哈吃主义路线。我们奴才也要实践这一条路线。我们要和一切封建主义国家的臣民联合起来，要和大和民族的、大不列颠民族的、美利坚、日尔曼民族的一封建主义国家的臣民联合起来，才能解放我们的民族和臣民，解放世界的民族和臣民。这就是我们的国际主义，这就是我们用以反对狭隘民族主义和狭隘爱国主义的国际主义。&lt;br/&gt;
施琅同志毫不利人专门利已的精神，表现在他对工作的极端负责任，对皇上对朝庭的极端热忱。每个奴才都要学习他。从前线回来的人说到施琅，没有一个不佩服的，没有一个不为他的精神所感动的。全国的愤青，凡亲身受到施琅将军杀戮和亲眼看过施琅将军的残忍的，无不为这感动。&lt;br/&gt;
施琅是个军人，他以杀人为职业，对杀人技术是精益求精：在整个八旗军系统中，他的杀人技术是很高明的。这对于一班鄙薄杀人工作以为不足道 ，以为无出路的人，也是一个很好的教训。我和施琅同志只在电视上见过一面，因为很忙，没给他写点什么!!!今天CCTV拍了一部37集的连续剧纪念这个三家奴才，可见他的精神感人之深。一个人能力有大小，但只要有奴性，就是一个高尚的人，一个纯粹的人，一个有利于皇上和朝庭的人。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>发现GetModuleFileName未公开的功能</title>
      <link href="http://example.com/undocumented-getmodulefilename/"/>
      <updated>2006-03-18T16:56:43+08:00</updated>
      <id>http://example.com/undocumented-getmodulefilename</id>
      <content type="html">&lt;p&gt;PC 版本的 Windows 中提供了一个 GetModuleFileNameEx 来获取其它进程的可执行文件路径。但是在 Smartphone 中，并没有这个函数。翻遍了所有的文档，也没能发现简单或许其它进程完整路径的方法（ToolHelp API 等等，均不行，当然，复杂的方法，我还是能想出来，不过太得不偿失了）。&lt;/p&gt;

&lt;p&gt;现在深夜，突然忽发奇想，用Process ID作为参数，调用 GetModuleFileName((HMODULE) dwProcessID, tzPath, MAX_PATH) ，在 Windows Modile 5.0 Smartphone 和 Windows Modile 2003 Smartphone 中，竟然可以成功获取其它进程的 EXE 文件路径！真是——踏破铁鞋无觅处，得来全不费功夫。&lt;/p&gt;

&lt;p&gt;经过试验，在 SP2003/WM2005 中均可正常使用，按推测在，PPC中应该也没问题，不知道 普通的 WinCE 系统中是否也有这个功能。但是，在 PC 版 Windows 上，这样调用将导致失败。&lt;/p&gt;

&lt;p&gt;分析了以下原因，PC 版的 Windows 中，Process ID （类似0x00001010之类的值）仅仅是一个整数标识（类似索引一类的）；但是在 SP 中，Process ID （类似0x94344567之类的值）却代表了指向 ???? 的句柄一类的东西？……&lt;/p&gt;

&lt;p&gt;MSDN、WinCE/PPC/SP SDK以 及网上均未提及，Yonsm 绝对的 Un-documented 发现——一个莫名其妙的发现！&lt;/p&gt;

&lt;p&gt;哈哈哈哈……&lt;/p&gt;

&lt;p&gt;补充y一下：&lt;br/&gt;
在VS2005的MSDN里，在 Platform Builder for Microsoft Windows CE 5.0 -&gt; Tool Helper 的帮助中，终于不经意地又发现了一小段提示的话，说 Process ID 和 Thread ID 可以 Cast 成 Process Handle （但按 GetModuleFileName 的解释，Process Handle 依然不是它所能接受的参数） 和 Thread Handle。&lt;/p&gt;

&lt;p&gt;To use the process and thread identifiers with GetThreadTimes and other functions that take process handles, the identifiers can be cast directly to process and thread handles. However, accessing PROCESSENTRY32 for other processes requires using the SetProcPermissions function to enable access to the other process&#39;s slot.&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>AltID - 更改 GUID 的小工具</title>
      <link href="http://example.com/altid/"/>
      <updated>2006-03-15T10:32:50+08:00</updated>
      <id>http://example.com/altid</id>
      <content type="html">&lt;p&gt;原理：使用内存映射方式搜索文件中的GUID，并更改为自定义的GUID值……&lt;br/&gt;
用途：自己想象……&lt;br/&gt;
废话：无语……&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/AltID.zip&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>告一段落，轻松了……</title>
      <link href="http://example.com/come-to-relax/"/>
      <updated>2006-03-04T14:49:07+08:00</updated>
      <id>http://example.com/come-to-relax</id>
      <content type="html">&lt;p&gt;前段时间一直很忙，写BLOG感觉像是在灌水——把论坛上的毛病带到这里来了：）&lt;br/&gt;
工作中的项目到一个阶段性的成功了，终于可以抽出时间好好做一下自己想做的事。细数一下，我要做什么呢？嗯，我知道……&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>关于我的MPX200手机</title>
      <link href="http://example.com/on-my-mpx200-phone/"/>
      <updated>2006-03-02T12:07:03+08:00</updated>
      <id>http://example.com/on-my-mpx200-phone</id>
      <content type="html">&lt;p&gt;Smartphone/Pocket PC 的手机，HTC 才是主流，据说90%的手机都是HTC代工的。当初买MPX200的时候站错队了，现在研究手机ROM的人大部分都在HTC系列上（国内尤其是565/575） 。IOICN 论坛上WM2005刷得不亦乐乎，MPX200非主流的SP，只能看着WM2005干瞪眼——WMP不能全屏，只好用什么TCPMP看/听《李敖有话说》了——上下班路上各一集，倒也充分利用了MPX200。&lt;/p&gt;

&lt;p&gt;好久没有琢磨过SP系统了，开始有闲情，考虑一下升级CeleTask，据说，在WM2005中有个小问题——不过我只能在Emulator中调试，还是那个词：郁闷。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>随便弄了个“绿色淡雅”模版雏形</title>
      <link href="http://example.com/green-template-for-bo-blog/"/>
      <updated>2006-02-17T17:23:05+08:00</updated>
      <id>http://example.com/green-template-for-bo-blog</id>
      <content type="html">&lt;p&gt;在BlueGrey的基础上修改了一下，沿用我以前的BLOG风格，暂时做了个“绿色淡雅”风格的模版，先用着，还需要改进。&lt;/p&gt;

&lt;p&gt;随便说两句：BlueGrey的模版，感觉比起Bob的官方模版，从代码上来说，的确差了不少啊，细节体现功力（不是成败么）呀：&lt;br/&gt;
1.没考虑800&lt;em&gt;600，就差那么一点点，为什么不把800&lt;/em&gt;600分辨率一起兼容了呢，Bob的两款官方模版都是兼容的。(后面我将在官方模版的基础上“制作”“绿色淡雅”模版)&lt;br/&gt;
2.Thumb图片，Bob搞的都是400*300，其他人做的却是什么尺寸的都有，管理处就会显得风格不统一——没有体现Bob的用心啊&lt;/p&gt;

&lt;p&gt;再说说Bob，细节处还是有值得改进的地方，比如一些不太协调的 E 文单词，如 RSS、Tags 等，周围都是中文的，就显得骨孤零零的，未免有点不协调，若能改成国内通用的名词，如“聚合”（或订阅）、“标签”等，岂不更好？&lt;/p&gt;

&lt;p&gt;另外，Bo-Blog 从功能、模版设计、模块化、插件等等各方面都非常好，但是从模版美观角度说（不确切，应该是华丽程度），与另一个PHP+MySQL 的 ExBlog 确实有一段差距。&lt;/p&gt;

&lt;p&gt;夜，深了……&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>[转载]提高效率，图象扫描也要批量</title>
      <link href="http://example.com/article-for-cutefoto/"/>
      <updated>2006-02-16T11:25:39+08:00</updated>
      <id>http://example.com/article-for-cutefoto</id>
      <content type="html">&lt;p&gt;发现有人写 CuteFoto 的教程，竟然只是用来做扫描用途，大材小用、明珠暗投（不是我投的：）了……&lt;/p&gt;

&lt;p&gt;转自：&lt;a href=&quot;http://www.yesky.com/341/1919841.shtml&quot;&gt;http://www.yesky.com/341/1919841.shtml&lt;/a&gt;&lt;br/&gt;
或：&lt;a href=&quot;http://www.enet.com.cn/article/2005/0317/A20050317399234.shtml&quot;&gt;http://www.enet.com.cn/article/2005/0317/A20050317399234.shtml&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>在 MFC SDI 程序中实现多语言程序界面</title>
      <link href="http://example.com/multi-language-support-in-mfc-sdi-program/"/>
      <updated>2006-02-14T16:48:31+08:00</updated>
      <id>http://example.com/multi-language-support-in-mfc-sdi-program</id>
      <content type="html">&lt;p&gt;今天举个例子，说说怎样使用 &lt;a href=&quot;read.php?177&quot;&gt;CLanguage&lt;/a&gt; 类，在 MFC SDI 程序中实现多语言程序界面。&lt;/p&gt;

&lt;p&gt;因为 MFC 包装了一些字符串显示处理，所以与 Win32 工程中可能有一点点不一样。主要有两个地方:&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;因为语言列表菜单项是动态生成的，MFC 的机制导致这些菜单项是不可用的。所以必须在 Update Command UI 的时候，使语言列表菜单项可用。&lt;/li&gt;
&lt;li&gt;菜单提示是 CFrameWnd 实现的，我们必须重载他的 GetMenuString()，用 CLanguage 的 TranslateString() 替换它的 AfxLoadString() 载入资源字符串。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;下面说说简要的步骤吧:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;把 Language.h/cpp 加入到工程的，在 cpp 中 #include &quot;StdAfx.h&quot;。&lt;/li&gt;
&lt;li&gt;定义一个全局变量 g_hInst，在 InitInstance() 中使它赋值为资源模块句柄 (一般为 theApp.m_hInstance)。&lt;/li&gt;
&lt;li&gt;InitInstance() 中 调用 CLanguage::Initialize() 确定当前要使用的语言。&lt;/li&gt;
&lt;li&gt;CMainFrame::OnCreate() 中调用 CLanguage::TranslateMenu() 翻译主菜单。&lt;/li&gt;
&lt;li&gt;重载 CFrameWnd::GetMenuString()，用 CLanguage::TranslateString() 替换它的 AfxLoadString() 载入资源字符串。&lt;/li&gt;
&lt;li&gt;每个对话框的 OnInitdialog() 中调用 CLanguage::TranslateDialog() 翻译对话框。&lt;/li&gt;
&lt;li&gt;其它与 Win32 工程一样……&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;另外，如果在 MDI 中使用，可能稍有不一样，因为我在另一篇文章中说过，Popup Menu 的 位置不能改变。所以，每次切换语言的时候，必须使所有的 MDI 子窗口不要最大化 (因为最大化会在主菜单中加入一个图标菜单，那样 Popup 位置就变了)……&lt;/p&gt;

&lt;p&gt;看代码吧……&lt;/p&gt;

&lt;p&gt;下载: &lt;a href=&quot;/assets/1101305671.rar&quot;&gt;SdiML&lt;/a&gt; (34K，Visual C++ 6 项目)&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>用 INI 文件实现程序多语言界面</title>
      <link href="http://example.com/ini-language-engine/"/>
      <updated>2006-02-13T16:43:59+08:00</updated>
      <id>http://example.com/ini-language-engine</id>
      <content type="html">&lt;p&gt;&lt;strong&gt;一、优点&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;比起使用资源 DLL 实现多语言程序，INI 方式的具有更多的扩展性，任何一个普通用户都可以做出任何一种语言界面。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二、功能&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;为了做到完美的多语言程序，我们设计一个 CLanguage 静态类 (因为是静态类，改为 C 代码只要一点简单的工作)，应该实现如下功能：&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;每个语言一个 INI 文件 (特别地，把语言文件扩展名定为 .lng，符合 INI 格式)。&lt;/li&gt;
&lt;li&gt;没有外部语言情况下，使用程序内置的默认语言。&lt;/li&gt;
&lt;li&gt;能动态切换到任何一种语言 (包括内置语言)，而不是告诉用户切换语言要重新启动程序。&lt;/li&gt;
&lt;li&gt;没有选择语言的状态下 (比如程序刚安装)，自动根据当前用户环境选择语言文件 (如果有的话，没有则使用默认语言)。&lt;/li&gt;
&lt;li&gt;列出程序目录下的 .lng 文件，并加入到菜单中。&lt;/li&gt;
&lt;li&gt;不同的语言可能造成界面上不同的显示效果，所以应该允许在语言文件中指定字体 (程序的资源中还应该考虑不同语言的情况，如 Static Text 控件是否够宽，以容纳其它语言的文本)。&lt;/li&gt;
&lt;li&gt;使原有的程序做尽量少的改动，加入 CLanguage 后，作少量改动即可实现多语言。&lt;/li&gt;
&lt;li&gt;可以定义 #define _MAKELANG 宏，这样编译后，使程序自动生成语言文件。&lt;/li&gt;
&lt;li&gt;支持 UNICODE 方式编译。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;三、实现&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;先想想，程序中与语言相关的文本有哪些……，嗯……，不过就如下四个嘛：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;常量文本 (任何在代码中的 UI 文本)。&lt;/li&gt;
&lt;li&gt;资源文本。&lt;/li&gt;
&lt;li&gt;菜单文本。&lt;/li&gt;
&lt;li&gt;对话框文本。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;一个一个来，各个击破：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;常量文本: 放在语言文件的 [Text] 节中，每个文本对应一个 ID。程序中使用到常量文本的时候，如果语言文件中存在该 ID 的文本，则使用它，否则，使用内部的常量文本。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;资源文件: 放在语言文件的 [String] 节中，这个最简单了，就使用资源文本的 ID。原来所有使用 LoadString 的地方，改用 CLanguage::TraslateString，即现尝试从语言文件中载入文本。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;菜单文本: 放在语言文件的 [%菜单资源名%] 节中。当菜单被载入后，调用 CLanguage::TranslateMenu 翻译菜单。菜单的处理有点麻烦。如果菜单是命令项，则使用命令 ID 作为标识，如果是弹出项，则使用位置作为标识 (因此弹出菜单的位置不能改变，不过这点很容易做到)。另外，切换到内置语言的时候，需要重新载入菜单资源中的菜单文本，这个实现起来挺麻烦的，还要考虑是 MENU 还是 MENUEX 资源。嘿嘿，不过我都实现就是了，只管直接使用 :) ……&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对话框文本: 和菜单的实现方式差不多。对话框初始化后，调用 CLanguage::TranslateDialog 翻译对话框上的文本。对话框上的控件必须具有 ID (在此对话框内唯一，因为 不能再使用 IDC_STATIC 这种 ID 了)。同菜单一样，对话框也有切换到内置语言的问题，不过这里我忽略了它，因为我假设切换语言是在主窗口中进行，此时没有任何对话框显示的。如果是基于对话框的程序，可以仿造菜单的代码写一个从对话框资源中载入文本的代码，不过挺烦、难的，还是算了吧，变通一下，想法子重新 DialogBox 一遍，嘿嘿，搞定……&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;好了，开始写代码……&lt;/p&gt;

&lt;p&gt;.......&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;四、使用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;呵呵~~，搞定，Clanguage 部分声明如下:&lt;/p&gt;

&lt;p&gt;// 初始化语言，返回确定要使用的语言&lt;br/&gt;
static LANGID Initialize();&lt;/p&gt;

&lt;p&gt;// 列出语言到菜单中&lt;br/&gt;
static UINT List(HMENU hMenu);&lt;/p&gt;

&lt;p&gt;// 设置语言&lt;br/&gt;
static VOID Set(HMENU hMenu, UINT uLang);&lt;/p&gt;

&lt;p&gt;// 获取语言描述，比如语言是谁翻译制作什么的&lt;br/&gt;
static PTSTR GetDescription(HMENU hMenu, UINT uLang);&lt;/p&gt;

&lt;p&gt;// 获取常量文本&lt;br/&gt;
static PTSTR TranslateText(PCTSTR ptzName, PCTSTR ptzDefault = NULL);&lt;/p&gt;

&lt;p&gt;// 获取常量文本，并替换特殊字符 (替换换行和零字符，有时候要用到，比如多行文本，又比如 GetOpenFileName 使用到的 Filter 字符串列表，需要替换零字符)&lt;br/&gt;
static PTSTR TranslateTextEx(PCTSTR ptzName, PCTSTR ptzDefault = NULL);&lt;/p&gt;

&lt;p&gt;// 获取资源字符串&lt;br/&gt;
static PTSTR TranslateString(UINT uResID);&lt;/p&gt;

&lt;p&gt;// 更新菜单&lt;br/&gt;
static VOID TranslateMenu(HMENU hMenu, PCTSTR ptzResName);&lt;/p&gt;

&lt;p&gt;// 更新对话框&lt;br/&gt;
static VOID TranslateDialog(HWND hWnd, PCTSTR ptzResName);&lt;/p&gt;

&lt;p&gt;常量文本因为需要指定关联 ID，所以应该放在一起 (即使不是多语言，也应该养成习惯，把所有的字符串放在一起，用宏来引用这些字符串) 。在 Language.h 中，我定义了如下四个宏，下面是其中两个:&lt;/p&gt;

&lt;h1&gt;define _Lang(n, a) CLanguage::TranslateText(TEXT(#n), TEXT(a))&lt;/h1&gt;

&lt;h1&gt;define _LangEx(n, a) CLanguage::TranslateTextEx(TEXT(#n), TEXT(a)) // 多行文本或字符串组&lt;/h1&gt;

&lt;p&gt;比如用到以下常量字符串，都放在 Define.h 中吧:&lt;/p&gt;

&lt;h1&gt;define LNG_Ready _Lang(0, &quot;Ready.&quot;)&lt;/h1&gt;

&lt;h1&gt;define LNG_BmpFilter _LangEx(1, &quot;Bitmap Files(&lt;em&gt;.bmp)&lt;/em&gt;.bmp&quot;)&lt;/h1&gt;

&lt;p&gt;... (等等，ID 不重复，为了美观，连续递增比较好看:)&lt;/p&gt;

&lt;p&gt;具体使用看代码吧，三言两句讲不清楚，还有不少注意事项的，挺晚的了，我要看看电视睡觉了……&lt;/p&gt;

&lt;p&gt;下载: &lt;a href=&quot;/assets/1101221272.rar&quot;&gt;MultiLang&lt;/a&gt; (32 KB，包括示例代码和可重用 CLanguage 静态类)&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>从 TWAIN 设备中扫描图像</title>
      <link href="http://example.com/scan-images-from-a-twain-device/"/>
      <updated>2006-02-12T16:27:24+08:00</updated>
      <id>http://example.com/scan-images-from-a-twain-device</id>
      <content type="html">&lt;h3&gt;一、简介&lt;/h3&gt;

&lt;p&gt;TWAIN 数据源管理程序 (DSM) 工业标准的软件库，用于从静态图像设备提取图像。绝大部分的扫描仪和数码相机都提供了 TWAIN 驱动程序，利用统一的 TWAIN 接口，应用程序可以非常方便地从这些设备中获取图像。&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/p&gt;

&lt;h3&gt;&lt;/h3&gt;

&lt;p&gt;二、使用步骤&lt;/p&gt;

&lt;p&gt;互联网上关于 TWAIN 编程的中文资料很少，代码更是难找到，因为我不得不仔细阅读了 &lt;a href=&quot;http://www.twain.org/&quot;&gt;http://www.twain.org/&lt;/a&gt; 提供的 TWAIN Specification。下面说说使用 TWAIN 接口获取图像的简要步骤。&lt;/p&gt;

&lt;p&gt;Windows 系统中存在一个 TWAIN_32.dll，所有的 TWAIN 操作都是通过这个 DLL 导出的 DSM_Entry 函数来实现的 (说实在话，我个人觉得 TWAIN 接口设计得太差了，看看 MS 的WIA，逻辑上非常清晰)。这个函数的声明如下:&lt;/p&gt;

&lt;p&gt;TW_UINT16 FAR PASCAL DSM_Entry(&lt;br/&gt;
pTW_IDENTITY pOrigin, // Source of message&lt;br/&gt;
pTW_IDENTITY pDest, // Destination of message&lt;br/&gt;
TW_UINT32 DG, // Data group ID: DG_xxxx&lt;br/&gt;
TW_UINT16 DAT, // Data argument type: DAT_xxxx&lt;br/&gt;
TW_UINT16 MSG, // Message ID: MSG_xxxx&lt;br/&gt;
TW_MEMREF pData // Pointer to data&lt;br/&gt;
);&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;打开 DSM (Data Source Manager: 数据源管理器)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;TWAIN 是一个数据源管理程序，应用程序首先要使用 MSG_OPENDSM 消息，打开数据源管理器。这里需要指定一个窗口句柄，应用程序应该在此窗口的消息循环中处理 TWAIN 消息 (MSG_PROCESSEVENT)。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;选择 DS (Data Source: 数据源)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;因为一个系统中可能存在多个 TWAIN 设备，因此必须选择一个数据源。选择数据源通常有两种方式: 选择默认数据源 (MSG_GETDEFAULT) 和显示选择数据源对话框，由用户来选择数据源 (MSG_USERSELECT)。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;打开 DS&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;使用 MSG_OPENDS 消息打开数据源。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;设置参数&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;消息为 MSG_SET，设置各种参数，如获取方式、图像数量等。有些参数由设备驱动支持才有效。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;显示扫描界面&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;使用 MSG_ENABLEDS 消息，显示设备驱动提供的用户界面 (UI)。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;获取图像&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;如果用户选择扫描什么的，可以在窗口的消息循环中获取到这个事件 (MSG_XFERREADY)。此时，应用程序可以通过 DAT_SETUPFILEXFER 设置文件名，然后用 DAT_IMAGEFILEXFER 获取图像到文件中。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;关闭扫描界面&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;在窗口的消息循环中获取到 MSG_CLOSEDSREQ 或 MSG_CLOSEDSOK 消息，可以关闭扫描界面 (MSG_DISABLEDS)。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;关闭 DS&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;消息为 MSG_CLOSEDS。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;关闭数据源&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;消息为 MSG_CLOSEDSM。&lt;/p&gt;

&lt;h3&gt;&lt;/h3&gt;

&lt;p&gt;三、CTwainHelper 助手类&lt;/p&gt;

&lt;p&gt;为了使用方便，我写了一个静态 TWAIN 助手类 CTwainHelper。使用 CTwainHelper 的五个函数，就可以简单地从 TWAIN 设备获取图像到文件中。使用方法如下:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;调用 CTwainHelper::Initialize() 确定是否有可用的设备。&lt;/li&gt;
&lt;li&gt;在窗口消息循环中，调用 CTwainHelper::ProcessMessage() 处理 TWAIN 消息。&lt;/li&gt;
&lt;li&gt;要获取图像时，调用 CTwainHelper::GetImage()。&lt;/li&gt;
&lt;li&gt;如果图像已准备好 (如用户确定扫描图像)，窗口会收到 WM_COMMAND 消息，wParam 为 IDC_TwainHelper。此时应用程序可以调用 CTwainHelper::TransferImage() 获取图像到文件中。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;具体使用方法请参看示例代码。&lt;/p&gt;

&lt;p&gt;CTwainHelper 可以在 Visual C++ 6.x/7.x 工程中使用，支持 UNICODE 编译。因为是静态类，要改写成 C 代码只需要做一点点少量的工作。&lt;/p&gt;

&lt;h3&gt;四、后话&lt;/h3&gt;

&lt;p&gt;当然，上面只是一种常用的步骤。其实应用程序完全可以自定义所有的步骤，比如不使用 TWAIN 驱动提供扫描对话框而直接扫描，或者扫描图像到内存中等等。详细情况请参考 TWAIN Specification，步骤大同小异，消息和参数千差万别，仔细看看应该很容易的。&lt;/p&gt;

&lt;p&gt;如果没有 TWAIN 设备又要进行 TWAIN 程序开发，可以到 TWAIN 官方网站下载 TWAIN Developers Toolkit，安装后会有一个虚拟的 TWAIN 设备。不过应用程序在这个虚拟 TWAIN 设备中正常工作，不代表一定能在实际的 TWAIN 设备正常使用，这点需要注意。以前 CTwainHelper 就碰到过这样的情况 在虚拟 TWAIN 设备中明明是好的，在我的扫描仪上却不能扫描图像。检查后发现，原来设置了不支持的参数。&lt;/p&gt;

&lt;p&gt;最后，TWAIN 是 Technology Without A Interesting Name 缩写，直译为没有“没有让人感兴趣名字的技术”，真是一个让人摸不着头脑的名字。&lt;/p&gt;

&lt;p&gt;TWAIN 助手类: &lt;a href=&quot;/assets/1099925198.rar&quot;&gt;CTwainHelper&lt;/a&gt; (包含示例代码 35K)&lt;br/&gt;
TWAIN 官方网站: &lt;a href=&quot;http://www.twain.org/&quot;&gt;http://www.twain.org&lt;/a&gt;&lt;br/&gt;
TWAIN 头文件: &lt;a href=&quot;http://www.twain.org/devfiles/twain.h&quot;&gt;http://www.twain.org/devfiles/twain.h&lt;/a&gt;&lt;br/&gt;
TWAIN Specification: &lt;a href=&quot;http://www.twain.org/docs/Spec1_9_197.pdf&quot;&gt;http://www.twain.org/docs/Spec1_9_197.pdf&lt;/a&gt;&lt;br/&gt;
TWAIN Developers Toolkit: &lt;a href=&quot;http://www.twain.org/devfiles/twainkit.exe&quot;&gt;http://www.twain.org/devfiles/twainkit.exe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2006.2.22] 下面是更简单的版本，其中的 GetImage 函数内部自动具有消息循环，直到TWAIN对话框完全关闭后才会返回，适合任何场合使用：&lt;br/&gt;
&lt;a href=&quot;/assets/TwainHelper.rar&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>#pragma 指示符应用举例</title>
      <link href="http://example.com/examples-of-pragma/"/>
      <updated>2006-02-11T16:27:20+08:00</updated>
      <id>http://example.com/examples-of-pragma</id>
      <content type="html">&lt;p&gt;_[Bo-Blog 1.x 到 2.0 的升级程序竟然出现数据丢失现象，导致丢失了好几篇文档，故手动贴上] _&lt;/p&gt;

&lt;p&gt;尽管 C 和 C++ 都已经有标准，但是几乎每个编译器 (广义，包含连接器等) 扩展一些 C/C++ 关键字。合理地应用这些关键字，有时候能使我们的工作非常方便。下面随便说说 Visual C++ 中 #pragma 指示符的使用。&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一、用#pragma导出DLL函数&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;传统的到出 DLL 函数的方法是使用模块定义文件 (.def)，Visual C++ 提供了更简洁方便的方法，那就是&quot;__declspec()&quot;关键字后面跟&quot;dllexport&quot;，告诉连接去要导出这个函数，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__declspec(dllexport) int __stdcall MyExportFunction(int iTest);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;把&quot;&lt;em&gt;_declspec(dllexport)&quot;放在函数声明的最前面，连接生成的 DLL 就会导出函数&quot;&lt;/em&gt;MyExportFunction@4&quot;。&lt;/p&gt;

&lt;p&gt;上面的导出函数的名称也许不是我的希望的，我们希望导出的是原版的&quot;MyExportFunction&quot;。还好，VC 提供了一个预处理指示符&quot;#pragma&quot;来指定连接选项 (不仅仅是这一个功能，还有很多指示功能) ，如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#pragma comment(linker,&quot;/EXPORT:MyExportFunction=_MyExportFunction@4&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这下就天如人愿了：）。如果你想指定导出的顺序，或者只将函数导出为序号，没有 Entryname，这个预处理指示符 (确切地说是连接器) 都能够实现，看看 MSDN 的语法说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/EXPORT:entryname[,@ordinal[,NONAME]][,DATA]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;@ordinal 指定顺序；NONAME 指定只将函数导出为序号；DATA 关键字指定导出项为数据项。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二、指示文件只包含一次&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在头文件中，一般在整个工程中我们只要包含一次就够了，但是如果我在多个 .c/.cpp 文件中都要包含着个头文件，比如 Windows.h，那很多声明等等岂不是有两次了？解决这个问题的传统的方法是在头文件开始出用 #define 定义一个宏，比如 Windows.h 中:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div style=&quot;color: #2222aa; background-color: #f5f5f0&quot;&amp;gt; 

#ifndef _WINDOWS_&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; #define _WINDOWS_
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  然后在文件结为加上 #endif，这样就可以避免被包含多次。但是这样的后果是代码的可读性较差 (个人观点)，VC 给我们提供了另外一个途径，那就是在文件的前面加上:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#pragma once
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;   是不是很方便？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三、使警告无效&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;   有时候我们不得不对变量进行强制转换，由此引来编译器的一番警告，特别是 C++ 中，类型检查相对于 C 更为严格。这虽然不影响什么，但是看起来多不爽----我是故意要这样的，你警告什么！：）这时候你看到警告类型，比如&quot;warning C4311: &quot;类型转换&quot; : 从&quot;HHOOK&quot;到&quot;BOOL&quot;的指针截断&quot;，在前面加上:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#pragma warning(disable: 4311)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  编译器就没话说了：）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;四、指定连接要使用的库&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;   比如我们连接的时候用到了 WSock32.lib，你当然可以不辞辛苦地把它加入到你的工程中。但是我觉得更方便的方法是使用 #pragma 指示符，指定要连接的库:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#pragma comment(lib, &quot;WSock32.lib&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;五、显示编译消息&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;**&lt;br/&gt;
    没多少用处，举个例子吧:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#ifdef _DEBUG&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; #pragma message(&quot;编译连接为调试模式...&quot;)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; #endif // _DEBUG
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  其实&quot;#pragma&quot;的功能远远不止于此，以上只是冰山一角而已。具体的使用方法，详细情况清参看 MSDN，这里仅仅是说说有这些功能而已：）&lt;/p&gt;

&lt;p&gt;**    没多少用处，举个例子吧:&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;

&lt;p&gt;**&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>naked 函数调用</title>
      <link href="http://example.com/naked-function-calls/"/>
      <updated>2006-02-10T16:35:38+08:00</updated>
      <id>http://example.com/naked-function-calls</id>
      <content type="html">&lt;p&gt;正常的情况下，我们写一个 C/C++ 函数，即使是一个空函数，编译器也为我们做了不少的工作，生成了一些&quot;必要&quot;的代码。请看下面的函数 (为了说明问题随便写的):&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int Test()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; { &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     int iReturn;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     char szTemp[33];&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     szTemp[0] = &#39;A&#39;;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     szTemp[1] = &#39;&#39;;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     iReturn = MessageBox(NULL, szTemp, szTemp, MB_OK);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     MessageBeep(iReturn);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     return iReturn;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面是用 VC6 在 Release 方式下编译后的的反汇编代码:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;00401000   sub         esp,24h     // 增加堆栈空间存放局部变量 (24H = 36D，4 字节对齐，注意这里没有为 iReturn 分配空间)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 00401003   push        esi         // 保存要使用的重要寄存器&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 00401004   lea         eax,[esp+4] // 下面是传递 MessageBox() 要使用的参数&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 00401008   push        0&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 0040100A   lea         ecx,[esp+8] // 编译器愚蠢，根本不用 ECX，两个都是 szTemp，两次 PUSH EAX 不得了&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 0040100E   push        eax&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 0040100F   push        ecx&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 00401010   push        0&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 00401012   mov         byte ptr [esp+14h],41h&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 00401017   mov         byte ptr [esp+15h],0&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 0040101C   call        dword ptr ds:[40509Ch] // 调用 MessageBox()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 00401022   mov         esi,eax     // 保存返回值到变量 iReturn 。靠！变量 iReturn 自动使用 ESI，编译器太聪明了：）&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 00401024   push        esi&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 00401025   call        dword ptr ds:[4050A0h] // 调用 MessageBeep()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 0040102B   mov         eax,esi     // 把变量 iReturn 交给 EAX 作为返回值&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 0040102D   pop         esi         // 恢复要使用的重要寄存器&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 0040102E   add         esp,24h     // 减少堆栈空间&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 00401031   ret                     // 堆栈长度减 4 并返回&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这段代码虽然很精干 (都能自动使用寄存器来保存变量了)，但是有的时候我们并不需要编译器提供这些自作主张的代码 (比如写驱动程序的时候，不过我还没遇到过这种情况，呵呵&lt;del&gt;)，我们希望整个全部函数都是自己亲手写进去的 (BT 呀&lt;sup&gt;o&lt;/sup&gt;^)。好，请出今天的主角 ---- &quot;naked&quot;(怎么是裸体呀？)，欢迎！Visual C++ 的扩展关键字 naked 允许我们完全定制一个函数，废话不说了，看例子 (熬夜写的 Zzzzzz&lt;/del&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;__declspec(naked) int Test()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; { &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     __asm&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     { &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;         SUB         ESP,24H&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;         PUSH        ESI&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;         LEA         EAX,[ESP+4]&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;         PUSH        0                      &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;         PUSH        EAX                    &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;         PUSH        EAX                    &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;         PUSH        0                      &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;         MOV         BYTE PTR [ESP+14H],41H &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;         MOV         BYTE PTR [ESP+15H],0   &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;         CALL        DWORD PTR [MessageBoxA] &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;         MOV         ESI,EAX&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;         PUSH        ESI                    &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;         CALL        DWORD PTR [MessageBeep] &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;         MOV         EAX,ESI&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;         POP         ESI&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;         ADD         ESP,24H&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;         RET&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的代码是使用的 VC 的内联汇编，和 VC 编译后生成的代码完全是一样的 (很有完全控制的成就感吧^_^)。上面我们并没有又节省什么 (节省的 PUSH ECX 并不是 naked 的功劳)，但是有的时候确实需要的 (举不出例子来了，倒！)。最后随便说说注意事项:&lt;/p&gt;

&lt;p&gt;1.使用 naked 关键字需要自己构建 EBP 参数指针 (如果用到了 EBP 作为参数指针的话)；&lt;br/&gt;
2.必须自己使用 RET 或 RET n 指令返回 (除非你不返回)。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>在 Visual C++ 中使用内联汇编</title>
      <link href="http://example.com/inline-assembler-in-vc/"/>
      <updated>2006-02-06T16:37:43+08:00</updated>
      <id>http://example.com/inline-assembler-in-vc</id>
      <content type="html">&lt;p&gt;一、 优点&lt;/p&gt;

&lt;p&gt;使用内联汇编可以在 C/C++ 代码中嵌入汇编语言指令，而且不需要额外的汇编和连接步骤。在 Visual C++ 中，内联汇编是内置的编译器，因此不需要配置诸如 MASM 一类的独立汇编工具。这里，我们就以 Visual Studio .NET 2003 为背景，介绍在 Visual C++ 中使用内联汇的相关知识（如果是早期的版本，可能会有些许出入）。&lt;/p&gt;

&lt;p&gt;内联汇编代码可以使用 C/C++ 变量和函数，因此它能非常容易地整合到 C/C++ 代码中。它能做一些对于单独使用 C/C++ 来说非常笨重或不可能完成的任务。&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;内联汇编的用途包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用汇编语言编写特定的函数；&lt;/li&gt;
&lt;li&gt;编写对速度要求非常较高的代码；&lt;/li&gt;
&lt;li&gt;在设备驱动程序中直接访问硬件；&lt;/li&gt;
&lt;li&gt;编写 naked 函数的初始化和结束代码。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;二、 关键字&lt;/p&gt;

&lt;p&gt;使用内联汇编要用到 __asm 关键字，它可以出现在任何允许 C/C++ 语句出现的地方。我们来看一些例子：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;简单的 __asm 块：&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;__asm&lt;br/&gt;
&amp;leftsign;&lt;br/&gt;
MOV AL, 2&lt;br/&gt;
MOV DX, 0xD007&lt;br/&gt;
OUT AL, DX&lt;br/&gt;
&amp;rightsign;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在每条汇编指令之前加 __asm 关键字：&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;asm MOV AL, 2&lt;br/&gt;
&lt;/strong&gt;asm MOV DX, 0xD007&lt;br/&gt;
__asm OUT AL, DX&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;因为 __asm 关键字是语句分隔符，所以可以把多条汇编指令放在同一行：&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;asm MOV AL, 2 &lt;/strong&gt;asm MOV DX, 0xD007 __asm OUT AL, DX&lt;/p&gt;

&lt;p&gt;显然，第一种方法与 C/C++ 的风格很一致，并且把汇编代码和 C/C++ 代码清楚地分开，还避免了重复输入 __asm 关键字，因此推荐使用第一种方法。&lt;/p&gt;

&lt;p&gt;不像在 C/C++ 中的&quot;&amp;leftsign;&amp;rightsign;&quot;，&lt;strong&gt;asm 块的&quot;&amp;leftsign;&amp;rightsign;&quot;不会影响 C/C++ 变量的作用范围。同时，&lt;/strong&gt;asm 块可以嵌套，而且嵌套也不会影响变量的作用范围。&lt;/p&gt;

&lt;p&gt;为了与低版本的 Visual C++ 兼容，_asm 和 &lt;strong&gt;asm 具有相同的意义。另外，Visual C++ 支持标准 C++ 的 asm 关键字，但是它不会生成任何指令，它的作用仅限于使编译器不会出现编译错误。要使用内联汇编，必须使用 &lt;/strong&gt;asm 而不是 asm 关键字。&lt;/p&gt;

&lt;p&gt;三、 汇编语言&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;指令集&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;内联汇编支持 Intel Pentium 4 和 AMD Athlon 的所有指令。更多其它处理器的指令可以通过 &lt;em&gt;EMIT 伪指令来创建（&lt;/em&gt;EMIT 伪指令说明见下文）。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;MASM 表达式&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;在内联汇编代码中，可以使用所有的 MASM 表达式（MASM 表达式是指用来计算一个数值或一个地址的操作符和操作数的组合）。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;数据指示符和操作符&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;虽然 &lt;strong&gt;asm 块中允许使用 C/C++ 的数据类型和对象，但它不能使用 MASM 指示符和操作符来定义数据对象。这里特别指出，&lt;/strong&gt;asm 块中不允许 MASM 中的定义指示符（DB、DW、DD、DQ、DT 和 DF），也不允许使用 DUP 和 THIS 操作符。MASM 中的结构和记录也不再有效，内联汇编不接受 STRUC、RECORD、WIDTH 或者 MASK。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;EVEN 和 ALIGN 指示符&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;尽管内联汇编不支持大多数 MASM 指示符，但它支持 EVEN 和 ALIGN。当需要的时候，这些指示符在汇编代码里面加入 NOP 指令（空操作）使标号对齐到特定边界。这样可以使某些处理器取指令时具有更高的效率。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;MASM 宏指示符&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;内联汇编不是宏汇编，不能使用 MASM 宏指示符（MACRO、REPT、IRC、IRP 和 ENDM）和宏操作符（&amp;lt;&gt;、!、&amp;amp;、% 和 .TYPE）。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;段&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;必须使用寄存器而不是名称来指明段（段名称&quot;_TEXT&quot;是无效的）。并且，段跨越必须显式地说明，如 ES:[EBX]。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;类型和变量大小&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;在内联汇编中，可以用 LENGTH、SIZE 和 TYPE 来获取 C/C++ 变量和类型的大大小。&lt;br/&gt;
* LENGTH 操作符用来取得 C/C++ 中数组的元素个数（如果不是一个数组，则结果为 1）。&lt;br/&gt;
* SIZE 操作符可以获取 C/C++ 变量的大小（一个变量的大小是 LENGTH 和 TYPE 的乘积）。&lt;br/&gt;
* TYPE 操作符可以返回 C/C++ 类型和变量的大小（如果变量是一个数组，它得到的是数组中单个元素的大小）。&lt;/p&gt;

&lt;p&gt;例如，程序中定义了一个 8 维的整数型变量：&lt;/p&gt;

&lt;p&gt;int iArray[8];&lt;/p&gt;

&lt;p&gt;下面是 C 和汇编表达式中得到的 iArray 及其元素的相关值：&lt;/p&gt;

&lt;p&gt;__asm C Size&lt;/p&gt;

&lt;p&gt;LENGTH iArray sizeof(iArray)/sizeof(iArray[0]) 8&lt;br/&gt;
SIZE iArray sizeof(iArray) 32&lt;br/&gt;
TYPE iArray sizeof(iArray[0]) 4&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;注释&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;内联汇编中可以使用汇编语言的注释，即&quot;;&quot;。例如：&lt;/p&gt;

&lt;p&gt;__asm MOV EAX, OFFSET pbBuff ; Load address of pbBuff&lt;/p&gt;

&lt;p&gt;因为 C/C++ 宏将会展开到一个逻辑行中，为了避免在宏中使用汇编语言注释带来的混乱，内联汇编也允许使用 C/C++ 风格的注释。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;_EMIT 伪指令&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;em&gt;EMIT 伪指令相当于 MASM 中的 DB，但是 &lt;/em&gt;EMIT 一次只能在当前代码段（.text 段）中定义一个字节。例如：&lt;/p&gt;

&lt;p&gt;&lt;em&gt;_asm&lt;br/&gt;
&amp;leftsign;&lt;br/&gt;
JMP &lt;/em&gt;CodeLabel&lt;/p&gt;

&lt;p&gt;&lt;em&gt;EMIT 0x00 ; 定义混合在代码段的数据&lt;br/&gt;
&lt;/em&gt;EMIT 0x01&lt;/p&gt;

&lt;p&gt;&lt;em&gt;CodeLabel: ; 这里是代码&lt;br/&gt;
&lt;/em&gt;EMIT 0x90 ; NOP指令&lt;br/&gt;
&amp;rightsign;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;寄存器使用&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;一般来说，不能假定某个寄存器在 &lt;strong&gt;asm 块开始的时候有已知的值。寄存器的值将不能保证会从 &lt;/strong&gt;asm 块保留到另外一个 __asm 块中。&lt;/p&gt;

&lt;p&gt;如果一个函数声明为 &lt;strong&gt;fastcall 调用方式，则其参数将通过寄存器而不是堆栈来传递。这将会使 &lt;/strong&gt;asm 块产生问题，因为函数无法被告知哪个参数在哪个寄存器中。如果函数接收了 EAX 中的参数并立即储存一个值到 EAX 中的话，原来的参数将丢失掉。另外，在所有声明为 &lt;strong&gt;fastcall 的函数中，ECX 寄存器是必须一直保留的。为了避免以上的冲突，包含 &lt;/strong&gt;asm 块的函数不要声明为 __fastcall 调用方式。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;提示：如果使用 EAX、EBX、ECX、EDX、ESI 和 EDI 寄存器，你不需要保存它。但如果你用到了 DS、SS、SP、BP 和标志寄存器，那就应该用 PUSH 保存这些寄存器。&lt;/li&gt;
&lt;li&gt;提示：如果程序中改变了用于 STD 和 CLD 的方向标志，必须将其恢复到原来的值。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;四、 使用 C/C++ 元素&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;可用的 C/C++ 元素&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;C/C++ 与汇编语言可以混合使用，在内联汇编中可以使用 C/C++ 变量以及很多其它的 C/C++ 元素，包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;符号，包括标号、变量和函数名；&lt;/li&gt;
&lt;li&gt;常量，包括符号常量和枚举型成员；&lt;/li&gt;
&lt;li&gt;宏定义和预处理指示符；&lt;/li&gt;
&lt;li&gt;注释，包括&quot;/**/&quot;和&quot;//&quot;；&lt;/li&gt;
&lt;li&gt;类型名，包括所有 MASM 中合法的类型；&lt;/li&gt;
&lt;li&gt;typedef 名称，通常使用 PTR 和 TYPE 操作符，或者使用指定的的结构或枚举成员。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;在内联汇编中，可以使用 C/C++ 或汇编语言的基数计数法。例如，0x100 和 100H 是相等的。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;操作符使用&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;内联汇&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>启用顶级域名 Yonsm.NET</title>
      <link href="http://example.com/register-yonsm-net/"/>
      <updated>2006-01-18T16:00:00+08:00</updated>
      <id>http://example.com/register-yonsm-net</id>
      <content type="html">&lt;p&gt;启用顶级域名 Yonsm.NET，这下是真正 Yonsm.NET 了。当然，也可以用 &lt;a href=&quot;/&quot;&gt;www.Yonsm.net&lt;/a&gt; 访问我的BLOG。&lt;/p&gt;

&lt;p&gt;欢迎&lt;a href=&quot;javascript:window.external.AddFavorite(&quot; title=&quot;http://www.yonsm.net&#39;,%20&#39;Yonsm.NET&quot;&gt;收藏&lt;/a&gt;;)新网址到你的收藏夹。另外，请链接了原BLOG网址的朋友更新你网站上的链接，谢谢！&lt;/p&gt;

&lt;p&gt;这个域名是 vBin 帮忙搞的，60 元一年，如果你需要域名或虚拟主机服务，不妨联系他：&lt;a href=&quot;mailto:vbin@163.net&quot;&gt;vbin@163.net&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>年年岁岁车相似，岁岁年年票不同</title>
      <link href="http://example.com/no-train-ticket/"/>
      <updated>2006-01-18T11:27:57+08:00</updated>
      <id>http://example.com/no-train-ticket</id>
      <content type="html">&lt;p&gt;不同点是是：&lt;strong&gt;一年更比一年难买&lt;/strong&gt;！XX部副部长竟然还厚颜无耻的说这种情况在2010年将会有所改观——做事风格不变，铁路公路再长两倍，飞机再翻N翻，也是枉然！&lt;/p&gt;

&lt;p&gt;以下文字转载自：http://news.phoenixtv.com/phoenixtv/83887291180777472/20060116/730448.shtml&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;不要轻易说“春运只能遭罪” &lt;/strong&gt;
2006年01月16日 10:04    来源：南方都市报&lt;/p&gt;

&lt;p&gt;2006年的春运于昨日拉开了帷幕。几乎是每年春运的拷贝版，打开媒体，展示给我们的是一幕幕让人惊心的镜头：火车站里人山人海，订票口前长队蜿蜒，有人让票贩子骗走了订票款，有人怕挤不到厕所竟然准备好了纸尿裤……&lt;/p&gt;

&lt;p&gt;正如媒体所言，春运工作俨然成了中国人每年都不能回避的一场“硬仗”。每年交通部门都会“精心安排”，“积极备战”，后来都会“圆满完成旅客发送任务”。但毋庸讳言，春运在很多人脑海里留下的回忆却是“花了钱，遭了罪”。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;有人认为，春运遭罪，根本上还是由于中国人多，“遭罪不可避免”！“不可避免论”似乎不无道理，但还是应该问一句，我们是否已经穷尽了一切办法？只要还有一丁点努力的空间，就请不要轻易说出“只能如此”的话来。&lt;/p&gt;

&lt;p&gt;教育部门是不是只能几乎“一刀切”的集中放寒假？铁路部门是不是只能让学校提前几个月订团体票？公安部门是不是对火车站周围嚣张的票贩子真的就束手无策？政府部门是不是一定都需要上班到除夕当晚才集体放假？买不到中转票的弱势旅客是不是只能在火车站广场上等待一天又一天？平日里一个又一个大型交易会都可以容纳的城市，是不是一定要将订票窗口开到冰天雪地的露天里？&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>转移网站空间，升级 BO-BLOG</title>
      <link href="http://example.com/host-transfer-and-update-bo-blog/"/>
      <updated>2006-01-14T19:47:05+08:00</updated>
      <id>http://example.com/host-transfer-and-update-bo-blog</id>
      <content type="html">&lt;p&gt;转移到新的网站空间上，如果你收藏了 http://Yonsm.reg365.com，请更新为 &lt;a href=&quot;/&quot;&gt;HTTP://WWW.Yonsm.NET&lt;/a&gt;。 感谢好友 Yicho 提供的有快又好用的 PHP 空间。 同时，感谢 vBin 为我提供了 1 年多的 BLOG 空间。 如果想访问老的绿色风格的 BLOG，请访问：http://Yonsm.reg365.com/index.php。旧的模版风格我个人认为非常好看，只是暂时还没有时间去做 2.0 的模版，过段时间应该会做吧。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>DyNaS - 自动拨号及动态域名注册工具</title>
      <link href="http://example.com/dynas/"/>
      <updated>2005-12-15T12:52:16+08:00</updated>
      <id>http://example.com/dynas</id>
      <content type="html">&lt;p&gt;DyNaS 是一个为自己写的自动拨号工具，用于ADSL自动拨号，并自动注册 &lt;a href=&quot;http://www.3322.org&quot;&gt;www.3322.org&lt;/a&gt; 的动态域名。&lt;/p&gt;

&lt;p&gt;使用之前请到 &lt;a href=&quot;http://www.3322.org&quot;&gt;www.3322.org&lt;/a&gt; 注册一个域名，然后运行 DyNaS.exe [-Slient] [Host] [Name] [Pass] 即可自动拨通已设置为不提示用户名和密码的拨号连接，并注册动态域名。其中 -Slient 参数为不显示进度。&lt;/p&gt;

&lt;p&gt;不提供支持，可能需要自己看代码，没别的意思。&lt;/p&gt;

&lt;p&gt;下载：&lt;a href=&quot;/assets/DyNaS%201.0.62.142.rar&quot;&gt;DyNaS 1.0.62.142&lt;/a&gt; (包含源代码)&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>LoBind - 演示加载DLL注入到目标进程</title>
      <link href="http://example.com/lobind/"/>
      <updated>2005-12-08T04:23:34+08:00</updated>
      <id>http://example.com/lobind</id>
      <content type="html">&lt;p&gt;创建远程线程，在目标进程中加载特定DLL，达到注入DLL的目的。无耻卑鄙下流没人格的3721/Baidu的流氓软件龌龊地使用了这个本来不龌龊的方法。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;看看：&lt;a href=&quot;/assets/LoBind%201.0.16.78.rar&quot;&gt;LoBind&lt;/a&gt;，配合PoBind&lt;/p&gt;

&lt;p&gt;DWORD Bind(HANDLE hProcess, PCTSTR ptzPath)&lt;br/&gt;
{&lt;br/&gt;
    DWORD dwResult = 0;&lt;br/&gt;
    PVOID pvRemote = NULL;&lt;br/&gt;
    HANDLE hThread = NULL;&lt;br/&gt;
    do&lt;br/&gt;
    {&lt;br/&gt;
        if (hProcess == NULL)&lt;br/&gt;
        {&lt;br/&gt;
            dwResult = 1;&lt;br/&gt;
            break;&lt;br/&gt;
        }&lt;/p&gt;

&lt;p&gt;        DWORD dwSize =(lstrlen(ptzPath) + 1) * sizeof(TCHAR);&lt;br/&gt;
        pvRemote = VirtualAllocEx(hProcess, NULL, dwSize, MEM_COMMIT, PAGE_READWRITE);&lt;br/&gt;
        if (pvRemote == NULL)&lt;br/&gt;
        {&lt;br/&gt;
            dwResult = 2;&lt;br/&gt;
            break;&lt;br/&gt;
        }&lt;/p&gt;

&lt;p&gt;        if (!WriteProcessMemory(hProcess, pvRemote, ptzPath, dwSize, NULL))&lt;br/&gt;
        {&lt;br/&gt;
            dwResult = 3;&lt;br/&gt;
            break;&lt;br/&gt;
        }&lt;/p&gt;

&lt;p&gt;        PTHREAD_START_ROUTINE pfnLoadLibraryW = &lt;br/&gt;
            (PTHREAD_START_ROUTINE) GetProcAddress(GetModuleHandle(TEXT(&quot;Kernel32.dll&quot;)), STR_LoadLibrary);&lt;br/&gt;
        if (pfnLoadLibraryW == NULL)&lt;br/&gt;
        {&lt;br/&gt;
            dwResult = 4;&lt;br/&gt;
            break;&lt;br/&gt;
        }&lt;/p&gt;

&lt;p&gt;        hThread = CreateRemoteThread(hProcess, NULL, 0, pfnLoadLibraryW, pvRemote, 0, NULL);&lt;br/&gt;
        if (hThread == NULL)&lt;br/&gt;
        {&lt;br/&gt;
            dwResult = 5;&lt;br/&gt;
            break;&lt;br/&gt;
        }&lt;/p&gt;

&lt;p&gt;        WaitForSingleObject(hThread, INFINITE);&lt;br/&gt;
    }&lt;br/&gt;
    while (FALSE);&lt;/p&gt;

&lt;p&gt;    if (hThread)&lt;br/&gt;
    {&lt;br/&gt;
        CloseHandle(hThread);&lt;br/&gt;
    }&lt;br/&gt;
    if (pvRemote)&lt;br/&gt;
    {&lt;br/&gt;
        VirtualFreeEx(hProcess, pvRemote, 0, MEM_RELEASE);&lt;br/&gt;
    }&lt;br/&gt;
    if (hProcess)&lt;br/&gt;
    {&lt;br/&gt;
        CloseHandle(hProcess);&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;    return dwResult;&lt;br/&gt;
}&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>PoBind - IAT替换实现API Hook的可重用代码</title>
      <link href="http://example.com/pobind/"/>
      <updated>2005-12-07T04:23:04+08:00</updated>
      <id>http://example.com/pobind</id>
      <content type="html">&lt;p&gt;此代码演示了替换IAT实现API Hook的完整实现。其中 ApiHook.cpp/.h 为可充用的代码，参考了《Windows核心编程》，但应该比他写的看起来更舒服些（但去除了Unhook功能，因为我认为没必要）。&lt;/p&gt;

&lt;p&gt;此DLL一旦被任何进程载入，即会替换进程内的相关API的所有地址，包括后面载入的的DLL。详细情况，请参考代码和《Windows核心编程》。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;下载：&lt;a href=&quot;/assets/PoBind%201.0.69.271.rar&quot;&gt;PoBind&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Coding Style For Yonsm</title>
      <link href="http://example.com/costyle/"/>
      <updated>2005-11-26T16:33:23+08:00</updated>
      <id>http://example.com/costyle</id>
      <content type="html">&lt;p&gt;编码风格 (仅供Yonsm遵循) (&lt;a href=&quot;/assets/CS.pdf&quot;&gt;下载PDF版本&lt;/a&gt;)&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;编码风格&lt;br/&gt;
一、 概述&lt;br/&gt;
二、 方案&lt;br/&gt;
(一) 目录组织&lt;br/&gt;
(二) 项目组织&lt;br/&gt;
三、 文件&lt;br/&gt;
四、 注释&lt;br/&gt;
五、 代码&lt;br/&gt;
(一) 表达式&lt;br/&gt;
(二) 语句&lt;br/&gt;
(三) 变量&lt;br/&gt;
(四) 常量&lt;br/&gt;
(五) 预处理指示符&lt;br/&gt;
(六) 标号&lt;br/&gt;
(七) 结构&lt;br/&gt;
(八) 联合&lt;br/&gt;
(九) 枚举&lt;br/&gt;
(十) 类&lt;br/&gt;
(十一) 命名空间&lt;br/&gt;
(十二) 模版&lt;br/&gt;
(十三) 函数&lt;br/&gt;
(十四) 内联汇编&lt;br/&gt;
(十五) MASM汇编&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>如何获取指定内存所在的模块、当前模块、当前函数的返回模块</title>
      <link href="http://example.com/how-to-get-a-specified-memory-address/"/>
      <updated>2005-11-08T14:28:57+08:00</updated>
      <id>http://example.com/how-to-get-a-specified-memory-address</id>
      <content type="html">&lt;p&gt;利用一个函数VirtualQuery可以获取指定内存所在的模块：&lt;/p&gt;

&lt;p&gt;inline HMODULE GetModuleFromAddr(PVOID p)&lt;br/&gt;
{&lt;br/&gt;
    MEMORY_BASIC_INFORMATION m = {0};&lt;br/&gt;
    VirtualQuery(p, &amp;amp;m, sizeof(MEMORY_BASIC_INFORMATION));&lt;br/&gt;
    return (HMODULE) m.AllocationBase;&lt;br/&gt;
}&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;有了上面的函数，就非常容易获取当前模块的句柄（比如在静态LIB链接到DLL的项目中，需要知道模块句柄的情况）：&lt;/p&gt;

&lt;p&gt;HMODULE hThisModule = GetModuleFromAddr(当前模块中的任意函数或变量地址);&lt;/p&gt;

&lt;p&gt;更进一步的应用，假如我们需要知道那个模块在调用自己，可以结合_ReturnAddress() intrinsic来实现：&lt;/p&gt;

&lt;p&gt;全局声明：EXTERN_C PVOID _ReturnAddress();&lt;/p&gt;

&lt;p&gt;调用：HMODULE hCallerModule = GetModuleFromAddr(_ReturnAddress());&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>使用 WMF SDK 实现视频网络广播</title>
      <link href="http://example.com/using-the-wmf-sdk-for-video-webcasting/"/>
      <updated>2005-10-16T05:28:10+08:00</updated>
      <id>http://example.com/using-the-wmf-sdk-for-video-webcasting</id>
      <content type="html">&lt;p&gt;大致步骤：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;创建并配置  Reader。&lt;/li&gt;
&lt;li&gt;创建并添加 NetWork Sink （WMCreateWriterNetworkSink）。&lt;/li&gt;
&lt;li&gt;配置 Stream 格式 (WMF SDK 里的格式和 DirectShow 的格式有很多相通之处，有的和直接强制转换使用) 。&lt;/li&gt;
&lt;li&gt;pWriter-&gt;BeginWriting()。&lt;/li&gt;
&lt;li&gt;pWriter-&gt;WriteSample()。&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;暂无心情写文章，具体代码请参看： &lt;a href=&quot;/nedekko&quot;&gt;Nedekko - Fly2000TV 电视广播插件&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>十一决定搬家</title>
      <link href="http://example.com/i-decide-to-move/"/>
      <updated>2005-10-02T13:18:40+08:00</updated>
      <id>http://example.com/i-decide-to-move</id>
      <content type="html">&lt;p&gt;孑然一身，如此而已，仅以此语以记之……&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>替换 IAT 中的导入函数地址实现 Hook API</title>
      <link href="http://example.com/hook-api-with-iat-replacing/"/>
      <updated>2005-08-25T03:23:39+08:00</updated>
      <id>http://example.com/hook-api-with-iat-replacing</id>
      <content type="html">&lt;p&gt;详细说明《Windows 核心编程》中有。贴段代码，我写得比他写得简洁多了。自己会查找 Image Import descriptor 的地址，而不像书中所用的调用 ImageHlp.dll 或者 DbgHelp.dll 中的函数 ImageDirectoryToData 来实现。为了使用一些 PE 结构类型，请 #include （不会导入他的函数）。&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;使用方法：&lt;/p&gt;

&lt;p&gt;HookAPI((PBYTE) GetModuleHandle(NULL), &quot;User32.dll&quot;, MessageBox, MyMessageBox);&lt;/p&gt;

&lt;p&gt;取消Hook：&lt;/p&gt;

&lt;p&gt;HookAPI((PBYTE) GetModuleHandle(NULL), &quot;User32.dll&quot;, MyMessageBox, MessageBox);&lt;/p&gt;

&lt;p&gt;原本以为用这种方法能 Hook User32.dll 中的 SetScrollInfo 实现 ClassXP 自绘 Scroll 的。因为需要 HookAPI((PBYTE) GetModuleHandle(&quot;User32.dll&quot;), &quot;User32.dll&quot;, SetScrollInfo, MySetScrollInfo) ，后来发现 User32.dll 根本不是导入自己的函数，而是直接调用——早该想到了，晕死！&lt;/p&gt;

&lt;p&gt;所以替换 IAT 方法 Hook，还是有限制的，没办法在ClassXP中使用：（只好替换SetScrollInfo的入口点代码了：（&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PVOID HookAPI(PBYTE pbModule, PCSTR pszName, PVOID pvOrg, PVOID pvNew)
 {
     PIMAGE_THUNK_DATA r;
     PIMAGE_NT_HEADERS p;
     PIMAGE_IMPORT_DESCRIPTOR q;
     
     p = (PIMAGE_NT_HEADERS) (pbModule + ((PIMAGE_DOS_HEADER) pbModule)-&amp;gt;e_lfanew);
     q = (PIMAGE_IMPORT_DESCRIPTOR) (pbModule + p-&amp;gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);

     for (; q-&amp;gt;Name; q++)
     {
         if (lstrcmpiA(pszName, (PCSTR) (pbModule + q-&amp;gt;Name)) == 0)
         {
             for (r = (PIMAGE_THUNK_DATA) (pbModule + q-&amp;gt;FirstThunk); r-&amp;gt;u1.Function; r++)
             {
                 if ((PVOID) r-&amp;gt;u1.Function == pvOrg) 
                 {
                     WriteProcessMemory(GetCurrentProcess(), &amp;amp;r-&amp;gt;u1.Function, &amp;amp;pvNew, sizeof(PVOID), NULL);
                     return pvOrg;
                 }
             }
         }
     }

     return NULL;
 }

    下面是替换函数入口的方法，只能用于X86的平台中，尚不完善。 PVOID HookApi(PVOID pvOrg, PVOID pvNew) {     DWORD dwProtect;      if (VirtualProtect(pvOrg, 16, PAGE_READWRITE, &amp;amp;dwProtect))     {         PBYTE p = (PBYTE) pvOrg;         PDWORD q = (PDWORD) (p + 1);          *p = 0xE9;         *q = (LONG) pvNew - (LONG) (p + 5);          VirtualProtect(pvOrg, 16, dwProtect, &amp;amp;dwProtect);          return pvOrg;     }      return NULL; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2012.08.27 补充代码：
`
//&lt;/p&gt;

&lt;h1&gt;include&lt;/h1&gt;

&lt;h1&gt;pragma comment(lib, &quot;Dbghelp.lib&quot;)&lt;/h1&gt;

&lt;p&gt;PROC HookIAT(PCSTR dllName, PCSTR procName, PROC newProc)
{
    DWORD dwSize = 0;
    HANDLE hProcess = GetModuleHandle (NULL);
    PIMAGE_IMPORT_DESCRIPTOR pImageImport = (PIMAGE_IMPORT_DESCRIPTOR)ImageDirectoryEntryToData(hProcess, TRUE, IMAGE_DIRECTORY_ENTRY_IMPORT, &amp;dwSize;);
    if (NULL == pImageImport) return NULL;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PIMAGE_THUNK_DATA pImageThunkOriginal = NULL;
PIMAGE_THUNK_DATA pImageThunkReal  = NULL;
PIMAGE_IMPORT_BY_NAME pImageImportByName = NULL;
while (pImageImport-&amp;gt;Name)
{
    if (0 == _strcmpi((PSTR)((PBYTE)hProcess+pImageImport-&amp;gt;Name), dllName))
    {
        break;
    }
    ++pImageImport;
}
if (!pImageImport-&amp;gt;Name) return NULL;


PROC oldProc = NULL;
pImageThunkOriginal = (PIMAGE_THUNK_DATA)((PBYTE)hProcess+pImageImport-&amp;gt;OriginalFirstThunk);
pImageThunkReal = (PIMAGE_THUNK_DATA)((PBYTE)hProcess+pImageImport-&amp;gt;FirstThunk);
while (pImageThunkOriginal-&amp;gt;u1.Function)
{
    if ((pImageThunkOriginal-&amp;gt;u1.Ordinal &amp;amp; IMAGE_ORDINAL_FLAG) != IMAGE_ORDINAL_FLAG)
    {
        pImageImportByName = (PIMAGE_IMPORT_BY_NAME)((PBYTE)hProcess+pImageThunkOriginal-&amp;gt;u1 .AddressOfData);
        if (0 == _strcmpi(procName, (PSTR)pImageImportByName-&amp;gt;Name))
        {
            MEMORY_BASIC_INFORMATION mbi_thunk;
            VirtualQuery(pImageThunkReal, &amp;amp;mbi;_thunk, sizeof(MEMORY_BASIC_INFORMATION)); 
            VirtualProtect(mbi_thunk.BaseAddress, mbi_thunk.RegionSize, PAGE_READWRITE, &amp;amp;mbi;_thunk.Protect); 

            oldProc = (PROC)pImageThunkReal-&amp;gt;u1.Function; 
            pImageThunkReal-&amp;gt;u1.Function = (DWORD_PTR)newProc;

            DWORD dwOldProtect; 
            VirtualProtect(mbi_thunk.BaseAddress, mbi_thunk.RegionSize, mbi_thunk.Protect, &amp;amp;dwOldProtect;); 
            break;
        }
    }
    ++pImageThunkOriginal;
    ++pImageThunkReal;
}

return oldProc;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
`&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>ClassXP 1.2 进展及界面预览</title>
      <link href="http://example.com/classxp/"/>
      <updated>2005-08-23T16:20:01+08:00</updated>
      <id>http://example.com/classxp</id>
      <content type="html">&lt;p&gt;ClassXP 是一个轻量级的 UI 引擎，应用程序只需要调用一个函数，即可使用 ClassXP 所提供的界面风格。&lt;/p&gt;

&lt;p&gt;调用方式如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        // 功能: 设置或取消 ClassXP
        // 参数: hWnd 指定窗口句柄。如果为 NULL 则针对当前线程中的所有窗口
        //       bClassXP 指定设置或取消。 FALSE 表示取消，否则表示设置
        // 返回: FALSE 表示失败，否则表示成功
        #ifdef __cplusplus
        extern “C”
        #endif
        BOOL WINAPI ClassXP(HWND hWnd, BOOL bClassXP);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ClassXP 开始与 2002 年，其中经历了 0.32/0.55/1.0 均为不完全成熟完善的版本。此次升级，对原来的 ClassXP 做了大量更改：&lt;/p&gt;

&lt;p&gt;支持 Windows 95/98/ME/2000/XP/2003 等目前所有的 PC 端 Windows 系统。
内置将支持与 Windows XP 完全一样的界面风格。
将绘制函数与消息处理等代码完全分离，用户可以重写界面风格绘制函数（ClassXP 将同时内置支持汉化新世纪论坛 曾半仙 网友的 FlatUI 样式的界面风格，如需要其它风格，可以自己绘制）。
支持多线程 UI （没多少意义）。
完美解决除内置 Scroll Bar 以外的所有问题 （内置 Scroll Bar 将看着办吧）……
编译后的完整目标 将控制在 50K 以内，预计 30~40 K应该能搞定（目前20K）。
目前，已经成了 FrameWork、消息处理和 PushButton/CheckBox/RadioBox 的绘制代码，只要添加其它控件的绘制代码即可。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>在汉化新世纪上发布了一堆汉化作品</title>
      <link href="http://example.com/hanzify-for-smartphone-software/"/>
      <updated>2005-07-01T16:24:31+08:00</updated>
      <id>http://example.com/hanzify-for-smartphone-software</id>
      <content type="html">&lt;p&gt;累积下来的 Smartphone 汉化结果，没权威网站可发布，汉化新世纪刚开通手机汉化栏目。整理交验了一番之后都上传了，要的可以访问这里：&lt;a href=&quot;http://www.hanzify.org/?Go=Class::List&amp;amp;SortID=101&quot;&gt;http://www.hanzify.org/?Go=Class::List&amp;amp;SortID=101&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;包括：&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;MoneyTracer 1.1.0910&lt;br/&gt;
RESCO Photo Viewer 5.32&lt;br/&gt;
dbViewSP 1.0&lt;br/&gt;
BetaPlayer 0.5&lt;br/&gt;
MineSweeper 1.0&lt;br/&gt;
RESCO System Toys 1.20&lt;br/&gt;
RESCO Explorer 2003 5.15 &lt;br/&gt;
Kevtris 1.0&lt;/p&gt;

&lt;p&gt;还有 AIDEM 的四个小游戏……&lt;/p&gt;

&lt;p&gt;另外还发布了两个 PC 上的软件： ExamDiff Pro 和 SourceOffSite （与 Smartphone 无关的）。（稍后我会整理在我的 BLOG 上）&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>FiziFetch & DumpROM - 从 Smartphone 中提取任何文件</title>
      <link href="http://example.com/fizifetch/"/>
      <updated>2005-06-29T05:00:57+08:00</updated>
      <id>http://example.com/fizifetch</id>
      <content type="html">&lt;p&gt;首先，用我写的 FiziFetch 在 SP 中运行，提取物理内存数据文件（ROM，假设为 Fizi.bin）。&lt;br/&gt;
FiziFetch 是一个用于提取物理内存数据的小工具。填写好物理内存的起始地址、欲提取的大小，即可提取数据到输出文件中。(参看 ROMDump 写的小程序，因为 ROM Dump 无法在 SP 上运行)&lt;/p&gt;

&lt;p&gt;此程序必须以特权模式运行。在很多ARM机器上可能无法访问物理内存，为了破解需要，我们只需要CoreDLL.dll AygShell.dll 的导出表，与目标平台没关系，所以我们可以运行在 SP2003 x86 模拟器中，提取 x86 的模拟器中的 CoreDLL.dll 即可。这里是我已经提取好的 CoreDLL.dll、AygShell.dll、Phone.dll等，PJ 的朋友可以直接下载使用。&lt;/p&gt;

&lt;p&gt;XDA Developer 是对 Pocket PC 的 ROM 深有研究，上面有提取 ROM 文件和创建 ROM 文件的多个工具。在 PC 上用 XDA Developer 的 DumpROM (http://w201.nl/~itsme/projects/xda/dumprom.html) 解出所有 ROM 文件： &lt;br/&gt;
MD Fizi&lt;/p&gt;

&lt;p&gt;DumpROM -4 Fizi.bin -d Fizi&lt;/p&gt;

&lt;p&gt;关于特权模式，详细请看一下这篇文章：http://www.microsoft.com/china/MSDN/library/Mobility/pocketpc/2k3smartphonesecurity.mspx&lt;br/&gt;
一句话就是要使用 特权证书 Store 里面的下属的数字签名。现在有的手机厂商采用提示数字签名不信任的方式运行，如果得到确认，好像也是运行在特权模式下。&lt;/p&gt;

&lt;p&gt;用 eVC 编程的话可能就知道了，Project -&gt; Setting -&gt; Security -&gt; 里面可以选择是否使用特权证书签名以及是否写入特权证书 Store 。&lt;/p&gt;

&lt;p&gt;下载: &lt;a href=&quot;/assets/FiziFetch.rar&quot;&gt;FiziFetch&lt;/a&gt; ( 包含源代码 eVC4/SP4/SP2003SDK Project，x86/ARM目标文件)&lt;/p&gt;

&lt;p&gt;下载: SP2003.CoreDll.X86 &lt;br/&gt;
&lt;a href=&quot;/assets/SP2003.CoreDLL.X86.rar&quot;&gt;下载&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Smartphone 程序的 Crack</title>
      <link href="http://example.com/smartphone-program-crack/"/>
      <updated>2005-06-28T09:34:28+08:00</updated>
      <id>http://example.com/smartphone-program-crack</id>
      <content type="html">&lt;p&gt;今天成功地上演了我的第一次 SP 破解秀——把一个好久前就想 PJ 的 SP 软件给搞定了。总结一下，步骤如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;目标程序：来电通 1.03，时间限制，国产软件，破解结果仅供自己享用（过期后主要功能仍可使用，感谢作者的大度，所以我就不公布了：）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;需要准备的工具：IDA，DumpROM（PC 上使用，用于解出 SP 系统DLL），FiziFetch （我写的尚未发布的工具，用于读取物理内存/ROM），UltraEdit，数字签名工具。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用 FiziFetch 和 DumpROM 提取系统 DLL，包括 CoreDLL.dll、AygShell.dll 等（具体请参看另一篇文章，待写）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 IDA 反汇编目标程序，记得导入系统 DLL 的导出符号，这样才有助于分析程序行为（如果全是导出地址，根本没法分析、揣摩）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;凭经验+细心+运气+毅力+意识+……，经过多次分析、测试，发现有两处关键位置保存有程序运行天数的信息（一个是注册表的 HKCUSoftwareMicrosoftWindowsCurrentVersionExplorerIconUnderline，一个是 StorageWindowsFontsSystem.fon 文件），只要删除这两个位置的信息，程序就是认为没有运行过，可以再次运行 30 天了：）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 IDA 中找到写入文件和注册表的位置，把这些地方的功能 Cancel 掉（把 ARM 指令 BNE 改称 B，强制转跳）。只更改两个字节。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用资源编辑器 ResHacker 修改一下资源，写入“时限破解: Yonsm.zj.com”，然后用特权模式签个名吧，不然无法运行（有关数字签名，请参看我 BLOG 上的另一篇文章），呵呵~~&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;OK，这下好了，来电秀成了全功能版本，永不过期……&lt;/p&gt;

&lt;p&gt;Smartphone 的加密一般都很简单，入了这个门槛就容易啦——我可全是自己琢磨的啊……现在网上的没有参考资料特少，有关破解的根本没有，晕！&lt;/p&gt;

&lt;p&gt;P.S. Smartphone 的程序也太简单了，可是国内的软件都在卖钱，晕倒！也太没共享精神了……看看人家老外的 BetaPlayer……&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>用于 Smartphone 上播放的 WMV 编码配置文件</title>
      <link href="http://example.com/wmv-encoding-configuration-for-smartphone/"/>
      <updated>2005-06-24T13:03:52+08:00</updated>
      <id>http://example.com/wmv-encoding-configuration-for-smartphone</id>
      <content type="html">&lt;p&gt;用 Windows Media Encoder 编码，速度不错，不过没有 ProCoder 快。&lt;/p&gt;

&lt;p&gt;经过测试，我认为下列配置的 WMV 最适合在 Smartphone 上播放：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;视频

&lt;ul&gt;
&lt;li&gt;格式：WMV9 Video，最棒的编码格式。&lt;/li&gt;
&lt;li&gt;尺寸：224 x 176，适用于全屏播放。勿用 220x176，因为非 16 整数倍的尺寸会导致 BetaPlay 崩溃。&lt;/li&gt;
&lt;li&gt;码率：峰值 VBR （可变码率），平均码率 120 Kbps，最大码率 150 Kbps，保证流畅播放。&lt;/li&gt;
&lt;li&gt;帧率：10 fps，够流畅了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;音频

&lt;ul&gt;
&lt;li&gt;格式：WMV9.1 Audio，Mono，没的说。&lt;/li&gt;
&lt;li&gt;码率：CBR （固定码率），16 Kbps。&lt;/li&gt;
&lt;li&gt;采样：16 KHz，音质还可以。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;这样的配置编出来的视频音频质量不错，压缩率高，一分钟还没有 1M 数据，一部电影也就 120 M 左右，128M 的 SD 卡搞定——量身定制哦：）&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/1119446244.prx&quot;&gt;下载配置文件&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Smartphone 程序汉化——文件数字签名问题的解决方法</title>
      <link href="http://example.com/smartphone-program-localization-and-signature-solutions/"/>
      <updated>2005-05-21T09:03:58+08:00</updated>
      <id>http://example.com/smartphone-program-localization-and-signature-solutions</id>
      <content type="html">&lt;p&gt;    完美的本地化系统里面看到不谐调 E 文，真不完美的感觉……&lt;/p&gt;

&lt;p&gt;    动手吧，汉化……&lt;/p&gt;

&lt;p&gt;    Smartphone 系统的运行的程序都必须经过数字签名，以确保文件不被篡改。任何对文件的丝毫改动都将导致程序无法运行。因此，汉化修改后回写数字签名成了必须解决的问题。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;    要命的是，大部分的汉化工具在回写资源后，用M$的文件签名向导回写签名时，经常提示“文件签名失败”错误。经过一段时间的摸索，发现资源回写后，通常都会使文件大小减小，原本在文件末尾的签名信息不再可用（不管是否签名有效）。经过多次试验，发现只要从原始文件末尾截取部分数据，填充到汉化后的文件尾部，使其大小完全和原始文件一致，就可使用 SignCode 工具成功回写签名！（不保证一定成功，但我还没失败过：）&lt;/p&gt;

&lt;p&gt;    为此我写了一个简单的小工具，SignFix，哈哈……问题搞定了……&lt;/p&gt;

&lt;p&gt;    简单说说汉化的步骤：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;先到网上找到要汉化的软件的最新版本。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在网上搜索最完美的汉化版本，如果已经是最新版且汉化得很完美，感谢这位仁兄，转跳到最后一步吧……&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;汉化非标准资源，你可以用什么 CAXAT 什么的，具体名字忘了，总之我觉得非常难用，所自己写了一个 TransText，不过没有字符串提取功能，也懒得写说明，所以暂时放出来。如果你会 Crack，也放在这一步吧。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;找个本地化工具（强烈推荐 Passollo，Multilizer 也可以，不要用什么垃圾 Visual Localize，更不要用 exeScope 和 ResHacker 等小打小闹的辅助性的工具）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;建立汉化工程，SP 上目标语言选择，简体中文，CodePage936，字体 宋体 9 号（而不是Windows 2K/XP 上的 Tahoma 8 号，否则巨难看）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果有历史工程，或者网上有现存的旧版本的汉化，则导入现有的成果——别说抄袭哈，这点东西有什么好保留的，不要这么小气嘛——用了你的成果的人越多，应该源有成就感……不过如果知道名字的话，在发布的时候不妨说明并感谢一下：）&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;动手翻译，保证咬词正确，合理。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更改部分对话框及其控件，因为有些地方文字放不下等等，E 文软件到中文系统下大多数都有这个问题……&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;汉化结束后，回写资源。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用 SignFix 修正签名。修正后，此时在资源管理器-&gt;文件属性上应该能看到原始的签名，但是此时已经失效了）。这就需要重写入签名——没什么不好的，趁机写入自己的签名。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果你有权威证书颁发机构的数字证书，那最好不过了，程序运行的时候连个警告都不会出现。如果没有，到 &lt;a href=&quot;http://www.ca365.com/&quot;&gt;www.ca365.com&lt;/a&gt; 上去申请一个免费的吧（此时可能把IE ActiveX 安全级别调低）。先安装根证书，在申请你的证书，注意选择用途：代码签名。下载然后下载并安装你的证书（默认到“个人”证书中）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用附件中 M$ 的 SignCode.exe 文件签名向导，回写签名。这个工具是从 Visual Studio .NET 2003 简体中文版中提取的，很奇怪的是这个冬冬竟然是 Windows Console 的，尽管它有 GUI 界面。我把它的 PE 头部修改了一下，变成 Windows GUI 的了，省得出现黑黑的 DOS 窗口。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;小技巧：把文件拖动到 SignFix 即可，SignCode 也是，免得一步一步操作，挺麻烦的。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;搞定后，在 SP 上跑，会有个签名的警告，不过第二次就不会了（把你自己的证书安装在SP上应该就能信任而不会警告了，可是我不知道怎么安装，晕！）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;没其它的了吧？……哦，要发布的话，记得搞得完美一点，SP 软件，最好是搞成“绿色”的。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    现在还没有一个权威一点的 SP 汉化发布平台，建议 Hanzify 来一个。（各个小论坛和其它网站上的 SP 汉化，质量良莠不齐呀……）&lt;/p&gt;

&lt;p&gt;下载： &lt;a href=&quot;/assets/signfix.rar&quot;&gt;SignFix &amp;amp; SignCode&lt;/a&gt; （包括SignFix的代码，要的话可以自己修改一下方便店）&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>买了个MOTO MPx200，新的时代马上开始</title>
      <link href="http://example.com/buy-a-moto-mpx200/"/>
      <updated>2005-05-17T11:19:47+08:00</updated>
      <id>http://example.com/buy-a-moto-mpx200</id>
      <content type="html">&lt;p&gt;Windows Mobile 2003 for Smartphone 系统。&lt;/p&gt;

&lt;p&gt;水货，便宜得要死，标配 + MOTO E398 原装耳机 + 1000mAH 电池 + 万能充 = 1420 大洋……&lt;/p&gt;

&lt;p&gt;新时代要开始了……&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>CuteFoto 2.2.260 灵巧的批量扫描照片分割工具</title>
      <link href="http://example.com/cutefoto/"/>
      <updated>2005-02-24T16:00:00+08:00</updated>
      <id>http://example.com/cutefoto</id>
      <content type="html">&lt;p&gt;　　CuteFoto 是灵巧的批量扫描照片分割工具，能对证件照片/身份照片进行快速批量扫描输入，并方便地实现照片分割工作，极大提高照片扫描和分割效率。可以非常方便快速地完成人事管理、学籍管理、图书管理、考勤管理、考试报名等系统的照片批量扫描工作。&lt;/p&gt;

&lt;p&gt;　　CuteFoto 是一个免费软件，你可以无偿地使用它的所有功能。如果使用过程中有问题、建议或需求，可与作者联系。&lt;/p&gt;

&lt;p&gt;● 最新更新:&lt;/p&gt;

&lt;p&gt;○ 内置 BitLive&quot;鲜活比特&quot;引擎，自动检测并提示软件更新信息。&lt;br/&gt;
○ 提供运行于 Windows XP/2003 AMD64 平台上的纯 64 为高效代码。&lt;br/&gt;
○ 完美的软件安装包，支持多语言安装界面，支持自动优先选择 UNICODE 或 AMD64 纯 64 位版本 (用户亦可定制)。&lt;/p&gt;

&lt;p&gt;● 主要功能&lt;/p&gt;

&lt;p&gt;○ 支持打开 BMP/JPG/GIF 文件。&lt;br/&gt;
○ 支持 TAWIN 设备，可从扫描仪、数码相机等设备中直接获取图片。&lt;br/&gt;
○ 支持从 WIA 设备中直接获取图片。&lt;br/&gt;
○ 提供鼠标拖动选择和固定选取框来定义选区，轻松划分照片。&lt;br/&gt;
○ 提供方便的选区编辑操作，可删除、移动选区等。&lt;br/&gt;
○ 自动调整选区序号。&lt;br/&gt;
○ 提供选区模板功能，把定义好的选区保存下来，在下次直接使用。&lt;br/&gt;
○ 默认选区模板可以在打开图像时自动载入。&lt;br/&gt;
○ 常用的图像处理，包括缩放、翻转、旋转、去色、反色、曝光、浮雕和颜色调整处理等。&lt;br/&gt;
○ 可撤销一次图像处理操作。&lt;br/&gt;
○ 支持放大、缩小和正常方式查看图像及选区。&lt;/p&gt;

&lt;p&gt;● 其它功能&lt;/p&gt;

&lt;p&gt;○ 支持支持在桌面、开始菜单、程序菜单和快速启动栏创建快捷方式。&lt;br/&gt;
○ 使用外部 LNG 文件实现多语言支持，自动根据用户环境选择语言。&lt;br/&gt;
○ 在桌面、开始菜单、程序菜单和快速启动栏中创建快捷方式。&lt;br/&gt;
○ 支持拖放、命令行方式打开图像文件。&lt;br/&gt;
○ 自动记忆新近文件历史记录。&lt;br/&gt;
○ 最小化到系统托盘，窗口总在最前。&lt;br/&gt;
○ 支持自定义背景、边框和文字颜色。&lt;br/&gt;
○ 支持 Windows XP 界面主题。&lt;br/&gt;
○ 更多...&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/1098621171.jpg&quot; alt=&quot; &quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/CuteFoto.2.2.260.exe&quot;&gt;下载 2.2.260&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;其它下载点: &lt;a href=&quot;http://www.onlinedown.net/soft/35976.htm&quot;&gt;华军软件园&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>完美的 NSIS 安装脚本</title>
      <link href="http://example.com/perfect-nsis-setup-script/"/>
      <updated>2005-02-24T09:19:53+08:00</updated>
      <id>http://example.com/perfect-nsis-setup-script</id>
      <content type="html">&lt;p&gt;这几天稍稍深入地使用了一下 NSIS，功能太强大了。回首看看不比学习一门高级语言容易，不过一般也能信手拈来……&lt;/p&gt;

&lt;p&gt;制作了一个 CuteFoto 的 NSIS 安装脚本，支持多语言，支持自动判断操作系统并优先选择安装 ASCII/UNICODE或AMD64版本，支持……&lt;/p&gt;

&lt;p&gt;感觉应该是非常完美了：）&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;附件下载: &lt;a href=&quot;/assets/1109151259.nsi&quot;&gt;请点这里&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;其中几个地方说明一下:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;如果以 SectionGroup 而不是 Section 为第一个区段定义，发现 NSIS 无法正常处理默认/自定义安装类型，应该是 NSIS 的一个 BUG。但是在d第一个 SectionGroup 之前加上一个无名的空段 (隐藏)，即可解决此问题。即 Section...SectionEnd。&lt;/li&gt;
&lt;li&gt;判断是否是 NT 类操作系统: ReadRegStr $0 HKLM &quot;SOFTWAREMicrosoftWindows NTCurrentVersion&quot; &quot;CurrentVersion&quot;&lt;br/&gt;
${If} $0 != &quot;&quot;&lt;/li&gt;
&lt;li&gt;判断是处理器架构: ReadRegStr $0 HKLM &quot;SYSTEMCurrentControlSetControlSession ManagerEnvironment&quot; &quot;PROCESSOR_ARCHITECTURE&quot;&lt;br/&gt;
${If} $0 != &quot;AMD64&quot;&lt;/li&gt;
&lt;li&gt;还有单选按钮支持，看代码……&lt;/li&gt;
&lt;li&gt;NSIS 的中文文档和例子请看这里: &lt;a href=&quot;http://foobar.nease.net/nsis/&quot;&gt;http://foobar.nease.net/nsis/&lt;/a&gt; (衷心感谢蓝色网际网友的工作，foobarr.cab 内有一个助手函数库，看看也许会很有用)&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
    </entry>
  
    <entry>
      <title>DetourQQ 2.4.18 - 绕过 QQ 本地登录的内存补丁</title>
      <link href="http://example.com/detourqq/"/>
      <updated>2005-01-19T01:30:00+08:00</updated>
      <id>http://example.com/detourqq</id>
      <content type="html">&lt;p&gt;下载: &lt;a href=&quot;/assets/1099686085.rar&quot;&gt;DetourQQ 2.4.18&lt;/a&gt; (27K)&lt;/p&gt;

&lt;p&gt;在遗失 QQ 密码的情况下，使用 DetourQQ 可以进行本地登录，并使用其所有的离线功能（如查看好友信息、 查看聊天记录等）。&lt;/p&gt;

&lt;p&gt;使用区段模糊扫描，理论上支持所有腾讯 QQ 2003 和 QQ 2004。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/1099839200.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;真有预见性，一年前多写的代码，对于一年多后出的QQ2005依然有效，这对于内存补丁软件来说，真是不容易！(补充：竟然对 QQ2008 还有效！)&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>AheadLib 2.2.150 - 自动生成一个特洛伊 DLL 分析代码的工具</title>
      <link href="http://example.com/aheadlib/"/>
      <updated>2005-01-15T01:26:05+08:00</updated>
      <id>http://example.com/aheadlib</id>
      <content type="html">&lt;p&gt;一、简介&lt;/p&gt;

&lt;p&gt;　　AheadLib 是用来生成一个DLL分析模拟工具，用于分析DLL中的函数参数调用（比如记录Socket send了什么等等）、更改函数功能（随心所欲了：）、更改界面功能（比如在Hook里面生成一个按钮，截获事件等等）。&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;二、使用&lt;/p&gt;

&lt;p&gt;　　1.用 AheadLib 打开要模拟的 DLL，生成一个 CPP 文件。&lt;br/&gt;
　　2.用 Visual Studio 6.0/.NET 建立一个 DLL 工程，把这个 CPP 文件加入到项目中。&lt;br/&gt;
　　3.使用 Release 方式编译，生成的 DLL 将和原来的 DLL 具有一模一样的导出函数，并且能顺利把这些函数转发到原来的函数中。&lt;br/&gt;
　　4.AheadLib 还可以生成 Hook 代码，用于截取当前进程的所有消息，这样就可以随心所欲地处理各种消息了 (修改第三方程序界面功能的好助手)。&lt;/p&gt;

&lt;p&gt;三、备注&lt;/p&gt;

&lt;p&gt;　　1.如果导出函数过多，在 Visual Studio 6.0 中，如果出现编译错误，请在项目属性关闭与编译头功能。&lt;br/&gt;
　　2.如果是 C++ 、C &lt;strong&gt;stdcall、C &lt;/strong&gt;fastcall 的方式导出的话，生成的函数声明将会还原成原代码级别（可能需要修改才能编译，比如导出C++类的情况）。此时使用 &lt;em&gt;_declspec(dllexport) 导出 ——不能指定导出序号。&lt;br/&gt;
　　3.如果是 NONAME 或者 C &lt;/em&gt;CDECL 方式导出（比如 DEF 导出，大多数Windows DLL都是这种情况，比如WS2_32等等），则使用#pragma comment(linker, &quot;/EXPORT:...)导出，且指定导出序号。&lt;br/&gt;
　　4.如果系统中没有 DbgHelp.dll，将无法识别 C++ 模式的导出。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/1097248756.gif&quot;&gt;&lt;img src=&quot;/assets/1097248756.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下载: &lt;a href=&quot;/assets/1097248644.rar&quot;&gt;AheadLib 2.2.150.650&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>AMD64 架构，寄存器可真多啊</title>
      <link href="http://example.com/so-much-registers-in-amd64-architecture/"/>
      <updated>2004-12-04T05:39:54+08:00</updated>
      <id>http://example.com/so-much-registers-in-amd64-architecture</id>
      <content type="html">&lt;p&gt;寄存器多的一塌糊涂：16 个 8 位通用寄存器、16 个 16 位通用寄存器、16 个 32 位通用寄存器、16 个 64 位通用寄存器，8 个 MM/FP 64 位寄存器，16 个 XMM 128 位寄存器……&lt;/p&gt;

&lt;p&gt;&lt;em&gt;下面的文字摘自 《AMD64 Architecture Programmer’s Manual Volume 1: Application Programming》&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;    The AMD64 architecture introduces these new features:&lt;!-- more --&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Register Extensions (see Figure 1-1 on page 2):&lt;/li&gt;
&lt;li&gt;8 new general-purpose registers (GPRs).&lt;/li&gt;
&lt;li&gt;All 16 GPRs are 64 bits wide.&lt;/li&gt;
&lt;li&gt;8 new 128-bit XMM registers.&lt;/li&gt;
&lt;li&gt;Uniform byte-register addressing for all GPRs.&lt;/li&gt;
&lt;li&gt;A new instruction prefix (REX) accesses the extended registers.

&lt;ul&gt;
&lt;li&gt;Long Mode (see Table 1-1 on page 3):&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Up to 64 bits of virtual address.&lt;/li&gt;
&lt;li&gt;64-bit instruction pointer (RIP).&lt;/li&gt;
&lt;li&gt;New instruction-pointer-relative data-addressing mode.&lt;/li&gt;
&lt;li&gt;Flat address space.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;下面是寄存器图示和说明，均摘自 AMD64 程序员手册:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://yonsm.reg365.com/up/1102052059.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;    In 64-bit mode, eight new GPRs are added to the eight legacy&lt;br/&gt;
GPRs, all 16 GPRs are 64 bits wide, and the low bytes of all&lt;br/&gt;
registers are accessible. Figure 3-3 on page 31 shows the GPRs,&lt;br/&gt;
flags register, and instruction-pointer register available in 64-&lt;br/&gt;
bit mode. The GPRs include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sixteen 8-bit low-byte registers (AL, BL, CL, DL, SIL, DIL, BPL, SPL, R8B, R9B, R10B, R11B,  R12B, R13B, R14B, R15B).&lt;/li&gt;
&lt;li&gt;Four 8-bit high-byte registers (AH, BH, CH, DH), addressable only when no REX prefix is used.&lt;/li&gt;
&lt;li&gt;Sixteen 16-bit registers (AX, BX, CX, DX, DI, SI, BP, SP, R8W, R9W, R10W, R11W, R12W, R13W, R14W, R15W).&lt;/li&gt;
&lt;li&gt;Sixteen 32-bit registers (EAX, EBX, ECX, EDX, EDI, ESI, EBP, ESP, R8D, R9D, R10D, R11D, R12D, R13D, R14D, R15D).&lt;/li&gt;
&lt;li&gt;Sixteen 64-bit registers (RAX, RBX, RCX, RDX, RDI, RSI, RBP, RSP, R8, R9, R10, R11, R12, R13, R14, R15).&lt;/li&gt;
&lt;/ul&gt;

</content>
    </entry>
  
    <entry>
      <title>一个图像类</title>
      <link href="http://example.com/an-image-class/"/>
      <updated>2004-11-27T15:43:01+08:00</updated>
      <id>http://example.com/an-image-class</id>
      <content type="html">&lt;p&gt;下载: &lt;a href=&quot;/assets/1101483036.rar&quot;&gt;CImage&lt;/a&gt; (6 KB)&lt;/p&gt;

&lt;p&gt;不是 MS 的 CImage：）功能不多，仅仅是为了 CuteFoto 够用而已。为图像处理方便，内部数据格式为 DIB 24。&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;支持以下功能:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;打开 BMP/GIF/JPG 文件。&lt;/li&gt;
&lt;li&gt;显示图图像。&lt;/li&gt;
&lt;li&gt;保存或局部保存为 BMP 24。&lt;/li&gt;
&lt;li&gt;支持一次 Undo 操作。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;支持以下图像处理:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;缩放图像。&lt;/li&gt;
&lt;li&gt;翻转图像。&lt;/li&gt;
&lt;li&gt;旋转图像。&lt;/li&gt;
&lt;li&gt;去色。&lt;/li&gt;
&lt;li&gt;曝光。&lt;/li&gt;
&lt;li&gt;浮雕。&lt;/li&gt;
&lt;li&gt;颜色调整。&lt;/li&gt;
&lt;li&gt;边缘检测。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;// CImage 类声明&lt;br/&gt;
class CImage&lt;br/&gt;
{&lt;br/&gt;
protected:&lt;br/&gt;
   // 成员变量&lt;br/&gt;
   UINT m_uWidth;                  // 图像宽度&lt;br/&gt;
   UINT m_uHeight;                 // 图像高度&lt;br/&gt;
   PBYTE m_pbBits;                 // 图像数据指针&lt;br/&gt;
   DOUBLE m_dScale;                // 用于绘制图像的缩放系数&lt;/p&gt;

&lt;p&gt;   UINT m_uBackupWidth;            // 备份图像宽度&lt;br/&gt;
   UINT m_uBackupHeight;           // 备份图像高度&lt;br/&gt;
   PBYTE m_pbBackupBits;           // 备份图像数据指针&lt;/p&gt;

&lt;p&gt;   TCHAR m_tzFileName[MAX_PATH];   // 当前图像文件名称&lt;/p&gt;

&lt;p&gt;public:&lt;br/&gt;
   // 构造函数&lt;br/&gt;
   CImage();&lt;/p&gt;

&lt;p&gt;   // 析构函数&lt;br/&gt;
   virtual inline CImage::~CImage();&lt;/p&gt;

&lt;p&gt;   // 获取图像宽度&lt;br/&gt;
   inline UINT GetWidth();&lt;/p&gt;

&lt;p&gt;   // 获取图像高度&lt;br/&gt;
   inline UINT GetHeight();&lt;/p&gt;

&lt;p&gt;   // 获取绘制宽度&lt;br/&gt;
   inline UINT GetScaleWidth();&lt;/p&gt;

&lt;p&gt;   // 获取图像高度&lt;br/&gt;
   inline UINT GetScaleHeight();&lt;/p&gt;

&lt;p&gt;   // 获取用于绘制图像的缩放系数&lt;br/&gt;
   inline DOUBLE GetScale();&lt;/p&gt;

&lt;p&gt;   // 获取用于绘制图像的缩放系数&lt;br/&gt;
   inline VOID SetScale(DOUBLE dScale = 1);&lt;/p&gt;

&lt;p&gt;   // 获取当前图像的文件名，返回值指向文件名缓冲区指针，允许被更改&lt;br/&gt;
   inline PTSTR GetFileName();&lt;/p&gt;

&lt;p&gt;   // 获取一行图像所占的字节数&lt;br/&gt;
   inline UINT GetPitch();&lt;/p&gt;

&lt;p&gt;   // 获取图像所占的字节数&lt;br/&gt;
   inline UINT GetSize();&lt;/p&gt;

&lt;p&gt;   // 获取第 y 行的图像数据指针&lt;br/&gt;
   inline PBYTE GetBits();&lt;/p&gt;

&lt;p&gt;   // 获取第 y 行的图像数据指针&lt;br/&gt;
   inline PBYTE GetBits(UINT y);&lt;/p&gt;

&lt;p&gt;   // 获取第 (x, y) 点的图像数据指针&lt;br/&gt;
   inline PBYTE GetBits(UINT x, UINT y);&lt;/p&gt;

&lt;p&gt;   // 获取 BITMAPINFOHEADER 信息&lt;br/&gt;
   inline VOID GetBih(PBITMAPINFOHEADER pbihInfo);&lt;/p&gt;

&lt;p&gt;   // 创建图像。返回 TRUE 表示成功，将更新图像数据；返回 FALSE 表示失败，原有图像数据不会被更改&lt;br/&gt;
   inline BOOL Create(UINT uWidth, UINT uHeight, const PBYTE pbBits = NULL);&lt;/p&gt;

&lt;p&gt;   // 附加图像。返回 TRUE 表示成功，将更新图像数据；返回 FALSE 表示失败，原有图像数据不会被更改&lt;br/&gt;
   inline BOOL Attach(UINT uWidth, UINT uHeight, PBYTE pbBits);&lt;/p&gt;

&lt;p&gt;   // 销毁图像数据&lt;br/&gt;
   inline VOID Destroy();&lt;/p&gt;

&lt;p&gt;   // 获取备份图像宽度&lt;br/&gt;
   inline UINT GetBackupWidth();&lt;/p&gt;

&lt;p&gt;   // 获取备份图像高度&lt;br/&gt;
   inline UINT GetBackupHeight();&lt;/p&gt;

&lt;p&gt;   // 获取备份图像数据&lt;br/&gt;
   inline PBYTE GetBackupBits();&lt;/p&gt;

&lt;p&gt;   // 备份图像数据&lt;br/&gt;
   inline VOID Backup();&lt;/p&gt;

&lt;p&gt;   // 恢复图像数据&lt;br/&gt;
   inline VOID Restore();&lt;/p&gt;

&lt;p&gt;   // 销毁备份图像数据&lt;br/&gt;
   inline VOID DestroyBackup();&lt;/p&gt;

&lt;p&gt;   // 读取、保存及绘制图像&lt;br/&gt;
   BOOL Load(PCTSTR ptzFileName);&lt;br/&gt;
   BOOL Save(PCTSTR ptzFileName, LPCRECT prtRect = NULL);&lt;br/&gt;
   VOID Draw(HDC hDC, INT iLeft = 0, INT iTop = 0);&lt;/p&gt;

&lt;p&gt;   // 图像变换&lt;br/&gt;
   VOID Stretch(UINT uWidth, UINT uHeight);&lt;br/&gt;
   VOID FlipHorizon();&lt;br/&gt;
   VOID FlipVertical();&lt;br/&gt;
   VOID Rotate(UINT uAngle, COLORREF crColor = 0x00FFFFFF);&lt;/p&gt;

&lt;p&gt;   // 图像处理&lt;br/&gt;
   VOID Decolourize();&lt;br/&gt;
   VOID Expose(BYTE bValue = 128);&lt;br/&gt;
   VOID Emboss();&lt;br/&gt;
   VOID Adjust(INT iRed, INT iGreen, INT iBlue);&lt;/p&gt;

&lt;p&gt;   // 边缘检测&lt;br/&gt;
   VOID Fringe(BYTE bValue = 64);&lt;br/&gt;
};&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>诚信乃立身之本</title>
      <link href="http://example.com/good-faith/"/>
      <updated>2004-11-23T15:59:59+08:00</updated>
      <id>http://example.com/good-faith</id>
      <content type="html">&lt;p&gt;诚信是正常社会关系最基本的保障，可惜这个社会太缺乏了……&lt;/p&gt;

&lt;p&gt;认认真真做事，踏踏实实做人……&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>完全使用 GDI 绘制的 Office XP 启动画面风格信息框</title>
      <link href="http://example.com/drawing-an-office-style-about-box-with-gdi/"/>
      <updated>2004-11-20T12:33:52+08:00</updated>
      <id>http://example.com/drawing-an-office-style-about-box-with-gdi</id>
      <content type="html">&lt;p&gt;下载: &lt;a href=&quot;/assets/1100867377.rar&quot;&gt;CAboutDlg 静态类&lt;/a&gt; (17.5 KB)&lt;/p&gt;

&lt;p&gt;说明:&lt;/p&gt;

&lt;p&gt;1.所有信息在 Define.h 中定义。&lt;/p&gt;

&lt;p&gt;2.如果要添加文字、区域或超链接，请在 AboutDlg.cpp 中的相关数组添加一个成员即可，非常简单方便。&lt;/p&gt;

&lt;p&gt;3.启动闪屏画面调用方式: CAboutDlg::Splash(); （也可以指定延时关闭时间；默认一秒关闭；-1 表示由用户点击关闭）&lt;/p&gt;

&lt;p&gt;4.常规显示调用方式: CAboutDlg::Show(hParent);&lt;/p&gt;

&lt;p&gt;没别的意思，仅仅是表现一下我是多么耐心细致地写代码而已：）&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>整理制作了几个 CHM 和 PDF 文档</title>
      <link href="http://example.com/organize-and-produce-several-chm-and-pdf-documents/"/>
      <updated>2004-11-19T12:20:33+08:00</updated>
      <id>http://example.com/organize-and-produce-several-chm-and-pdf-documents</id>
      <content type="html">&lt;p&gt;Yonsm 制作，必属精品。目录书签大纲什么的样样俱全，浏览查看方便。且均为中文文档，可以一目十行得看，不用像看“阴文”那样一行一行地啃。&lt;/p&gt;

&lt;p&gt;NASM 中文手册: &lt;a href=&quot;http://yonsm.zj.com/eBook/NASM.pdf&quot;&gt;http://Yonsm.zj.com/eBook/NASM.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DirectDraw 中文手册: &lt;a href=&quot;http://yonsm.zj.com/eBook/DirectDraw.chm&quot;&gt;http://Yonsm.zj.com/eBook/DirectDraw.chm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DirectShow 中文手册: &lt;a href=&quot;http://yonsm.zj.com/eBook/DirectShow.chm&quot;&gt;http://Yonsm.zj.com/eBook/DirectShow.chm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MMX/SSE 资料: &lt;a href=&quot;http://yonsm.zj.com/eBook/MMXSSE.chm&quot;&gt;http://Yonsm.zj.com/eBook/MMXSSE.chm&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>DirectCMOS</title>
      <link href="http://example.com/directcmos/"/>
      <updated>2004-11-14T14:39:56+08:00</updated>
      <id>http://example.com/directcmos</id>
      <content type="html">&lt;p&gt;下载: &lt;a href=&quot;/assets/1100356483.rar&quot;&gt;DirectCMOS&lt;/a&gt; (895 字节)&lt;/p&gt;

&lt;p&gt;一百年前用 Debug 写的 DOS 小工具，保存 CMOS Data 到可执行文件中,或从可执行文件中把数据写入到 CMOS。当初写的目的是用于机房（或网吧）批量更改 CMOS：）&lt;/p&gt;

&lt;p&gt;老古董了，不小心看见了，回味一下，权当保存纪念……&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;A&lt;br/&gt;
MOV     SI,0082&lt;br/&gt;
CMP     BY [SI],52    ;&#39;R&#39;&lt;br/&gt;
JZ        0120            ;&lt;em&gt;Read&lt;br/&gt;
CMP     BY [SI],72         ;&#39;r&#39;&lt;br/&gt;
JZ        0120            ;&lt;/em&gt;Read&lt;br/&gt;
CMP     BY [SI],57         ;&#39;W&#39;&lt;br/&gt;
JZ        0154            ;&lt;em&gt;Write&lt;br/&gt;
CMP     BY [SI],77         ;&#39;w&#39;&lt;br/&gt;
JZ        0154            ;&lt;/em&gt;Write&lt;br/&gt;
MOV     AH,09&lt;br/&gt;
MOV     DX,017B&lt;br/&gt;
INT      21&lt;br/&gt;
INT      20&lt;br/&gt;
MOV     SI,01D0         ;&lt;em&gt;Read:&lt;br/&gt;
MOV     CX,0040&lt;br/&gt;
XOR      AL,AL&lt;br/&gt;
OUT     70,AL            ;&lt;/em&gt;LoopRead:&lt;br/&gt;
MOV     AH,AL&lt;br/&gt;
IN        AL,71&lt;br/&gt;
MOV     [SI],AL&lt;br/&gt;
MOV     AL,AH&lt;br/&gt;
INC      AL&lt;br/&gt;
INC      SI&lt;br/&gt;
LOOP   0128            ;&lt;em&gt;LoopRead&lt;br/&gt;
MOV     AX,3D01&lt;br/&gt;
MOV     DX,0174         ;&#39;DC.COM&#39;&lt;br/&gt;
INT      21&lt;br/&gt;
MOV     BX,AX&lt;br/&gt;
MOV     AH,40&lt;br/&gt;
MOV     CX,0110&lt;br/&gt;
MOV     DX,0100&lt;br/&gt;
INT       21&lt;br/&gt;
MOV     AH,09&lt;br/&gt;
MOV     DX,0194&lt;br/&gt;
INT       21&lt;br/&gt;
INT       20&lt;br/&gt;
MOV     SI,01D0         ;&lt;/em&gt;Write:&lt;br/&gt;
MOV     CX,0040&lt;br/&gt;
XOR     AL,AL&lt;br/&gt;
OUT     70,AL           ;&lt;em&gt;LoopWrite:&lt;br/&gt;
MOV     AH,AL&lt;br/&gt;
MOV     AL,[SI]&lt;br/&gt;
OUT     71,AL&lt;br/&gt;
MOV     AL,AH&lt;br/&gt;
INC      AL&lt;br/&gt;
INC      SI&lt;br/&gt;
LOOP    015C            ;&lt;/em&gt;LoopWrite&lt;br/&gt;
MOV     AH,09&lt;br/&gt;
MOV     DX,01AB&lt;br/&gt;
INT      21&lt;br/&gt;
INT     20&lt;br/&gt;
DB      &#39;DC.COM&#39;,0&lt;br/&gt;
DB      &#39;Message:Unknow argument!$&#39;&lt;br/&gt;
DB      &#39;Message:Read Complete!$&#39;&lt;br/&gt;
DB      &#39;Message:Write Complete!$&#39;&lt;br/&gt;
DB      0,0,0,0,0,0,0,0,0,0,0,0,0&lt;br/&gt;
DB      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0&lt;br/&gt;
DB      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0&lt;br/&gt;
DB      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0&lt;br/&gt;
DB      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0&lt;/p&gt;

&lt;p&gt;RCX&lt;br/&gt;
110&lt;br/&gt;
N DC.COM&lt;br/&gt;
W&lt;br/&gt;
Q&lt;br/&gt;
 &lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>CShortcut 类 - 简单方便地操纵创建快捷方式</title>
      <link href="http://example.com/easy-manipulations-to-create-a-shortcut/"/>
      <updated>2004-11-10T11:53:53+08:00</updated>
      <id>http://example.com/easy-manipulations-to-create-a-shortcut</id>
      <content type="html">&lt;p&gt;下载: &lt;a href=&quot;/assets/1100001180.rar&quot;&gt;CShortcut&lt;/a&gt; (13 KB，包含示例代码)&lt;/p&gt;

&lt;p&gt;使用方法&lt;br/&gt;
1. 指定文件夹位置 (CSIDL_*) 和快捷方式文件名称即可。&lt;br/&gt;
2. 特别地，如果文件夹位置为 CSIDL_APPDATA 将会转换成快速启动栏的文件夹位置。&lt;br/&gt;
3. 使用之前需要初始化 COM 库 (如 CoInitialize(NULL))。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>CTwainHelper 助手类</title>
      <link href="http://example.com/ctwainhelper-code/"/>
      <updated>2004-11-09T14:57:32+08:00</updated>
      <id>http://example.com/ctwainhelper-code</id>
      <content type="html">&lt;p&gt;下载: &lt;a href=&quot;/assets/1099925198.rar&quot;&gt;CTwainHelper&lt;/a&gt; (包含示例代码 35K)&lt;/p&gt;

&lt;p&gt;使用方法如下:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;调用 CTwainHelper::Initialize() 确定是否有可用的设备。&lt;/li&gt;
&lt;li&gt;在窗口消息循环中，调用 CTwainHelper::ProcessMessage() 处理 TWAIN 消息。&lt;/li&gt;
&lt;li&gt;要获取图像时，调用 CTwainHelper::GetImage()。&lt;/li&gt;
&lt;li&gt;如果图像已准备好 (如用户确定扫描图像)，窗口会收到 WM_COMMAND 消息，wParam 为 IDC_TwainHelper。此时应用程序可以调用 CTwainHelper::TransferImage() 获取图像到文件中 。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;有关 TWAIN 的介绍和使用请参看: [&lt;a href=&quot;read.php?174&quot;&gt;从 TWAIN 设备中扫描图像&lt;/a&gt;]&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>终于换显示器了</title>
      <link href="http://example.com/buy-a-led-display/"/>
      <updated>2004-11-08T14:45:40+08:00</updated>
      <id>http://example.com/buy-a-led-display</id>
      <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.samsungmonitor.com.cn/Products/ProductInfo.asp?GeneralType=LCD&amp;amp;ProductID=118&quot;&gt;三星 710N&lt;/a&gt;，看起来真舒服。2720 大洋拿下……&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.samsungmonitor.com.cn/images/Bullet.gif&quot; alt=&quot;&quot; /&gt;    17寸a-si TFT/TN显示器&lt;br/&gt;
&lt;img src=&quot;http://www.samsungmonitor.com.cn/images/Bullet.gif&quot; alt=&quot;&quot; /&gt;    最大分辨率：1280*1024&lt;br/&gt;
&lt;img src=&quot;http://www.samsungmonitor.com.cn/images/Bullet.gif&quot; alt=&quot;&quot; /&gt;    可视角度：160°/140°&lt;br/&gt;
&lt;img src=&quot;http://www.samsungmonitor.com.cn/images/Bullet.gif&quot; alt=&quot;&quot; /&gt;    亮度：300 cd/㎡&lt;br/&gt;
&lt;img src=&quot;http://www.samsungmonitor.com.cn/images/Bullet.gif&quot; alt=&quot;&quot; /&gt;    对比度：600:1&lt;br/&gt;
&lt;img src=&quot;http://www.samsungmonitor.com.cn/images/Bullet.gif&quot; alt=&quot;&quot; /&gt;    响应时间：12ms&lt;br/&gt;
&lt;img src=&quot;http://www.samsungmonitor.com.cn/images/Bullet.gif&quot; alt=&quot;&quot; /&gt;    辐射标准：TCO&#39;99&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.samsungmonitor.com.cn/Products/Images/Upload/710N_title.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>DetourQQ 2.4.18 源代码</title>
      <link href="http://example.com/detourqq-code/"/>
      <updated>2004-11-06T20:36:04+08:00</updated>
      <id>http://example.com/detourqq-code</id>
      <content type="html">&lt;p&gt;下载: &lt;a href=&quot;/assets/1099686627.rar&quot;&gt;DetourQQ 2.4.18.68&lt;/a&gt; (63K)&lt;/p&gt;

&lt;p&gt;使用 CodeAtom 通用内存补丁引擎，支持模糊搜索、批量补丁等功能，非常方便编写内存补丁，有兴趣的可以看看源代码。&lt;/p&gt;

&lt;p&gt;工程文件是 Visual Studio .NET 的，VC6 中也可以建立工程并编译通过，但是需要安装新的 Platform SDK。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>域名更换</title>
      <link href="http://example.com/domain-name-change/"/>
      <updated>2004-11-05T11:20:07+08:00</updated>
      <id>http://example.com/domain-name-change</id>
      <content type="html">&lt;p&gt;弄了个更好记的域名: &lt;a href=&quot;http://Yonsm.zj.com&quot;&gt;Yonsm.zj.com&lt;/a&gt;，因为我就在浙江杭州，所以这个域名也比较名副其实，呵呵~~&lt;/p&gt;

&lt;p&gt;已收藏 &lt;a href=&quot;http://Yonsm.reg365.com&quot;&gt;Yonsm.reg365.com&lt;/a&gt; 的朋友请更新收藏夹。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>选举！又见选举！！</title>
      <link href="http://example.com/the-election-in-taiwan/"/>
      <updated>2004-11-04T10:56:01+08:00</updated>
      <id>http://example.com/the-election-in-taiwan</id>
      <content type="html">&lt;p&gt;杨过说羊祜说过一句话——“天下不如意事，十常居七八”，每次希望赢得大选的人总是选不上。&lt;/p&gt;

&lt;p&gt;从 2000 年台湾的宋连匾许敖，到 2001 年底的立法会选举，再到 2004 年的 320，还有现在现在的驴象之争，没有一次是我所希望的结果……稍有安慰的一次，就是前段时间香港立法会了，但恐怕也是……&lt;/p&gt;

&lt;p&gt;哎！天下不如意事，十常居七八……&lt;/p&gt;

&lt;p&gt;嘿嘿~~自己又没投票权，这么热心干哈呀……&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>构造一个方便高效 INI 类</title>
      <link href="http://example.com/a-convenient-and-efficient-ini-class/"/>
      <updated>2004-11-02T11:49:02+08:00</updated>
      <id>http://example.com/a-convenient-and-efficient-ini-class</id>
      <content type="html">&lt;p&gt;   Windows API 本身已经为我们写好了操作 INI 的函数，但是有时候用起来可能不是很方便。把这些 API 简单封装一下，将会大大方便我们读写 INI 文件。&lt;/p&gt;

&lt;p&gt;    网上 INI 类多如牛毛。不过我个人认为，实在没有必要每个 INI 操作都真的去调用 INI 类中的函数。下面看看我写的充分使用 inline 和 C++ 省却参数构造的 CIni 类:&lt;!-- more --&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;// 预处理&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;#pragma once&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;#include &amp;lt;windows.h&amp;gt;&amp;lt;/windows.h&amp;gt;

#define INI_Main TEXT(&quot;Main&quot;)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;// CIni 类&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;class CIni&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;public:&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    // INI 文件名&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    TCHAR m_tzFileName[MAX_PATH];

public:&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    // 初始化配置文件&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    inline CIni()&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        GetModuleFileName(NULL, m_tzFileName, MAX_PATH);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        lstrcpy(m_tzFileName + lstrlen(m_tzFileName) - 4, TEXT(&quot;.ini&quot;));&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    }

    // 初始化配置文件&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    inline CIni(PCTSTR ptzFileName)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        lstrcpy(m_tzFileName, ptzFileName);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    }

    // 获取整数&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    inline UINT GetInt(PCTSTR ptzKeyName, INT iDefault = 0, PCTSTR ptzSectionName = INI_Main)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        return GetPrivateProfileInt(ptzSectionName, ptzKeyName, iDefault, m_tzFileName);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    }

    // 设置整数&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    inline BOOL SetInt(PCTSTR ptzKeyName, INT iValue = 0, PCTSTR ptzSectionName = INI_Main)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        TCHAR tzString[16];

        wsprintf(tzString, TEXT(&quot;%d&quot;), iValue);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        return WritePrivateProfileString(ptzSectionName, ptzKeyName, tzString, m_tzFileName);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    }

    // 获取字符串&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    inline DWORD GetString(PCTSTR ptzKeyName, PTSTR ptzReturnedString,&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        DWORD dwSize = MAX_PATH, PCTSTR ptzDefault = NULL, PCTSTR ptzSectionName = INI_Main)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        return GetPrivateProfileString(ptzSectionName, ptzKeyName, ptzDefault, ptzReturnedString,&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;            dwSize, m_tzFileName);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    }

    // 设置字符串&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    inline BOOL SetString(PCTSTR ptzKeyName, PCTSTR ptzString = NULL, PCTSTR ptzSectionName = INI_Main)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        return WritePrivateProfileString(ptzSectionName, ptzKeyName, ptzString, m_tzFileName);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    }

    // 获取结构&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    inline BOOL GetStruct(PCTSTR ptzKeyName, PVOID pvStruct, UINT uSize, PCTSTR ptzSectionName = INI_Main)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        return GetPrivateProfileStruct(ptzSectionName, ptzKeyName, pvStruct, uSize, m_tzFileName);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    }

    // 设置结构&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    inline BOOL SetStruct(PCTSTR ptzKeyName, PVOID pvStruct, UINT uSize, PCTSTR ptzSectionName = INI_Main)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        return WritePrivateProfileStruct(ptzSectionName, ptzKeyName, pvStruct, uSize, m_tzFileName);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    }

    // 获取节&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    inline DWORD GetSection(PTSTR ptzReturnBuffer, DWORD dwSize, PCTSTR ptzSectionName = INI_Main)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        return GetPrivateProfileSection(ptzSectionName, ptzReturnBuffer, dwSize, m_tzFileName);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    }

    // 设置节&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    inline DWORD SetSection(PCTSTR ptzString, PCTSTR ptzSectionName = INI_Main)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        return WritePrivateProfileSection(ptzSectionName, ptzString, m_tzFileName);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    }

    // 获取节名&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    inline DWORD GetSectionNames(PTSTR ptzReturnBuffer, DWORD dwSize)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        return GetPrivateProfileSectionNames(ptzReturnBuffer, dwSize, m_tzFileName);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;};&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;    一个 INI 文件为一个 CIni 对象。使用举例如下: &lt;/p&gt;

&lt;p&gt;    CIni iniMain;   // 使用默认 INI 名称，即与 EXE 仅仅是扩展名不同。&lt;/p&gt;

&lt;p&gt;    CIni iniSel(TEXT(&quot;F:Sel.ini&quot;)); // 指定 INI 路径&lt;/p&gt;

&lt;p&gt;    TCHAR tzText[MAX_PATH];&lt;br/&gt;
    COLORREF crTextColor;&lt;/p&gt;

&lt;p&gt;    crTextColor = iniMain.GetInt(INI_TextColor);&lt;br/&gt;
    iniMain.SetInt(INI_TextColor, crTextColor);&lt;br/&gt;
    iniMain.GetString(INI_PicturesPath, tzText);&lt;br/&gt;
    iniMain.SetString(INI_PicturesPath, TEXT(&quot;F:My Pictures&quot;));&lt;br/&gt;
    iniSel.SetStruct(INI_WindowRect, &amp;amp;rtWindow, sizeof(RECT));&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;    当然，如果一个程序中只操作一个 INI 文件，这个类也可以改成静态类 (只要在每个函数和变量前加上 static，非常简单)。&lt;/p&gt;

&lt;p&gt;下载: &lt;a href=&quot;http://yonsm.reg365.com/up/1099311280.rar&quot;&gt;CIni&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>创建最完美的工具栏</title>
      <link href="http://example.com/create-an-perfect-tool-bar/"/>
      <updated>2004-10-30T12:51:38+08:00</updated>
      <id>http://example.com/create-an-perfect-tool-bar</id>
      <content type="html">&lt;p&gt;下载: &lt;a href=&quot;/assets/1099054171.rar&quot;&gt;TBDemo&lt;/a&gt; (25K/VC6 Project)&lt;/p&gt;

&lt;p&gt;优点:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;工具栏图片使用 Image List 方式，支持 24 位色为位图。&lt;/li&gt;
&lt;li&gt;支持工具栏按钮 Hot Track、Disabled 状态，鼠标移动到按钮时颜色加深，无效按钮则为灰色。Hot Track、Disabled 状态的位图通过代码创建，这样，更换工具栏图片时，就不需要都用 Photoshop 处理一把了----只要一个正常状态的工具栏按钮位图，通过代码自动生成另外两种位图。&lt;/li&gt;
&lt;li&gt;显示工具栏提示的同时在状态栏显示该命令的详细提示。&lt;/li&gt;
&lt;li&gt;其它……没了：）&lt;/li&gt;
&lt;/ol&gt;

</content>
    </entry>
  
    <entry>
      <title>TeleControl - 10Moons 电视大师遥控器增强工具</title>
      <link href="http://example.com/telecontrol/"/>
      <updated>2004-10-28T10:41:16+08:00</updated>
      <id>http://example.com/telecontrol</id>
      <content type="html">&lt;p&gt;为自己使用而写的电视遥控器增强工具，有 10Moons TV Master 或 10Moons TV Master FM 的人可以试试看。我自己觉得非常非常方便……&lt;/p&gt;

&lt;p&gt;下载: &lt;a href=&quot;/assets/1098873491.rar&quot;&gt;TeleControl 2.6.600 (包含源代码)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一、简介&lt;/p&gt;

&lt;p&gt;   TeleControl 是基于 10Moons TV Master 的遥控器增强工具。它能帮助你充分利用每个遥控器按键，让你全程遥控计算机。&lt;/p&gt;

&lt;p&gt;二、优点&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;系统资源占用非常非常少，大概消耗 7M 内存，CPU 占用几乎总是 0%。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;兼容 10Moons TV Master，不影响原来的功能和使用习惯，只是在不看电视的时候增加了按键功能，充分利用按键。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持 DScaler、Fly2000TV 和 Windows Media Player。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;纯 Win32SDK/C 源代码开发，方便用户自行修改。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;!-- more --&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;三、使用说明&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开 10Moons TV Master 应用程序之后，TeleControl 自动失效，所有的按键归 10Moons TV Master 应用程序所有。10Moons TV Master 应用程序关闭之后，TeleControl 自动生效。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果 DScaler、Fly2000TV 或 Windows Media Player 应用程序正在运行，且处于最前端，则所有的按键归操作将针对 DScaler、Fly2000TV 或 Windows Media Player 窗口。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其它情况下，按键功能定义如下：&lt;/p&gt;

&lt;p&gt; Power:          打开当前目录下的电视程序。&lt;br/&gt;
   Mute:           定时关机。关机前 60 秒将会出现提示对话框，此时可以取消关机。&lt;/p&gt;

&lt;p&gt;   Video Setting:  模拟 Shift 键。&lt;br/&gt;
   Snapshot:       模拟 Win+D 键。&lt;br/&gt;
   Freeze:         模拟 Alt+F4 键。&lt;br/&gt;
   Video Default:  模拟 Ctrl 键。&lt;br/&gt;
   Hide Panel:     模拟 Alt 键。&lt;/p&gt;

&lt;p&gt;   CH+:            模拟 ↑ 键。&lt;br/&gt;
   CH-:            模拟 ↓ 键。&lt;br/&gt;
   VOL-:           模拟 &lt;- 键。
   VOL+:           模拟 -&gt; 键。&lt;/p&gt;

&lt;p&gt;   REC:            模拟 Enter 键。&lt;/p&gt;

&lt;p&gt;   Full Screen:    模拟 Alt+Enter 键。&lt;br/&gt;
   AV Source:      模拟 Alt+Tab 键。&lt;br/&gt;
   &amp;lt;:              模拟 F6 键。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;:              模拟 Tab 键。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;   12346789:       分别模拟个方向上的鼠标移动，单位为 10 像素。&lt;br/&gt;
   5:              模拟 Win 键。&lt;br/&gt;
   -/--:           模拟左击。&lt;br/&gt;
   0:              模拟右击。&lt;/p&gt;

&lt;p&gt;   Recall:         模拟 Escape 键。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 TeleControl 生效状态下，如果有按键按下，系统托盘图标由蓝色变成黄色。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;四、安装及卸载&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;请先确认已安装 10Moons TV Master 的驱动程序。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将 TeleControl 安装在 10Moons TV Master 应用程序同一目录下，替换原来的 SystemTray.exe 或 TVTray.exe。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果是 DScaler 或 Fly2000TV 用户，请安装在 DScaler 或 Fly2000TV 目录下。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TeleControl 是&quot;绿色软件&quot;，除了程序文件之外，不会在系统中保存任何信息。如果要卸载，直接删除程序文件即可。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;五、其它信息&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;写这个程序目的是为了自己方便遥控计算机，所以没有提供配置界面什么的。每个按键的功能都是固定的，所以可能不适合普通用户使用。源代码是开放的，不保留版权，用 Visual Studio .NET 2003 可以编译修改，以符合自己的使用习惯。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 TeleControl 纯属你自己的选择，作者不对使用过程中产生的任何问题法律负责，如果你不同意此项，请不要使用 TeleControl。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果你有意见、建议，或者在使用过程中碰到问题，请描述详细信息并 Email 至 &lt;a href=&quot;mailto:Yonsm@163.com&quot;&gt;Yonsm@163.com&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Powered by Yonsm&lt;br/&gt;
2004.9.4&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>捕捉 OutputDebugString 输出的字符串</title>
      <link href="http://example.com/capture-outputdebugstring/"/>
      <updated>2004-10-23T17:03:15+08:00</updated>
      <id>http://example.com/capture-outputdebugstring</id>
      <content type="html">&lt;p&gt;在调试状态下，VC 等调试器可以捕捉程序中的 OutputDebugString 输出的信息。其实 OutputDebugString 就是往一片共享影射的内存中写入了一段数据，并创建了两个 Enevt，指明数据写入事件被触发。在非调试状态下，我们也可以通过编程实现捕捉 OutputDebugString 的输出。下面的代码演示了如何获取这些信息:&lt;!-- more --&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DWORD WINAPI CDebugTrack::TrackProc(PVOID pvParam)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;{&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   HANDLE hMapping = NULL;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;    HANDLE hAckEvent = NULL;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   PDEBUGBUFFER pdbBuffer = NULL;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; TCHAR tzBuffer[MAX_DebugBuffer];&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  _Try&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      // 设置初始结果&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      m_dwResult = ERROR_INVALID_HANDLE;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        // 打开事件句柄&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      hAckEvent = CreateEvent(NULL, FALSE, FALSE, TEXT(&quot;DBWIN_BUFFER_READY&quot;));&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;       _LeaveIf(hAckEvent == NULL);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      m_hReadyEvent = CreateEvent(NULL, FALSE, FALSE, TEXT(&quot;DBWIN_DATA_READY&quot;));&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     _LeaveIf(m_hReadyEvent == NULL);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      // 创建文件映射&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      hMapping = CreateFileMapping(INVALID_HANDLE_VALUE, NULL, PAGE_READWRITE, 0, MAX_DebugBuffer, TEXT(&quot;DBWIN_BUFFER&quot;));&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        _LeaveIf(hMapping == NULL);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;       // 映射调试缓冲区&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;       pdbBuffer = (PDEBUGBUFFER) MapViewOfFile(hMapping, FILE_MAP_READ, 0, 0, 0);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        _LeaveIf(pdbBuffer == NULL);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      // 循环&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      for (m_dwResult = ERROR_SIGNAL_PENDING; (m_dwResult == ERROR_SIGNAL_PENDING); )&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;          // 等待缓冲区数据&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;           SetEvent(hAckEvent);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;           if (WaitForSingleObject(m_hReadyEvent, INFINITE) == WAIT_OBJECT_0)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;         {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;              // 如果是继续等待，否则表示主线程发出了停止信号，退出当前线程&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;             if (m_dwResult == ERROR_SIGNAL_PENDING)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;                {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;                  // 添加新项&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;                    _AStrToStr(tzBuffer, pdbBuffer-&amp;gt;szString);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;                 CListView::AddDebugItem(tzBuffer, pdbBuffer-&amp;gt;dwProcessId);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;             }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;          }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;          else&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;           {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;              // 等待失败&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;                m_dwResult = WAIT_ABANDONED;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;           }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;  _Finally&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      // 释放&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      if (pdbBuffer)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;          UnmapViewOfFile(pdbBuffer);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     _SafeCloseHandle(hMapping);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        _SafeCloseHandle(m_hReadyEvent);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;       _SafeCloseHandle(hAckEvent);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;      PostMessage(CMainWnd::m_hWnd, WM_COMMAND, IDC_DebugTrack, m_dwResult);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        // 返回结果&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;        return m_dwResult;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; }&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[软件]-&gt;[DebugTrack] 下有个 &lt;a href=&quot;http://yonsm.reg365.com/index.php?job=art&amp;amp;articleid=a_20041003_184430&quot;&gt;DebugTrack&lt;/a&gt; 工具，可以非常方便地捕捉和处理 OutputDebugString 的输出，实乃程序员居家旅行、杀人灭口，必备良药……，&lt;/p&gt;

&lt;p&gt;当然，你也可以选择 &lt;a href=&quot;http://www.sysinternals.com/&quot;&gt;Sysinternals&lt;/a&gt; 的 &lt;a href=&quot;http://www.sysinternals.com/ntw2k/freeware/debugview.shtml&quot;&gt;DebugView&lt;/a&gt;，功能更强大(可以远程监视、可以监视内核输出)，不过没有 DebugTrack 用起来方便。&lt;/p&gt;

&lt;p&gt;有关 OutputDebugString 的深入分析，可以参看这篇文章: 请查看文章 (E文): &lt;a href=&quot;http://www.unixwiz.net/techtips/outputdebugstring.html&quot;&gt;http://www.unixwiz.net/techtips/outputdebugstring.html&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>解决或将要两个积累已久的问题</title>
      <link href="http://example.com/solve-a-problem-in-cutefoto/"/>
      <updated>2004-10-23T15:59:16+08:00</updated>
      <id>http://example.com/solve-a-problem-in-cutefoto</id>
      <content type="html">&lt;p&gt;CuteFoto 中自动序号调整以及扫描相片自动检测分割，两年前想好的 Feature，今天才实现：）算法应该还比较精妙、高效，灌水记忆ing……&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>使用 SendARP 查询 MAC 地址</title>
      <link href="http://example.com/sendarp-querying-mac-address/"/>
      <updated>2004-10-22T12:10:19+08:00</updated>
      <id>http://example.com/sendarp-querying-mac-address</id>
      <content type="html">&lt;p&gt;通过 IP Helper API 中的 SendARP 发送 ARP 请求来获取 MAC 地址，简单方便，缺点是不能跨越网关。&lt;/p&gt;

&lt;p&gt;下载: &lt;a href=&quot;/assets/1098360337.rar&quot;&gt;IP2MAC&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>捕捉屏幕并保存位图文件</title>
      <link href="http://example.com/capture-screen-and-save-as-bitmap-file/"/>
      <updated>2004-10-21T11:53:51+08:00</updated>
      <id>http://example.com/capture-screen-and-save-as-bitmap-file</id>
      <content type="html">&lt;p&gt;一百年前的示例代码，贴出来算权当收藏&lt;br/&gt;
下载: &lt;a href=&quot;/assets/1098273034.rar&quot;&gt;CaptureScreen&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>使用#定义方便控制版本号的宏</title>
      <link href="http://example.com/use-define-macros-for-version-number/"/>
      <updated>2004-10-19T11:52:17+08:00</updated>
      <id>http://example.com/use-define-macros-for-version-number</id>
      <content type="html">&lt;p&gt;    一个 VC Project 中，可能有很多地方需要用到版本号，比如 About 对话框、版本资源等。如果每次版本更改都一一去改变这些值，不但非常麻烦，而且有悖唯一原则。&lt;/p&gt;

&lt;p&gt;    巧妙地使用宏定义，可以很好地解决这个问题。&lt;/p&gt;

&lt;p&gt;    先来看看几个预处理操作符 (&lt;a href=&quot;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vclang/html/_predir_stringizing_operator.asp&quot;&gt;Preprocessor Operators&lt;/a&gt;): &lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;OperatorAction&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://msdn.microsoft.com/library/en-us/vclang/html/_predir_stringizing_operator.asp&quot;&gt;Stringizing operator (#)&lt;/a&gt;
Causes the corresponding actual argument to be enclosed in double quotation marks&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://msdn.microsoft.com/library/en-us/vclang/html/_predir_charizing_operator.asp&quot;&gt;Charizing operator (#@)&lt;/a&gt;
Causes the corresponding argument to be enclosed in single quotation marks and to be treated as a character (Microsoft Specific)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://msdn.microsoft.com/library/en-us/vclang/html/_predir_token.2d.pasting_operator.asp&quot;&gt;Token-pasting operator (##)&lt;/a&gt;
Allows tokens used as actual arguments to be concatenated to form other tokens&lt;/p&gt;

&lt;p&gt;    简单说，# 就是使参数用引号包住，形成字符串；#@ 使参数用单引号包住，形成一个字符；## 是粘结符。这几个操作符从语言上来说比较晦涩，仔细看看 MSDN 的例子，好好理解一下。&lt;/p&gt;

&lt;p&gt;    下面举例说一下怎么定义统一的版本宏。&lt;/p&gt;

&lt;p&gt;    假设工程中有资源脚本文件 Resource.rc，唯一的版本号码存放在 Define.h 里。其它需要用到版本号的 CPP 文件均包含此文件。&lt;/p&gt;

&lt;p&gt;    先看看 Define.h:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define VER_Major    2&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;#define VER_Minor    2&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;#define VER_Release    137 &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;#define VER_Build    1762&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;#define VER_Version    MAKELONG(MAKEWORD(VER_Major, VER_Minor), VER_Release)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;#define _Stringizing(v)    #v&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;#define _VerJoin(a, b, c, d)  _Stringizing(a.b.c.d)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;#define STR_BuildDate    TEXT(__DATE__)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;#define STR_BuildTime    TEXT(__TIME__)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;#define STR_BuilDateTime  TEXT(__DATE__) TEXT(&quot; &quot;) TEXT(__TIME__)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;#define STR_Version    TEXT(_VerJoin(VER_Major, VER_Minor, VER_Release, VER_Build))&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;    假设有了上面的定义后，就可以方便地使用 VER_Major、VER_Minor、VER_Release、VER_Build 作为版本号数字；STR_Version 作为版本字符串 (上面的例子中 STR_Version 执行宏展开后是 TEXT(&quot;2.2.137.1763&quot;) 的 TCHAR 字符串)。任何 CPP 文件中可以直接使用这些宏定义。&lt;/p&gt;

&lt;p&gt;    资源脚本 Resource.rc  中，假设我们需要版本资源，可以首先在 Define.h 中再定义一些宏，比如:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define STR_AppName    TEXT(&quot;CuteFoto&quot;)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;#define STR_Author    TEXT(&quot;Yonsm&quot;)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;#define STR_Corporation    TEXT(&quot;Yonsm.NET&quot;)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;#define STR_Web      TEXT(&quot;Yonsm.reg365.com&quot;)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;#define STR_Email    TEXT(&quot;Yonsm@163.com&quot;)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;#define STR_WebUrl    TEXT(&quot;http://&quot;) STR_Web&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;#define STR_EmailUrl    TEXT(&quot;mailto:&quot;) STR_Email TEXT(&quot;?Subject=&quot;) STR_AppName&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;#ifdef _CHS&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;#define STR_Description    TEXT(&quot;灵巧的批量扫描照片切割工具。&quot;)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;#define STR_Copyright    TEXT(&quot;版权所有 (C) 2002-2004 &quot;) STR_Corporation TEXT(&quot;，保留所有权利。&quot;)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;#else // _CHS&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;#define STR_Description    TEXT(&quot;Picture cutting tool for batch-scanned photo.&quot;)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;#define STR_Copyright    TEXT(&quot;Copyright (C) 2002-2004 &quot;) STR_Corporation TEXT(&quot;. All rights reserved.&quot;)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;#endif // _CHS&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;    这时，我们在 Resouurc.rc 中添加版本资源——注意，不要直接添加，否则会被 VS 更改成实际的值，这样就不能达到我们的目的了。一个好的解决方法是:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在 VS IDE  中双击 Resource.rc 转到 资源视图 中，右击 Resource.rc，选择“资源包括”，在“只读符号指令”中包含 Define.h:&lt;/p&gt;

&lt;h1&gt;define APSTUDIO_HIDDEN_SYMBOLS&lt;br&gt;&lt;/br&gt;//……&lt;br&gt;&lt;/br&gt;#include &quot;Define.h&quot;&lt;br&gt;&lt;/br&gt;#include &quot;Windows.h&quot;&lt;br&gt;&lt;/br&gt;//……&lt;br&gt;&lt;/br&gt;#undef APSTUDIO_HIDDEN_SYMBOLS&lt;/h1&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在“编译时指令”中输入:&lt;/p&gt;

&lt;p&gt;LANGUAGE LANG_NEUTRAL, SUBLANG_DEFAULT&lt;br&gt;&lt;/br&gt;#pragma code_page(DEFAULT)&lt;br&gt;&lt;/br&gt;&lt;br&gt;&lt;/br&gt;VS_VERSION_INFO VERSIONINFO&lt;br&gt;&lt;/br&gt;FILEVERSION VER_Major, VER_Minor, VER_Release, VER_Build&lt;br&gt;&lt;/br&gt;PRODUCTVERSION VER_Major, VER_Minor, VER_Release, VER_Build&lt;br&gt;&lt;/br&gt;FILEFLAGSMASK VS_FFI_FILEFLAGSMASK&lt;br&gt;&lt;/br&gt;FILEFLAGS 0&lt;br&gt;&lt;/br&gt;FILEOS VOS__WINDOWS32&lt;br&gt;&lt;/br&gt;FILETYPE 0&lt;br&gt;&lt;/br&gt;FILESUBTYPE VFT2_UNKNOWN&lt;br&gt;&lt;/br&gt;BEGIN&lt;br&gt;&lt;/br&gt;    BLOCK &quot;StringFileInfo&quot;&lt;br&gt;&lt;/br&gt;    BEGIN&lt;br&gt;&lt;/br&gt;        BLOCK &quot;040004e4&quot;&lt;br&gt;&lt;/br&gt;        BEGIN&lt;br&gt;&lt;/br&gt;            VALUE &quot;FileVersion&quot;, STR_Version&lt;br&gt;&lt;/br&gt;            VALUE &quot;FileDescription&quot;, STR_Description&lt;br&gt;&lt;/br&gt;            VALUE &quot;ProductName&quot;, STR_AppName&lt;br&gt;&lt;/br&gt;            VALUE &quot;ProductVersion&quot;, STR_Version&lt;br&gt;&lt;/br&gt;            VALUE &quot;CompanyName&quot;, STR_Corporation&lt;br&gt;&lt;/br&gt;            VALUE &quot;LegalCopyright&quot;, STR_Copyright&lt;br&gt;&lt;/br&gt;            VALUE &quot;Comments&quot;, &quot;Powered by &quot; STR_Author &quot;.&quot;&lt;br&gt;&lt;/br&gt;            VALUE &quot;OriginalFilename&quot;, STR_AppName EXT_Exe&lt;br&gt;&lt;/br&gt;        END&lt;br&gt;&lt;/br&gt;    END&lt;br&gt;&lt;/br&gt;    BLOCK &quot;VarFileInfo&quot;&lt;br&gt;&lt;/br&gt;    BEGIN&lt;br&gt;&lt;/br&gt;        VALUE &quot;Translation&quot;, 0x0400, 0x04e4&lt;br&gt;&lt;/br&gt;    END&lt;br&gt;&lt;/br&gt;END&lt;br&gt;&lt;/br&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;    OK，以后要更改版本号或程序信息，只要修改 Define.h 即可了。&lt;/p&gt;

&lt;p&gt;    继续……&lt;/p&gt;

&lt;p&gt;    Define.h 中假设 VER_Release/VER_Build 分别指 Release 号和 Build 号，如果让这两个值分别表示我们用 Release 方式编译的次数和总编译次数，多好：）为此我写了个小工具 &lt;a href=&quot;/assets/1098100310.rar&quot;&gt;BPP&lt;/a&gt; (Build++ 的意思)：&lt;/p&gt;

&lt;p&gt;    首先把 BPP.exe 放在工程目录下，然后在 VC Project 属性中，Debug 方式：在“生成事件”-&gt;“预生成事件”-&gt;“命令行”中输入“BPP Define.h”，Release 方式：“BPP -Release Define.h”。这样，每次 VC 编译都会调用 BPP.exe 使 VER_Build 或 VER_Reelase 自增一。好酷酷吧……&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>关于 GMail 的一点随想</title>
      <link href="http://example.com/think-on-gmail/"/>
      <updated>2004-10-16T10:25:22+08:00</updated>
      <id>http://example.com/think-on-gmail</id>
      <content type="html">&lt;p&gt;名气好大，早就想弄一个看看，无奈找不到庙门。最近受同事邀请，终于弄了一个……结果……&lt;/p&gt;

&lt;p&gt;感觉对中国用户来说简直是……鸡肋——速度非常慢，经常不能登录，使用也非常不方便，1G，1T 也没用啊……&lt;/p&gt;

&lt;p&gt;偶尔发现一个为 GMail 写的工具——GMail Drive shell extension（&lt;a href=&quot;http://www.viksoe.dk/code/gmail.htm&quot;&gt;http://www.viksoe.dk/code/gmail.htm&lt;/a&gt;），能把 GMail 的空间虚拟成一个磁盘来使用。想法很好，可是速度慢的经常没法用。&lt;/p&gt;

&lt;p&gt;以前也想过些一个 Shell Extention，用邮箱来虚拟一个磁盘，使用 POP3/SMTP 来复制粘贴文件……没实施：）&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>一个 Windows 服务例子</title>
      <link href="http://example.com/a-windows-service-example/"/>
      <updated>2004-10-15T11:07:04+08:00</updated>
      <id>http://example.com/a-windows-service-example</id>
      <content type="html">&lt;p&gt;一个 Windows 服务小例子，也是一个很好的模板。支持远程安装和删除，支持自动选择线程语言（中文或英文）。&lt;/p&gt;

&lt;p&gt;下载附件：&lt;a href=&quot;/assets/1097751870.rar&quot;&gt;BeepSrv&lt;/a&gt;&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Microsoft Windows [版本 5.2.3790]&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; (C) 版权所有 1985-2003 Microsoft Corp.&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; F:&amp;gt;BeepSrv&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; BeepService 版本 1.0.0&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; CopyLeft(L) 2003 Yonsm，不保留任何权利。&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 用法: BeepSrv &amp;lt;命令&amp;gt; [机器] [用户] [密码]&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 命令: 指定操作命令，可以接受 Install 或者 Remove 命令。&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 机器: 指定要操作的计算机名，默认操作本地计算机。&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 用户: 指定访问目标机器所使用的用户名，默认使用当前用户。&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 密码: 指定要使用的密码，默认使用当前密码。&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; F:&amp;gt;BeepSrv Install 192.168.0.1&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; BeepService 版本 1.0.0&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; CopyLeft(L) 2003 Yonsm，不保留任何权利。&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 连接到 192.168.0.1IPC$: 操作成功完成。&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 打开服务管理器: 操作成功完成。&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 打开 BeepSrv 服务: 指定的服务未安装。&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 复制文件到 192.168.0.1ADMIN$System32BeepSrv.exe: 操作成功完成。&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 创建 BeepSrv 服务: 操作成功完成。&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 启动 BeepSrv 服务: 操作成功完成。&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 断开 192.168.0.1IPC$ 连接: 操作成功完成。&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; F:&amp;gt;BeepSrv Remove Yonsm&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; BeepService 版本 1.0.0&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; CopyLeft(L) 2003 Yonsm，不保留任何权利。&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 连接到 YonsmIPC$: 操作成功完成。&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 打开服务管理器: 操作成功完成。&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 打开 BeepSrv 服务: 操作成功完成。&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 查询 BeepSrv 服务状态: 正在运行。&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 停止 BeepSrv 服务: 操作成功完成。&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 删除 BeepSrv 服务: 操作成功完成。&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 删除文件 YonsmADMIN$System32BeepSrv.exe: 操作成功完成。&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 断开 YonsmIPC$ 连接: 操作成功完成。&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; F:&amp;gt;_&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;yi&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>在 Visual Studio 工具菜单中添加“快捷方式”</title>
      <link href="http://example.com/add-shortcut-in-visual-studio-tools-menu/"/>
      <updated>2004-10-14T11:48:10+08:00</updated>
      <id>http://example.com/add-shortcut-in-visual-studio-tools-menu</id>
      <content type="html">&lt;p&gt;下载附件: &lt;a href=&quot;/assets/1097667721.rar&quot;&gt;VSTool&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;VSTool 是一个静态类，可以方便地在 Microsoft Visual Studio 6.0/.NET 的工具菜单中添加或删除&quot;快捷方式&quot;，这样把我们的程序也加到里面，方便编程的时候使用：）&lt;/p&gt;

&lt;p&gt;使用方法：更改 STR_AppName 宏定义为你的应用程序名称（或者说是菜单名），即可使用。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>完成了一个比较满意的 Open Dialog</title>
      <link href="http://example.com/a-good-open-dialog/"/>
      <updated>2004-10-13T13:35:05+08:00</updated>
      <id>http://example.com/a-good-open-dialog</id>
      <content type="html">&lt;p&gt;&lt;a href=&quot;/assets/1097588003.gif&quot;&gt;&lt;img src=&quot;/assets/1097588003.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;支持预览、播放、黑帧检测等等等等功能：）贴图庆贺一下：）&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Pure C++ 实现 Shell Context Menu Extention</title>
      <link href="http://example.com/pure-c-implement-shell-context-menu-extention/"/>
      <updated>2004-10-13T11:23:41+08:00</updated>
      <id>http://example.com/pure-c-implement-shell-context-menu-extention</id>
      <content type="html">&lt;p&gt;纯 C++ 实现的 Shell 上下文菜单扩展，既是一个小例子。也是一个很好的模板。&lt;/p&gt;

&lt;p&gt;用 Visual C++ 建立一个空的 DLL 工程，加入附件中的两个文件，编译注册即可。&lt;/p&gt;

&lt;p&gt;有关 Shell 扩展编程，这里有个详细的 CHM 文档: &lt;a href=&quot;http://www.vckbase.com/tools/downtools.asp?id=105&quot;&gt;http://www.vckbase.com/tools/downtools.asp?id=105&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;附件下载：&lt;a href=&quot;/assets/1097580159.rar&quot;&gt;CxtMenu&lt;/a&gt;&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;////////////////////////////////////////////////////////////////////////////////////////////////////&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; // 文件: CxtMenu.h&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; // 更新: 2003.7.1&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; ////////////////////////////////////////////////////////////////////////////////////////////////////&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; ////////////////////////////////////////////////////////////////////////////////////////////////////&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; // 编译预处理&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; #pragma once&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; #include &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; #include &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; // 导出函数&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; #pragma comment(linker, &quot;/EXPORT:DllRegisterServer=_DllRegisterServer@0,PRIVATE&quot;)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; #pragma comment(linker, &quot;/EXPORT:DllUnregisterServer=_DllUnregisterServer@0,PRIVATE&quot;)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; #pragma comment(linker, &quot;/EXPORT:DllGetClassObject=_DllGetClassObject@12,PRIVATE&quot;)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; #pragma comment(linker, &quot;/EXPORT:DllCanUnloadNow=_DllCanUnloadNow@0,PRIVATE&quot;)&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; ////////////////////////////////////////////////////////////////////////////////////////////////////&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; ////////////////////////////////////////////////////////////////////////////////////////////////////&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; //  CCxtMenuFactory 类声明&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; class CCxtMenuFactory : public IClassFactory  &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public:&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   CCxtMenuFactory();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   ~CCxtMenuFactory();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   // IUnknown&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   ULONG WINAPI AddRef();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   ULONG WINAPI Release();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   HRESULT WINAPI QueryInterface(REFIID rIID, void ** ppvObject);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   // IClassFactory&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   HRESULT WINAPI CreateInstance(IUnknown * pUnknown, REFIID rIID, void ** ppvObject);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   HRESULT WINAPI LockServer(BOOL bLock);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; protected:&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   // 引用计数器&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   int m_iRefCount;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; };&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; ////////////////////////////////////////////////////////////////////////////////////////////////////&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; ////////////////////////////////////////////////////////////////////////////////////////////////////&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; // &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; class CCxtMenu : public IShellExtInit, public IContextMenu&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; {&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; public:&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   CCxtMenu();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   ~CCxtMenu();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   // IUnknown 方法&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   ULONG WINAPI AddRef();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   ULONG WINAPI Release();&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   HRESULT WINAPI QueryInterface(REFIID rIID, void ** ppvObject);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   // IShellExtMenuInit 方法&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   HRESULT WINAPI Initialize(LPCITEMIDLIST pidlFolder, IDataObject * pDataObj, HKEY hProgID);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   // IContextMenu 方法&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   HRESULT WINAPI QueryContextMenu(HMENU hMenu, UINT indexMenu,&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     UINT idCmdFirst, UINT idCmdLast,UINT uFlags);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   HRESULT WINAPI GetCommandString(UINT_PTR idCmd,UINT uFlags,&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;     UINT * pwReserved, LPSTR pszName, UINT cchMax);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   HRESULT WINAPI InvokeCommand(LPCMINVOKECOMMANDINFO pCmdInfo);&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; protected:&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   // 引用计数器&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   int m_iRefCount;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;   char m_szFileName[MAX_PATH];&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; &amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; };&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; ////////////////////////////////////////////////////////////////////////////////////////////////////&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
</content>
    </entry>
  
    <entry>
      <title>一个N久以前写的小程序</title>
      <link href="http://example.com/feast/"/>
      <updated>2004-10-10T12:21:54+08:00</updated>
      <id>http://example.com/feast</id>
      <content type="html">&lt;p&gt;挺好玩的，有兴趣的话看看。不到30行C代码。下载: &lt;a href=&quot;/assets/1097324370.rar&quot;&gt;Feast&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;不行了话记得按 Scroll Lock：）&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>WiaHelper - WIA 助手函数库</title>
      <link href="http://example.com/wiahelper-code/"/>
      <updated>2004-10-09T13:34:21+08:00</updated>
      <id>http://example.com/wiahelper-code</id>
      <content type="html">&lt;p&gt;下载: &lt;a href=&quot;/assets/1097237213.rar&quot;&gt;WiaHelper&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;关于 WIA ，请参看 [文档] -&gt; [&lt;a href=&quot;read.php?155&quot;&gt;WIA 学习笔记&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;可以从 WIA 设备（如数码相机、摄像机、WebCam 等等）中获取 BMP/JPG（同时可获取一个或多个两种方式），只能获取图像到文件中。要获取数据在内存中，需要实现 IDataCallback 才能传送数据，有问题的话可与我联系。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>WIA 学习笔记</title>
      <link href="http://example.com/wia-learning-notes/"/>
      <updated>2004-10-09T12:56:47+08:00</updated>
      <id>http://example.com/wia-learning-notes</id>
      <content type="html">&lt;p&gt;&lt;strong&gt;一、 WIA 简介&lt;/strong&gt;&lt;br/&gt;
&lt;strong&gt;1．关于 WIA&lt;br/&gt;
&lt;/strong&gt;WIA 是 Windows Image Acquisition 的简称，当前可用版本是 WIA 1.0，它是 Windows Millennium Edition (Windows Me) 或者更高版本的 Windows 系统中提供的数字图像获取服务，同时它也能用于管理数字图像设备。&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;WIA 接口既是应用程序接口（WIA API），又是设备驱动程序接口（WIA DDI），下面要讲述的都是有关 WIA API 的内容。&lt;/p&gt;

&lt;p&gt;通过 WIA API，应用程序可以：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;运行在强壮稳定的环境中；&lt;/li&gt;
&lt;li&gt;最大可能地减少协同配合问题；&lt;/li&gt;
&lt;li&gt;枚举可用的图像获取设备；&lt;/li&gt;
&lt;li&gt;同时连接多个设备；&lt;/li&gt;
&lt;li&gt;用标准的、可扩展的方式查询设备属性；&lt;/li&gt;
&lt;li&gt;用标准的、高性能的传送机制获取数据；&lt;/li&gt;
&lt;li&gt;在数据传送过程中维持图像属性；&lt;/li&gt;
&lt;li&gt;获取大量的设备事件通知消息。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;2．WIA 架构&lt;br/&gt;
&lt;/strong&gt;WIA 是使用进程外（Out of process）服务实现的 COM 组件，和大多数进程外服务程序不同的是，WIA 通过提供自己的数据传送机制（IWiaDataTransfer 接口），避免了图像数据传送过程中的性能损失。高性能的 IWiaDataTransfer 接口使用共享内存来传送数据给客户程序。&lt;/p&gt;

&lt;p&gt;WIA 有三个主要的组件：Device Manager，Minidriver Service Library 和 Device Minidriver。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Device Manager: 枚举图像设备，获取设备属，为设备建立事件和创建设备对象；&lt;/li&gt;
&lt;li&gt;Minidriver Service Library: 执行所有设备无关的服务；&lt;/li&gt;
&lt;li&gt;Device Minidriver 解释映射: WIA 属性和命令到特定的设备。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;二、 使用WIA&lt;/strong&gt;&lt;br/&gt;
&lt;strong&gt;1．选择设备&lt;/strong&gt;&lt;br/&gt;
应用程序既可以用 WIA 内置的对话框来选择设备，也可以不使用 WIA 的用户界面。下面的程序将弹出一个 WIA 选择设备对话框：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include  #pragma comment (lib, &quot;WiaGuid.lib&quot;)  int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {     HRESULT hResult;     IWiaItem *pItemRoot;     IWiaDevMgr *pWiaDevMgr;      CoInitialize(NULL);      __try     {         // Create WIA Device Manager instance         pWiaDevMgr = NULL;         hResult = CoCreateInstance(CLSID_WiaDevMgr, NULL, CLSCTX_LOCAL_SERVER, IID_IWiaDevMgr, (void**) &amp;amp;pWiaDevMgr);         if (hResult != S_OK)         {             MessageBox(NULL, &quot;Error: CoCreateInstance().&quot;, NULL, MB_ICONSTOP);             __leave;         }          // Display a WIA select device dialog         pItemRoot = NULL;         hResult = pWiaDevMgr-&amp;gt;SelectDeviceDlg(NULL, 0, WIA_SELECT_DEVICE_NODEFAULT, NULL, &amp;amp;pItemRoot);          // User canceled         if (hResult == S_FALSE)         {             MessageBox(NULL, &quot;User canceled.&quot;, NULL, MB_ICONINFORMATION);             __leave;         }         // No device available         else if (hResult == WIA_S_NO_DEVICE_AVAILABLE)         {             MessageBox(NULL, &quot;No device available.&quot;, NULL, MB_ICONINFORMATION);             __leave;         }          // OK, Then ..........      }     __finally     {         // Release COM interface.         if (pItemRoot)             pItemRoot-&amp;gt;Release();          if (pWiaDevMgr)             pWiaDevMgr-&amp;gt;Release();          CoUninitialize();     }     return 0; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2．获取图像到文件中&lt;br/&gt;
&lt;/strong&gt;WIA 获取图像非常简单，直接调用 IWiaDevMgr::GetImageDlg()，它集成了 Select Device 和 Select Image 对话框，在传送图像的时候还会自动出现一个进度指示对话框，下面是一个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// ... // Create WIA Device Manager object. hResult = CoCreateInstance(CLSID_WiaDevMgr, NULL, CLSCTX_LOCAL_SERVER, IID_IWiaDevMgr, (void**) &amp;amp;pWiaDevMgr); if (hResult == S_OK) {     // Get a image.     hResult = pWiaDevMgr-&amp;gt;GetImageDlg(hWnd, 0, WIA_DEVICE_DIALOG_SINGLE_IMAGE, WIA_INTENT_MAXIMIZE_QUALITY, NULL, wszFilename, &amp;amp;guidFormat);     // ...... } // ...... 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不过由于 IWiaDevMgr::GetImageDlg() 是以图片文件的形式返回数据的，有的时候并不能满足我们的需要，这时候我们就需要使用 IWiaDataTransfer 接口来传送图片。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3．获取内存中的图像数据&lt;/strong&gt;&lt;br/&gt;
在 IWiaDevMgr::SelectDeviceDlg() 之后，可以用它返回的 RootItem 对象的 IWiaItem::DeviceDlg() 方法显示一个对话框浏览 WIA 设备中图片，请看下面的例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// ...... // Display a WIA dialog box to the user to prepare for image acquisition. hResult = pRootItem-&amp;gt;DeviceDlg(hWnd, 0, WIA_INTENT_MAXIMIZE_QUALITY, &amp;amp;cItem, &amp;amp;ppWiaItems); if (hResult == S_OK) {     for (i = 0; i &amp;lt; cItem; i++)     {         // ......         // ppWiaItems&amp;lt;i&amp;gt;     } } // ...... 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IWiaItem::DeviceDlg() 返回选取的图片总数和每个图片的 WiaItem 指针，我们可以用用 IWiaDataTransfer 接口来传送图片。在传送每个 WiaItem 数据之前，应该先调用 IID_IWiaPropertyStorage 接口设置相应的属性：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// ...... // Get the IWiaPropertyStorage interface so we can set required properties. hResult = pWiaItem-&amp;gt;QueryInterface(IID_IWiaPropertyStorage, (void**) &amp;amp;pWiaPropertyStorage); if (hResult == S_OK) {     // Prepare PROPSPECs and PROPVARIANTs for setting the media type and format.     psPropSpec[0].ulKind = PRSPEC_PROPID;     psPropSpec[0].propid = WIA_IPA_FORMAT;     psPropSpec[1].ulKind = PRSPEC_PROPID;     psPropSpec[1].propid = WIA_IPA_TYMED;      guidOutputFormat = WiaImgFmt_MEMORYBMP;     pvPropVariant[0].vt = VT_CLSID;     pvPropVariant[0].puuid = &amp;amp;guidOutputFormat;     pvPropVariant[1].vt = VT_I4;     pvPropVariant[1].lVal = TYMED_CALLBACK;      // Set the properties.     hResult = pWiaPropertyStorage-&amp;gt;WriteMultiple(sizeof(pvPropVariant) / sizeof(pvPropVariant[0]), psPropSpec, pvPropVariant, WIA_IPA_FIRST);      // ...... } // ......
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果用 IWiaDataTransfer 接口传送数据，我们还需要自己写代码实现 IWiaDataCallback 接口，其中 在我们的 IWiaDataCallback::BandedDataCallback() 中可以接收到数据，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// [Summary] Recieve data transfer status notifications. HRESULT CALLBACK CWiaDataCallback::BandedDataCallback(LONG lMessage, LONG lStatus, LONG lPercentComplete, LONG lOffset, LONG lLength, LONG lReserved, LONG lResLength, BYTE *pbData) {     PWIA_DATA_CALLBACK_HEADER pHeader = NULL;      switch (lMessage) &amp;amp;nbs;
p;   {     case IT_MSG_DATA_HEADER:     // The data header contains the image&#39;s final size.         pHeader = (PWIA_DATA_CALLBACK_HEADER) pbData;         if ((pHeader) &amp;amp;&amp;amp; (pHeader-&amp;gt;lBufferSize))         {             // Save the buffer size.             m_nBufferLength = pHeader-&amp;gt;lBufferSize;              // Allocate a block of memory to hold the image.             m_pBuffer = (PBYTE) HeapAlloc(GetProcessHeap(), 0, m_nBufferLength);             if (m_pBuffer == NULL)                 return S_FALSE;         }         break;      case IT_MSG_DATA:         // Make sure a block of memory has been created.         if (m_pBuffer)         {             // Copy the new band.             CopyMemory(m_pBuffer + lOffset, pbData, lLength);              // Increment the counter.             m_nBytesTransfered += lLength;         }         break;      case IT_MSG_TERMINATION:         // Notify that we complete to recive a image.         break;      default:         break;     }      return S_OK; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，我们就可以用 IWiaDataTransfer 接口来传送数据了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// ... // Create our callback class. pCallback = new CWiaDataCallback(hWnd); if (pCallback) {     // Get the IWiaDataCallback interface from our callback class.     hResult = pCallback-&amp;gt;QueryInterface(IID_IWiaDataCallback, (void**) &amp;amp;pWiaDataCallback);     if (hResult == S_OK)     {         // Perform the transfer.         wdtiTransferInfo.ulSize = sizeof(WIA_DATA_TRANSFER_INFO);         hResult = pWiaDataTransfer-&amp;gt;idtGetBandedData(&amp;amp;wdtiTransferInfo, pWiaDataCallback);         // ......     }     // ...... } // ...... 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;三、后话&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;WIA 是 Windows ME 及其以后的操作系统中提供的，Windows 98/2000 均不支持 WIA，因此需要在较新版本的 MSDN Library 中才有 WIA 文档。WIA 1.0 在 MSDN 的文档地址是：&lt;a href=&quot;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wia/wia/overviews/startpage.asp&quot;&gt;http://msdn.microsoft.com/library/default.asp?url=/library/en-us/wia/wia/overviews/startpage.asp&lt;/a&gt;，或者按目录：MSDN Library -&gt; 图形和多媒体 -&gt; Windows 图像获取 -&gt; WIA 1.0。&lt;/p&gt;

&lt;p&gt;另外，因为 Visual C++ 6.0 中没有 WIA 库，所以需要使用 Visual Studio.NET 2002/2003 编译 WIA 程序。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>DirectSpy - DShow Graph 监视工具</title>
      <link href="http://example.com/directspy-dshow-graph-monitoring-tools/"/>
      <updated>2004-10-09T03:46:08+08:00</updated>
      <id>http://example.com/directspy-dshow-graph-monitoring-tools</id>
      <content type="html">&lt;p&gt;注册后，可以在 MS GraphEdit 中查看所有 DirectShow 程序的 Filter Graph，即使该 Graph未加入到 Running Table----除非该程序作了特殊保护处理。&lt;/p&gt;

&lt;p&gt;这样就可以看看别人的 Graph 是怎样构建的了，写 DShow 程序的话，这是好咚咚。&lt;/p&gt;

&lt;p&gt;网上只能下载 Trail 版本，只能看到 Windows Media Player 打开 AVI/MPG 文件的 Graph，附件是我Crack过的。已解除这个限制，和 Full Version 功能一样：）&lt;/p&gt;

&lt;p&gt;作者主页： &lt;a href=&quot;http://www.asvzzz.com/directspy.htm&quot;&gt;http://www.asvzzz.com/directspy.htm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使用举例：&lt;/p&gt;

&lt;p&gt;1.注册：Regsvr32.exe DirectSpy.ax。&lt;br/&gt;
2.双击一个 .mpg 文件，用 Windows Media Player 打开播放它。&lt;br/&gt;
3.打开 GraphEdit，File-&gt;Connect to remote graph，这时候可以看到。&lt;/p&gt;

&lt;p&gt;有一个问题，那就是如果用 Windows Media Player 重新打开另一个文件，Graph 好像不会更新。&lt;/p&gt;

&lt;p&gt;附件下载：请点击&lt;a href=&quot;/assets/1097207028.rar&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>又是一个自然醒</title>
      <link href="http://example.com/is-a-natural-wake-up/"/>
      <updated>2004-10-09T03:31:51+08:00</updated>
      <id>http://example.com/is-a-natural-wake-up</id>
      <content type="html">&lt;p&gt;十一点零二，又是一个自然醒！七点四十的闹钟，竟然没叫。Moto 的手机操作系统怎么老范毛病？今天可是上班时间。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>国庆假期是怎样过去的</title>
      <link href="http://example.com/how-to-spend-the-national-day-holiday/"/>
      <updated>2004-10-08T13:33:22+08:00</updated>
      <id>http://example.com/how-to-spend-the-national-day-holiday</id>
      <content type="html">&lt;p&gt;七天国庆假期就这样过去了，4、5天都花在 Blog 和 PHP 上。先从 Bo-Blog 1.5 换成 ExBlog 1.2，再从 ExBlog 1.2 换成 现在的 Bo-Blog 1.6，PHP 也从开始的一无所知到有所了解了。&lt;/p&gt;

&lt;p&gt;依瓢画葫芦，为 ExBlog 修改完善了好多地方： &lt;br/&gt;
○ 增加了附件上传功能； &lt;br/&gt;
○ 评论支持 UBB 代码； &lt;br/&gt;
○ 改进后台管理程序，大大方便了管理操作； &lt;br/&gt;
○ 修改模板中的一些问题； &lt;br/&gt;
○ 其它...&lt;/p&gt;

&lt;p&gt;哪位需要 ExBlog 的话，可以到 &lt;a href=&quot;http://exblog.fengling.net/&quot;&gt;http://exblog.fengling.net/&lt;/a&gt; 看看。需要我做的修改版的话可以跟我说一声：）&lt;/p&gt;

&lt;p&gt;如果需要 Bo-Blog  1.6，可以到 &lt;a href=&quot;http://www.bo-blog.com&quot;&gt;http://www.bo-blog.com&lt;/a&gt; 下载。如果你觉得我弄得模版（就是现在的界面）不错的话，也可以跟我要。&lt;/p&gt;

&lt;p&gt;Blog 更换了，原来的评论和留言都没了，很抱歉。流过言签过到的朋友再到留言处签到一遍，热热人气：）谢谢！&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>Blog程序切换回Bo-Blog</title>
      <link href="http://example.com/back-to-bo-blog/"/>
      <updated>2004-10-08T10:57:57+08:00</updated>
      <id>http://example.com/back-to-bo-blog</id>
      <content type="html">&lt;p&gt;ExBlog 仅仅是界面好看一点点，功能实在是太少了，大大不方便。于是又切换回 Bo-Blog，并升级至 1.6 Beta 0933，为了使用和 ExBlog 一样的界面，我还特地作了一个模版，就是现在看到的这个是从原有模版 Bluetality 修改而来的。&lt;/p&gt;

&lt;p&gt;七天的国庆就这样过去了，就如同生命在逝去一样……&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>AheadLib 2.2.150 源代码</title>
      <link href="http://example.com/aheadlib-code/"/>
      <updated>2004-10-07T00:30:29+08:00</updated>
      <id>http://example.com/aheadlib-code</id>
      <content type="html">&lt;p&gt;详细信息请参考 [软件] -&gt; &lt;a href=&quot;/aheadlib&quot;&gt;AheadLib&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/1097148891.rar&quot;&gt;下载源码&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>配置 UltraEdit 为 MASM32 的IDE</title>
      <link href="http://example.com/configure-ultraedit-for-masm32/"/>
      <updated>2004-10-06T00:29:54+08:00</updated>
      <id>http://example.com/configure-ultraedit-for-masm32</id>
      <content type="html">&lt;p&gt;　　一段老文字，存此，权当存档。（主要是为 UE 的语法高亮文件 WordFile.txt 存档：）&lt;/p&gt;

&lt;p&gt;　　闲着没事，随意写一下怎样配置 UltraEdit，使之成为 MASM32 的IDE。&lt;/p&gt;

&lt;p&gt;一、准备工作&lt;/p&gt;

&lt;p&gt;　　这里先假设： &lt;br/&gt;
　　　　1. UltraEdit 安装在 C:Program FilesUltraEdit，我的是 10.0a 汉化版； &lt;br/&gt;
　　　　2. MASM32 安装在 F:MASM32。&lt;/p&gt;

&lt;p&gt;二、建立批处理&lt;/p&gt;

&lt;p&gt;　　先说说 MASM32 中一些命令的参数，初学者经常犯的一个错误是在编译连接的时候忘记添加库的路径。以下是 &lt;br/&gt;
常用的命令简介，详细情况请参见相关的命令帮助。&lt;/p&gt;

&lt;p&gt;　　1. Ml.exe /c /coff /IMASM32Include x.asm &lt;br/&gt;
　　　　以上参数请注意大小写；/I参数和路径之间没有空格。&lt;/p&gt;

&lt;p&gt;　　2. Rc.exe /iMASM32Include Resource.rc &lt;br/&gt;
　　　　同上，注意参数/i。&lt;/p&gt;

&lt;p&gt;　　3. Link.exe /SUBSYSTEM:Console /LIBPATH:MASM32Lib %1.OBJ &lt;br/&gt;
　　　　SUBSYSTEM 是目标文件的子系统类型，一般有 Windows 和 Console；/LIBPATH 是 lib 库文件的路径。&lt;/p&gt;

&lt;p&gt;　　建立一个符合自己的 编译连接批处理文件，比如我的为 MASM32ASMBAT.bat：&lt;/p&gt;

&lt;p&gt;//////////////////////////////////////////////////////////////////////////////////////////////////// &lt;br/&gt;
@ECHO OFF&lt;/p&gt;

&lt;p&gt;IF NOT EXIST Masm32BinMl.Exe GOTO _NoMasm32&lt;/p&gt;

&lt;p&gt;IF EXIST %1.obj DEL %1.obj &lt;br/&gt;
IF EXIST %1.asm MASM32BinMl.exe /IMASM32Include /c /coff %1.asm &lt;br/&gt;
IF EXIST Resource.rc GOTO &lt;em&gt;ExistRC &lt;br/&gt;
IF EXIST %1.obj MASM32BinLink.exe /SUBSYSTEM:Console /LIBPATH:MASM32Lib %1.obj &lt;br/&gt;
GOTO &lt;/em&gt;Done&lt;/p&gt;

&lt;p&gt;:_ExistRC &lt;br/&gt;
IF NOT EXIST Resource.res MASM32BinRc.exe /iMASM32Include Resource.rc &lt;br/&gt;
IF EXIST %1.obj MASM32BinLink.exe /SUBSYSTEM:Windows /LIBPATH:MASM32Lib %1.obj Resource.res&lt;/p&gt;

&lt;p&gt;:&lt;em&gt;Done: &lt;br/&gt;
IF EXIST %1.obj DEL %1.obj &lt;br/&gt;
GOTO :&lt;/em&gt;End&lt;/p&gt;

&lt;p&gt;:_NoMasm32 &lt;br/&gt;
ECHO Could not find &quot;Masm32BinMl.Exe&quot;.&lt;/p&gt;

&lt;p&gt;:_End &lt;br/&gt;
////////////////////////////////////////////////////////////////////////////////////////////////////&lt;/p&gt;

&lt;p&gt;　　上面的批处理请根据实际需要修改。当然，你也可以使用 MASM32 中自带的批处理文件，但是我觉得不方便。&lt;/p&gt;

&lt;p&gt;三、配置 UltraEdit&lt;/p&gt;

&lt;p&gt;　　修改 UltraEdit 的语法高亮文件 Wordfile.txt，使之支持 ASM 语法高亮，附件中带有支持 ASM 语法高亮的 &lt;br/&gt;
Wordfile.txt，用它覆盖 UltraEdit 自带的即可。&lt;/p&gt;

&lt;p&gt;　　打开 UltraEdit，从菜单“高级”-&gt;“工具配置”添加一条外部命令：&lt;/p&gt;

&lt;p&gt;//////////////////////////////////////////////////////////////////////////////////////////////////// &lt;br/&gt;
命令行：F:MASM32BINBW.BAT %N &lt;br/&gt;
工作目录：%P &lt;br/&gt;
菜单项名称：汇编连接(&amp;B;) &lt;br/&gt;
选定“保存活动文件” &lt;br/&gt;
选定“采集输出” &lt;br/&gt;
选定“输出到列表方块” &lt;br/&gt;
然后点“插入” &lt;br/&gt;
////////////////////////////////////////////////////////////////////////////////////////////////////&lt;/p&gt;

&lt;p&gt;　　以上 %N 代表当前打开文件的名称（不包括扩展名），%P 代表当前打开文件所在的目录，这些都是宏替换， &lt;br/&gt;
详细情况请参看 UltraEdit 的帮助。在“工具配置”的对话框中，还有“高级”按钮，里面可以自定义此命令的 &lt;br/&gt;
图标。&lt;/p&gt;

&lt;p&gt;　　最后自定义 UltraEdit 的工具栏，添加“高级”菜单下面的“工具1”等到工具栏中，以后可以从工具栏中直 &lt;br/&gt;
接执行这条命令。当然，也可以通过内置的热键调用这条命令：Ctrl+Shift+工具号。&lt;/p&gt;

&lt;p&gt;下载附件: &lt;a href=&quot;/assets/1097148757.rar&quot;&gt;UEASM.rar&lt;/a&gt;，包括示例 BAT 文件和 UE 的语法高亮文件 WordFile.txt。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>DebugTrack - 调试输出字符串追踪工具</title>
      <link href="http://example.com/debugtrack/"/>
      <updated>2004-10-04T10:44:30+08:00</updated>
      <id>http://example.com/debugtrack</id>
      <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/1096800239.gif&quot; alt=&quot; &quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　DebugTrack 是调试输出字符串追踪工具，它可以非常方便准确地监视程序中使用 Windows API OutputDebugString 输出的字符串。&lt;/p&gt;

&lt;p&gt;　　DebugTrack 是一个免费软件，你可以无偿地使用它的所有功能。&lt;/p&gt;

&lt;p&gt;**● 主要功能&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;○ 捕捉 OutputDebugString 输出字符串。&lt;/strong&gt;&lt;br/&gt;
&lt;strong&gt;○ 使用过滤器捕捉特定的字符串。&lt;/strong&gt;&lt;br/&gt;
&lt;strong&gt;○ 编辑捕捉记录 (包括添加、剪切、复制、粘贴和删除记录等)。&lt;/strong&gt;&lt;br/&gt;
&lt;strong&gt;○ 对捕捉记录排序和调整记录编号。&lt;/strong&gt;&lt;br/&gt;
&lt;strong&gt;○ 查找特定记录。&lt;/strong&gt;&lt;br/&gt;
&lt;strong&gt;○ 保存、导入捕捉记录。&lt;/strong&gt;&lt;br/&gt;
&lt;strong&gt;○ 自动清除、自动保存捕捉记录。&lt;/strong&gt;&lt;br/&gt;
**&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;其它功能&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;○ 查看输出调试字符串进程的信息。&lt;br/&gt;
○ 最小化到系统托盘。&lt;br/&gt;
○ 使用外部 LNG 文件实现多语言支持，自动根据用户环境选择语言。&lt;br/&gt;
○ 在桌面、开始菜单、程序菜单和快速启动栏中创建快捷方式。&lt;br/&gt;
○ 在 Microsoft Visual Studio 的工具菜单中创建快捷方式。&lt;br/&gt;
○ 生成 DebugTrack C/C++ 代码，方便在程序中使用 OutputDebugString 函数。&lt;br/&gt;
○ 支持拖放打开记录文件。&lt;br/&gt;
○ 支持 Windows XP 界面主题。&lt;br/&gt;
○ 更多...&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;原理介绍&lt;br/&gt;
&lt;/strong&gt;○ 请参看文章: &lt;a href=&quot;http://www.unixwiz.net/techtips/outputdebugstring.html&quot;&gt;http://www.unixwiz.net/techtips/outputdebugstring.html&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;● &lt;strong&gt;其他内容&lt;br/&gt;
&lt;/strong&gt;○ 请参看帮助文件。&lt;/p&gt;

&lt;p&gt;点击这里下载: &lt;a href=&quot;/assets/1096801352.rar&quot;&gt;DebugTrack 2.4.530.1830&lt;/a&gt;，为WinRAR 自解压包。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>使用 SBE 实现 Time Shifting</title>
      <link href="http://example.com/using-sbe-time-shifting/"/>
      <updated>2004-10-04T10:19:09+08:00</updated>
      <id>http://example.com/using-sbe-time-shifting</id>
      <content type="html">&lt;p&gt;一、概述&lt;/p&gt;

&lt;p&gt;　　Windows XP Service Pack1 提供的 Stream Buffer Engine （以下简称 SBE）允许应用程序对视频流（包括 Live Source 和 File Source）进行定位、暂停、录制、快进和倒放操作。通过 SBE，应用程序可以简单快速地实现 Time Shifting 功能。&lt;/p&gt;

&lt;p&gt;　　目前，SBE 仅在 Windows XP Service Pack 1 /2中提供，且仅支持 MPEG2 Stream 和 DV Stream。&lt;/p&gt;

&lt;p&gt;二、实现&lt;/p&gt;

&lt;p&gt;　　使用 SBE 提供的 Stream Buffer Sink Filter 和 Stream Buffer Source Filter，应用程序可以构建两个 Graph。然后通过 IStreamBufferSource::SetStreamSink() 关联两个 Graph，使 Stream Buffer Source Filter 读取 Stream Buffer Sink Filter 的输出。通过 Stream Buffer Source Filter 上的 IStreamBufferMediaSeeking::SetRate()，可以设置播放速率，实现快进和倒放功能。&lt;/p&gt;

&lt;p&gt;　　BTW: 两个 Graph 可以处于不同的进程中（此时通过 Stream Buffer Source Filter 的 IFileSourceFilter::Load() 关联两个 Graph）；另外，Sink Filter 和 Source Filter 也可处于同一个Graph 中。&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;三、图解&lt;/p&gt;

&lt;p&gt;　　先看看 Windows XP Media Center Edition 的 My TV 的 Graph：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/1096798563.jpg&quot;&gt;&lt;img src=&quot;/assets/1096798563.jpg&quot; alt=&quot; &quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;　　最左边的就是 Stream Buffer Source Filter。下面，我们来看看怎样对 Live Source 实现 Time Shifting 功能（File Source 与 Live Source 类似，在此不再详述）。先看看怎么连接 Stream Buffer Sink Filter：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/1096798652.jpg&quot;&gt;&lt;img src=&quot;/assets/1096798652.jpg&quot; alt=&quot; &quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;　　MPEG-2 流通过 MPEG-2 Demultiplexer 分成 Video Stream 和 Audio Stream，其中 Audio Stream 直接连到 Stream Buffer Sink Filter，Video Stream 通过 MPEG-2 Video Stream Analyzer 后再连接到 Stream Buffer Sink Filter。&lt;/p&gt;

&lt;p&gt;　　再看看 Stream Buffer Source Filter 的连接方法：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/1096798665.jpg&quot;&gt;&lt;img src=&quot;/assets/1096798665.jpg&quot; alt=&quot; &quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;四、代码&lt;/p&gt;

&lt;p&gt;　　为了使 Stream Buffer Source Filter 读取 Stream Buffer Sink Filter 的输出，需要在代码中实现。下面是伪代码：&lt;/p&gt;

&lt;p&gt;　　IStreamBufferSink::LoadProfile(NULL); // 一定要先 LockProfile。如果要设置相关属性，必须在 LockProfile 之前&lt;br/&gt;
　　IStreamBufferSource::SetStreamSink(IStreamBufferSink);&lt;/p&gt;

&lt;p&gt;　　好了，运行这两个 Graph，OK！&lt;/p&gt;

&lt;p&gt;　　通过 Stream Buffer Sink Filter 上的 IStreamBufferInitialize、IStreamBufferConfig 等接口，可以配置相关的参数（如 Buffer 文件大小、路径等等）。如果省略这些步骤，SBE 将会使用省却的参数。&lt;/p&gt;

&lt;p&gt;　　通过 Stream Buffer Source Filter 上的 IStreamBufferMediaSeeking 接口，可以实现媒体定定位、快进和倒放操作。&lt;/p&gt;

&lt;p&gt;　　通过 Stream Buffer Source Filter 上的 IStreamBufferSource::CreateRecorder，可以获取 IStreamBufferRecordControl 接口，进而实现录制功能。&lt;/p&gt;

&lt;p&gt;五、其它&lt;/p&gt;

&lt;p&gt;　　用 IStreamBufferMediaSeeking::SetRate(dRate) 设置播放速率，如果 dRate 为负值表示倒放。当倒放到 Buffer 起始处的时候（无 Stream 可供倒放了），将转入暂停状态。&lt;/p&gt;

&lt;p&gt;　　如果 dRate 为正值且大于 1 表示快进。当快进到 Buffer 末端的时候（无 Stream 可供快进了），将转入正常播放状态。&lt;/p&gt;

&lt;p&gt;　　除正常播放状态（dRate = 1）以外，Audio 将不会播放。&lt;/p&gt;

&lt;p&gt;　　所有的 SBE 事件通知消息（如倒放、快进到头等），可以通过常规的 Direct Show 的方法获得。&lt;/p&gt;
</content>
    </entry>
  
    <entry>
      <title>我的 Blog 今天开通了……</title>
      <link href="http://example.com/hello-blog/"/>
      <updated>2004-10-04T09:49:12+08:00</updated>
      <id>http://example.com/hello-blog</id>
      <content type="html">&lt;p&gt;今天，2004 年国庆假期第三天，我的 Blog 终于开通了……&lt;/p&gt;

&lt;p&gt;这里的文章除了特别说明为 [转载] 之外，均为本人原创，转载请说明出处。&lt;/p&gt;

&lt;p&gt;这里向 vBin 表示我最衷心的……，算了，套用 eym 的一句话——自家兄弟，感谢的话不说了。&lt;/p&gt;
</content>
    </entry>
  
</feed>
